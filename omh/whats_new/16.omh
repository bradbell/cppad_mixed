# SPDX-License-Identifier: AGPL-3.0-or-later
# SPDX-FileCopyrightText: University of Washington <https://www.washington.edu>
# SPDX-FileContributor: 2014-22 Bradley M. Bell
# ----------------------------------------------------------------------------

$begin whats_new_16$$
$spell
   mm
   dd
   chk
   jac
   ctor
   metis
   gsl
   suitesparse
   Cholesky
   CppAD
   namespace
   cppad
   dismod
   ldlt_ran_hes
   Eigen
   Wno
   valgrind
   bool
   cholmod
   iter
   cmake
   ldlt
   choleig
   ipopt
   xam
   debian
   omhelp
   config
   src/cholmod/sim_cov.cpp
   ar1
   obj
   sqrt
   ls
   libdir
   Taylor
   checkpointed
   rcv
   py
   tri
   logdet
   eval
   inv
$$

$section Changes and Additions to cppad_mixed During 2016$$

$head mm-dd$$

$subhead 11-09$$
The values $code true$$ and $code false$$ in the $code ar1_xam$$
$cref/input arguments/ar1_xam.cpp/Command Arguments/$$ and
$cref/output/ar1_xam.cpp/Output/$$ were changed to
$code yes$$ and $code no$$ respectively.
This was also done for the $cref/capture_xam/capture_xam.cpp/$$ program.


$subhead 11-07$$
$list number$$
Add the $code bin/speed_compare.py$$ program
(which has since been moved to $code bin/speed_old.py$$).
$lnext
Change order of $cref/input arguments/capture_xam.cpp/Command Arguments/$$
to $code capture_xam$$ be more similar to
$cref/ar1_xam/ar1_xam.cpp/Command Arguments/$$.
$lend

$subhead 11-04$$
This the first version with $code cppad_mixed$$ with the
checkpoint_newton_step option.
Previously, the Newton step was always checkpointed.


$subhead 11-02$$
The sparsity pattern and other information related to the Hessian of the
$cref/random likelihood/theory/Random Likelihood, f(theta, u)/$$,
$latex f_{uu} ( \theta , u )$$, was being computed twice, if
$cref/quasi_fixed/derived_ctor/quasi_fixed/$$ was false,
or if $cref information_mat$$ was called.
This has been fixed


$subhead 10-30$$
$list number$$
The $cref/A_rcv/derived_ctor/A_rcv/$$ argument was missing
from the $code initialize$$ Syntax. This has been fixed.
$lnext
The value of
$cref/number_random/capture_xam.cpp/Command Arguments/number_random/$$
was increased (from 30 to 35) to lessen the change of a random failure
during the $code make speed$$ command; see
$cref/speed/install_unix/cppad_mixed/Speed/$$.
$lend

$subhead 10-28$$
Fix bug in $code sparse_ad_cholesky$$; to be more specific,
the inverse permutation $latex P^{-1}$$ was being used where the permutation
$icode P$$ in $code sparse_ad_cholesky$$ was required.
This the first version with $code cppad_mixed$$ passes all its tests with
$icode use_atomic_cholesky$$ true.


$subhead 10-27$$
$list number$$
Add the $cref/optimize_cppad_function/run_cmake.sh/optimize_cppad_function/$$
option to the $code cmake$$ command line.
$lnext
Advance to cppad-20161027.
$lend

$subhead 10-25$$
$list number$$
Add the $icode use_atomic_cholesky$$
option to the $code cmake$$ command line.
$lnext
Fix another bug in $code sparse_ad_cholesky$$. To be specific,
when search for the beginning of a row, do not check that at column index
is less than an element known to be in the row before you get to the row.
$lnext
Fix a problem with, and improve, $cref example_install.sh$$
(the problem was introduced on 2016-10-24).
$lnext
Fix a problem with
$code install_suitesparse.sh$$
(introduced on 2016-10-24).
$lend

$subhead 10-24$$
Fix a bug in the $code sparse_ad_cholesky$$ class forward mode.
To be specific, ignore higher order Taylor coefficients that do
not appear in the sparsity patter for the zero order coefficient
(they are no effects).

$subhead 10-18$$
Fix a bug in implementation of the $cref run_cmake.sh$$
$code log_fatal_error$$ option (which has since been removed).

$subhead 10-16$$
Add the
$code log_fatal_error$$ option to the cppad_mixed configuration.

$subhead 10-15$$
$bold API Change:$$
The
$cref/random constraint matrix
   /problem
   /Notation
   /Random Constraint Matrix, A
/$$
$icode A_rcv$$, is now specified in
$cref/initialize/derived_ctor/A_rcv/$$ instead
$cref derived_ctor$$.
This was undone on
$cref/2017-03-08/whats_new_17/mm-dd/03-08/$$.

$subhead 10-14$$
$list number$$
The way the
$cref/install/install_unix/$$ searches for libraries,
and reports missing libraries,
has been improved.
$lnext
Improve the $cref/suitesparse/install_unix/System Requirements/suitesparse/$$
so that it automatically includes the $code metis$$ package.
Note that the proper value for $icode metis_version$$,
in the suitesparse install,
is printed at the end of the ipopt install.
$lend

$subhead 10-06$$
A class that performs sparse Cholesky factorization
as a CppAD atomic operation has been added; see
$code sparse_ad_cholesky$$.

$subhead 09-30$$
$list number$$
Use one value for $icode libdir$$ for all the install scripts;
see $cref/cmake_libdir/run_cmake.sh/cmake_libdir/$$.
$lnext
Use a link to switch the build and install directories between
the debug and release versions (when the install prefix ends with
$code cppad_mixed$$).
This enables one to build into the actual prefix
(without $code debug$$ or $code release$$ at the end)
by not ending the prefix with $code cppad_mixed$$.
$lnext
Advance to cppad-20160929.
$lend

$subhead 09-27$$
Add $code sparse_up_tri_sol$$
(plan to use this with a sparse atomic Cholesky AD operation).

$subhead 09-24$$
Create $code sparse_low_tri_sol$$
(plan to use this with a sparse atomic Cholesky AD operation).

$subhead 09-23$$
Improve
$cref%bin/install_eigen.sh%install_unix%Special Requirements%eigen%$$,
$cref%bin/install_ipopt.sh%install_unix%Special Requirements%Ipopt%$$,
and
$code install_suitesparse.sh$$
so they better ensure that debug and release versions got into proper
directories.


$subhead 07-28$$
$list number$$
Improve the organization of the $cref user_examples$$ section.
$lnext
Add the $icode start_near_solution$$ argument to
$cref ar1_xam.cpp$$ and $cref capture_xam.cpp$$.
$lnext
Add the $icode quasi_fixed$$ argument to $cref ar1_xam.cpp$$
and change its position in $cref capture_xam.cpp$$
(so it has same relative location as in $code ar1_xam.cpp$$).
$lnext
Change the default for
$cref/accept_after_max_steps
   /optimize_fixed
   /fixed_ipopt_options
   /accept_after_max_steps
/$$
to $code 2$$ and the default for $icode obj_scaling_factor$$
back to $code 1$$.
$lend

$subhead 07-27$$
Mention having both debug and release versions of build on same file
system; see $cref/build_type/run_cmake.sh/build_type/$$.

$subhead 07-26$$
Change the fixed effects optimization default value for the Ipopt
$icode obj_scaling_factor$$ from $code 1.0$$ to
$codei%
   %obj_scaling_factor% = 1.0 / sqrt( %n_fixed% + %n_random% )

%$$
This avoids scaling problems in $cref ar1_xam.cpp$$
with there is a large number of random effects (10,000 or more).
To be specific, the number of backtracking line search steps
$cref/ls/ipopt_trace/ls/$$ is much smaller.


$subhead 07-25$$
$list number$$
Computing the derivative of the log of the determinant term in the
$cref/Laplace approximation
   /theory
   /Objective
   /Laplace Approximation, h(theta, u)
/$$
uses the inverse of the Hessian w.r.t. the random effects
(where the Hessian is possibly non-zero).
The
$cref/ldlt_cholmod/run_cmake.sh/ldlt_cholmod/$$ method for computing
this inverse uses a special inverse subset algorithm; see
$icode method$$ in $code ldlt_cholmod_inv$$.
The $icode method$$ in $code ldlt_eigen_inv$$ has not been changed.
$lnext
Make order the same for command line arguments that have the same name in
$cref ar1_xam.cpp$$ and $cref capture_xam.cpp$$.
Change the argument $icode number_times$$ to
$icode number_random$$ (in both programs).
In addition, the $icode derivative_test$$ argument was added to both programs.
$lend

$subhead 07-20$$
Add the $icode hold_memory$$ parameter to
$cref/capture_xam.cpp/capture_xam.cpp/Command Arguments/hold_memory/$$ and
$cref/ar1_xam.cpp/ar1_xam.cpp/Command Arguments/hold_memory/$$.


$subhead 07-18$$
Add the $icode bool_sparsity$$ parameter to the following:
$cref initialize$$,
$cref information_mat$$,
$cref/capture_xam.cpp/capture_xam.cpp/Command Arguments/bool_sparsity/$$,
$cref/ar1_xam.cpp/ar1_xam.cpp/Command Arguments/bool_sparsity/$$.
In addition, remove $icode bool_sparsity$$ from the $cref run_cmake.sh$$
configuration script.
This puts the choose between boolean and set sparsity patterns
during run-time, instead of during the $cref/install/install_unix/$$ process.
The $icode bool_sparsity$$ parameter has since been moved for
$code initialize$$ and $code information_mat$$ to
$cref/derived_ctor/derived_ctor/bool_sparsity/$$.

$subhead 07-14$$
A new method for computing the Hessian of the Laplace objective
$cref/Hessian of the Laplace objective/theory/Hessian of Laplace Objective/$$
was implemented.
To be specific, two partial Newton steps
(instead of two full Newton steps) are used in the
$cref/second order
   /theory
   /Approximate Optimal Random Effects
   /Second Order, W(beta, theta, u)
/$$
approximation for the optimal random effects
$latex W( \beta , \theta , u )$$.
This should speed up the computation of the
$cref/information matrix/information_mat/$$.
It should also speed up $cref optimize_fixed$$ when
$cref/quasi_fixed/derived_ctor/quasi_fixed/$$ is false.

$subhead 07-13$$
A new method for optimizing the random effects has been included; see
$cref/evaluation_method/optimize_random/options/evaluation_method/$$.
The new method is now the default.
An option was added so the speed tests could use the new or old method; see
$icode ipopt_solve$$ in
$cref/capture_xam/capture_xam.cpp/Command Arguments/ipopt_solve/$$ and
$cref/ar1_xam/ar1_xam.cpp/Command Arguments/ipopt_solve/$$.


$subhead 07-12$$
$list number$$
Improve the error messages when
$cref/pkg-config/install_unix/System Requirements/pkg-config/$$
cannot find the configuration information
for $cref/gsl/install_unix/System Requirements/gsl/$$
or $cref/ipopt/install_unix/Special Requirements/Ipopt/$$.
$lnext
Fix a compile error (on some systems)
in the file $code src/cholmod/sim_cov.cpp$$.
$lnext
Improve discussion of Ipopt callback $icode ok$$ flag; e.g., see
$code ok$$ in $code ipopt_xam_eval_f$$.
$lend

$subhead 07-10$$
$list number$$
Improve $cref example_install.sh$$.
To be specific, give the user the option to use existing installs.
$lnext
Add more input and output options to $cref ar1_xam.cpp$$.
$lnext
Reduce that chance of random test failure using the
$cref/example/capture_xam.cpp/Example/$$ settings
for $code capture_xam.cpp$$.
$lend

$subhead 07-09$$
Change the $code auto_regressive_xam.cpp$$ example to the
$cref ar1_xam.cpp$$ example and speed test.

$subhead 06-24$$
$list number$$
There was a problem with how
$cref/gsl/install_unix/System Requirements/gsl/$$
was linked on some systems.
This has been fixed.
$lnext
The script $code bin/debian_install$$ has been moved to
$cref%bin/example_install.sh%example_install.sh%$$
and it should work for both Debian and Red Hat systems.
$lend

$subhead 06-22$$
$list number$$
Add the $code auto_regressive_xam.cpp$$ example.
$lnext
Create the scripts $code bin/debian_install.sh$$ for an easy install on Debian
systems. There are some 2DO items in this install that need to be
fixed so they work on all systems.
$lnext
Create the script $code bin/install_omhelp$$ an easy install of omhelp
for Debian systems. This is needed to do $code cppad_mixed$$ development.
$lend


$subhead 06-19$$
$list number$$
If during a call to $cref optimize_fixed$$ a
$cref/CppAD error/derived_ctor/CppAD ErrorHandler/$$ occurs,
it no longer aborts the optimization.
$lnext
Add the $icode build_type$$ choice
(debug or release) to the install script for
$cref/eigen/install_unix/Special Requirements/eigen/$$,
$cref/ipopt/install_unix/Special Requirements/Ipopt/$$, and
$cref/suitesparse/install_unix/System Requirements/suitesparse/$$.
Compiling debug versus release
for the installs above and for the
$cref/build_type/run_cmake.sh/build_type/$$
made a difference of 40.0 seconds versus 5.5 seconds
for the average of 20 values of $code capture_xam$$
$cref/optimize_fixed_seconds/capture_xam.cpp/Output/optimize_fixed_seconds/$$.
$lend


$subhead 06-18$$
If during a call to $cref optimize_fixed$$,
the Hessian of the
$cref/random likelihood/theory/Random Likelihood, f(theta, u)/$$
$latex f_{uu} ( \theta , u )$$ may not be positive definite.
This case used to aborted the optimization with a
$cref/fatal_error/base_class/User Defined Functions/fatal_error/$$.
Now a
$cref/warning/base_class/User Defined Functions/warning/$$
is used to report this condition and the
$cref/solution/optimize_fixed/solution/$$ is returned with
$codei%
   %solution%.fixed_opt
%$$
equal to the fixed effects for this warning.



$subhead 06-17$$
$list number$$
Continue to improve $cref capture_xam.cpp$$ example / speed test.
$lnext
Drop the $code a1_double$$ version of the user defined
$cref ran_likelihood$$ function.
Also drop the corresponding template functions from the
$cref user_examples$$.
$lend


$subhead 06-13$$
$list number$$
There was a bug in
$cref sample_fixed$$ that generated the assert
$code
   Assertion `H_info.col[k] == j' failed.
$$
The problem was that $code H_info$$ was not in
$cref/column manor order/sparse_mat_info/Notation/Column Major Order/$$.
This has been fixed.
$lnext
Continue to improve $cref capture_xam.cpp$$ example / speed test.
$lend

$subhead 06-12$$
$list number$$
Remove the option,
to use $code box_newton$$ to optimize the random effects
(added on $cref/06-03/whats_new_16/mm-dd/06-03/$$).
It turns out this had some problems and did not yield the hoped for
improvements in speed.
$lnext
Add comment about fact that constant terms in
$cref/fix_likelihood/fix_likelihood/vec/constant/$$ and
$cref/ran_likelihood/ran_likelihood/vec/constant/$$
do not affect the result.
In addition, change the $cref user_examples$$ to demonstrate this fact.
$lnext
Continue to improve $cref capture_xam.cpp$$ example / speed test.
$lend


$subhead 06-11$$
Improve the $cref capture_xam.cpp$$ example:
$list number$$
Make the  correspondence to its
$cref/reference/capture_xam.cpp/Reference/$$ clearer.
$lnext
Add lots of command line arguments for optional settings; see
$cref/syntax/capture_xam.cpp/Syntax/$$.
$lnext
Add a normalization factor to avoid floating point overflow during
evaluation of its $cref ran_likelihood$$.
$lend


$subhead 06-07$$
$list number$$
When $code box_newton$$ fails, change message from
$cref/fatal_error/base_class/User Defined Functions/fatal_error/$$ to
$cref/warning/base_class/User Defined Functions/warning/$$.
$lnext
Change the $code box_newton$$ convergence
$code tolerance$$ to be in terms of the
Newton step (instead of projected gradient).
$lend


$subhead 06-06$$
Fix an minor error in $code box_newton$$ line search termination criteria
(did not affect any test results).

$subhead 06-05$$
$list number$$
Make $code box_newton$$ more robust by doing line search in a
scaled negative projected gradient direction.
(Step size of one in negative projected gradient direction
may be much too large or much too small).
$lnext
There was a bug in $code ldlt_cholmod_solve_H$$ where an unnecessary
condition was check and failed. The example
$code cholmod_solve2_a.cpp$$ has been change to demonstrate that
only a subset of the right hand side values matter.
$lnext
There was an error in the
$code ldlt_eigen_logdet$$ function in the special case where the
determinant was zero. This has been fixed.
$lend


$subhead 06-04$$
Redirect CppAD error messages through
$cref/fatal_error/base_class/User Defined Functions/fatal_error/$$.

$subhead 06-03$$
Add the option to use
$code box_newton$$
to optimize the random effects.
This changed the user API for the functions listed below
(but has since been remove and the API has been changed back):

$subhead optimize_random$$
The $icode options$$ argument determines
if $code ipopt$$ or $code box_newton$$ is used.

$subhead optimize_fixed$$
The $icode random_options$$ have been split into
$icode random_box_options/$$ and
$icode random_ipopt_options$$.

$subhead sample_random$$
The $icode random_options$$ have been split into
$icode random_box_options/$$ and
$icode random_ipopt_options$$.

$subhead 05-15$$
$list number$$
The $cref sample_fixed$$ routine now uses an LDLT factorization of the
implicit information matrix instead of the implicit covariance.
This is more efficient.
$lnext
Provide $code sample_fixed$$ results
(with a warning) when the information matrix is invertible,
but not positive definite.
This is intended to help determine which variables are
not determined by the model plus data.
$lnext
Remove $code sample_fixed$$ wish list item.
$lnext
Add the $code adaptive$$ and $code trace-adaptive$$ choices to the
$cref/derivative_test/optimize_fixed/fixed_ipopt_options/derivative_test/$$
fixed effects options.
Note that this gives the user direct control over doing this test
(which can be time intensive for large problems).
$lend

$subhead 05-11$$
$list number$$
In $cref sample_fixed$$,
$cref/Replace/sample_conditional/Replaced/$$ the
$cref/conditional covariance
   /sample_conditional
   /Theory
   /Conditional Covariance
/$$
method by the implicit covariance method
(which was removed on 2020-03-15 because it was to slow).
$lnext
Return a warning when the
observed implicit covariance is not positive definite.
In addition, simulate samples from a modified covariance so user
can look for variables that vary a lot and are undetermined.
This method is suspect. It would be better to do this in information
matrix space;
see the $code sample_fixed$$ wish list item.
$lend

$subhead 05-08$$
$list number$$
Improve $cref sample_fixed$$ by removing fixed effects that have
their upper or lower limits active (or equal); see
$cref/fixed effects subset/sample_conditional/Theory/Fixed Effects Subset/$$.
With this change the $cref information_mat$$ only needs to be
positive definite on a subset of the fixed effects.
The example $cref sample_fixed.cpp$$ demonstrates this fact.
$lnext
Change $cref sample_random$$ to use the
$cref/sparse observed information/theory/Sparse Observed Information/$$ method.
This reduces the memory and time for computing these samples.
$lend

$subhead 05-06$$
Fix a bug in the $cref information_mat$$ and $cref sample_fixed$$
when the number of random effects
$cref/n_random/derived_ctor/n_random/$$ was zero.

$subhead 05-04$$
Make some improvements to the solution check and its corresponding
warning message.

$subhead 05-03$$
$list number$$
Change $code cholmod$$ class to $code ldlt_cholmod$$ class
and $code choleig$$ class to $code ldlt_eigen$$ class.
$lnext
Change $code cholmod_cholesky$$ to
$cref/ldlt_cholmod/run_cmake.sh/ldlt_cholmod/$$ in $code run_cmake.sh$$.
$lnext
There was a problem choosing $code ldlt_cholmod$$ to be $code NO$$.
This has been fixed by changing the $code ldlt_eigen_solve_H$$
function to work the same as the $code ldlt_cholmod_solve_H$$ function.
$lnext
Add more detection, and reporting as a
$cref/fatal_error/base_class/User Defined Functions/fatal_error/$$,
when the Hessian w.r.t. the random effects
$latex f_{uu} ( \theta , u)$$ is not positive definite.
$lend


$subhead 04-29$$
Add an $code cholmod_solve2_sim.cpp$$, an example that shows
how to use Cholmod to efficiently sample a distribution that
has covariance equal to the inverse of a sparse positive definite matrix.

$subhead 04-27$$
$list number$$
Add more discussion about the connection between the Lagrange multipliers
and the fixed effects bounds in the
$cref/fixed_solution/fixed_solution/fixed_lag/$$ section.
$lnext
Relax the tolerance used by $code cppad_mixed$$
when checking if a fixed effect
$cref/bound/fixed_solution/fixed_lag/$$
or a fixed constraint
$cref/bound/fixed_solution/fix_con_lag/$$
is active. This should give better detection.
$lend



$subhead 04-23$$
There was bug whereby the $cref/solution/optimize_fixed/solution/$$
returned by $code optimize_fixed$$ would have non-zero values for
$cref/fixed_lag/fixed_solution/fixed_lag/$$ that should have been zero.
This has been fixed.

$subhead 04-19$$
Add $cref sample_random$$ for sampling the posterior of the random
effects given the fixed effects.

$subhead 04-18$$
Advance to newer version of CppAD; (must rerun $code bin/install_cppad.sh$$).
This fixed the remaining warnings when building a release version.

$subhead 04-17$$
Fix some errors and warnings when
$cref/build_type/run_cmake.sh/build_type/$$ was
$code RELEASE$$.


$subhead 04-16$$
$list number$$
The routine $code ipopt_fixed_adapt_derivative_chk$$ now checks
$code ipopt_fixed_eval_jac_g$$ in addition to
$code ipopt_fixed_eval_grad_f$$.
$lnext
Fix a bug in the computation of the derivative of the random constraints.
$lend

$subhead 04-10$$
$list number$$
If the gradient check $code ipopt_fixed_adapt_derivative_chk$$ fails,
it now results in warning instead of a fatal error.
$lnext
Check the Hessian of the
$cref/random likelihood/theory/Random Likelihood, f(theta, u)/$$
$latex f_uu ( \theta , u)$$ is positive definite.
$lend

$subhead 04-15$$
Fix $cref sample_fixed$$ so that it now works properly
when some of the components of $cref fix_constraint$$ are active.

$subhead 04-09$$
Improve documentation of
$cref/fixed_ipopt_options/optimize_fixed/fixed_ipopt_options/$$
and add the special case of
$cref/max_iter/optimize_fixed/fixed_ipopt_options/max_iter/$$
equal to $code -1$$.


$subhead 04-08$$
$list number$$
Changed $code ipopt_fixed_adapt_derivative_chk$$ to handle case where
the function at both central difference points is zero,
and the derivatives is also zero.
$lnext
Test (and fix) $cref sample_fixed$$ for a case where one of the fixed effects
was at its upper or lower limit.
$lend

$subhead 04-07$$
$list number$$
The new routine $cref sample_fixed$$ samples from the posterior
distribution for the estimate of the fixed effects.
$lnext
Changed $code ipopt_fixed_adapt_derivative_chk$$ to down to step size
$code 1e-9$$ (used to just go to $code 1e-7$$.
In addition, in error report changed $code step=$$ to $code best_step=$$.
$lend


$subhead 04-06$$
The user defined virtual routines
$cref/fatal_error/base_class/User Defined Functions/fatal_error/$$
and
$cref/warning/base_class/User Defined Functions/warning/$$
have new examples in $cref derived_ctor.cpp$$.
All the other user defined virtual routines examples
have been simplified.
To be specific, each has its own specific example.
In addition, the $cref user_examples$$ have been split in
the user defined routines, $code cppad_mixed$$ defined routines,
and other examples.

$subhead 04-05$$
The new routine $cref information_mat$$ computes
the observed information matrix.

$subhead 04-03$$
There was an error (introduced on 04-02 )
in the new $cref/syntax/optimize_fixed/Syntax/$$
for $code optimize_fixed$$. This has been fixed.

$subhead 04-02$$
Add a brief description for each of the
$cref/user defined functions/base_class/User Defined Functions/$$.

$subhead 04-01$$
$bold API Change:$$
The $cref optimize_fixed$$ routine now returns the optimal Lagrange
multipliers (as well as the optimal fixed effects). If $icode fixed_out$$
was the return value for the previous version of $code optimize_fixed$$,
and $icode solution$$ is the current return value,
$codei%
   %fixed_out% = %solution%.fixed_opt
%$$.
This shows how to convert old $code optimize_fixed$$ calls to the new form.

$subhead 03-29$$
Add the option for a user defined $code ran_likelihood_hes$$ function
(since removed).

$subhead 03-28$$
$list number$$
Add the $cref ran_likelihood.cpp$$ example.
$lnext
Add the option for a user defined $code ran_likelihood_jac$$ function
(since removed).
$lend

$subhead 03-09$$
The summary of memory usage has been changed; see
$cref/size_map/initialize/size_map/$$.

$subhead 02-26$$
Fix a bug in the use of $code ldlt_cholmod_solve_H$$.
to be specific, accessing past the end of the
$icode row$$ vector in $code ldlt_cholmod_solve_H$$, in addition it must be
in increasing order (and was not specified as such).

$subhead 02-06$$
$list number$$
Change the random constraint matrix $icode A_rcv$$
to be an argument to the
$cref/derived class constructor/derived_ctor/A_rcv/$$
instead of an argument to the
$cref initialize$$ routine.
This was undone on
$cref/2016-10-15/whats_new_16/mm-dd/10-15/$$ and redone on
$cref/2017-03-08/whats_new_17/mm-dd/03-08/$$.
$lnext
Simplify the random constraint matrix source code.
$lnext
Make more efficient use of
the $code cholmod$$ Cholesky factorization package.
$lend

$subhead 01-26$$
Remove the old $code ldlt_cholmod$$ wish list its (completed) and add
partial Newton step second order method wish list item
(this item has been completed).

$subhead 01-25$$
$list number$$
Make $cref/suitesparse/install_unix/System Requirements/suitesparse/$$
a required package.
$lnext
Change the $cref run_cmake.sh$$ argument
$code set_sparsity$$ to $code bool_sparsity$$
(so that the default value is $code YES$$).
$lnext
Add the option to use $code cholmod$$ for sparse Cholesky factorization;
see $cref/ldlt_cholmod/run_cmake.sh/ldlt_cholmod/$$.
$lend

$subhead 01-22$$
It is no longer necessary to link a separate $code cppad_mixed_eigen$$
library. In addition, the new example $cref check_install.sh$$
demonstrates compiling, linking and running a program using
$code cppad_mixed$$.

$subhead 01-21$$
Change default directory where $code bin/install_eigen.sh$$ places
the Eigen package (because warnings are suppressed for this directory).

$subhead 01-19$$
Fix a bug (found by $code valgrind$$) in the setting of the upper bound
($icode g_u$$ in $code ipopt_fixed_get_bounds_info$$) for the
$cref/random constraints
   /problem
   /Maximum Likelihood
   /Random Constraints
/$$.

$subhead 01-16$$
$list number$$
Include a
$cref/random_constraint/capture_xam.cpp/Command Arguments/random_constraint/$$
in implementation and documentation of the $cref capture_xam.cpp$$ example.
In addition, check that the result satisfies the constraint that
the sum of the random effects is zero.
$lnext
Start a $cref wish_list$$.
$lend


$subhead 01-15$$
Add a $cref/Lasso/lasso.cpp/$$ example.

$subhead 01-14$$
$list number$$
First version that actually works with
$cref/random constraints/problem/Maximum Likelihood/Random Constraints/$$.
For example, see $cref ran_constraint.cpp$$.
$lnext
Fix a bug when combining absolute value terms
with $cref fix_constraint$$.
In change the default $cref/warning/base_class/User Defined Functions/warning/$$
so that it does not abort ($code assert(false)$$).
Furthermore, change the tolerance in one of the solution tests
to avoid a warning (when convergence has been achieved).
$lend

$subhead 01-13$$
Add test of absolute value terms in the
$cref/negative log-density vector/problem/Negative Log-Density Vector/$$
$cref abs_density.cpp$$,
and fix a bug demonstrated by the test.

$subhead 01-10$$
Go back to using column vectors when solving linear equations
(in case matrix results would be dense and require a lot of memory).

$subhead 01-09$$
$list number$$
The $code ldlt_eigen$$ Cholesky factorization of the Hessian
with respect to the random effects has been changed from a static
variable to the private member variable
$code ldlt_ran_hes_$$.
This has many advantages; e.g.,
it allows for multiple $cref derived_ctor$$ objects.
$lnext
Remove the need for the
$code -Wno-shadow$$ and $code -Wno-deprecated-declarations$$ options
when compiling Eigen files by using the CMake system option
for the
$href%http://eigen.tuxfamily.org%Eigen%$$ include directories.
This should work on more systems.
$lend

$subhead 01-05$$
Improve the efficiency of the evaluation of the
$cref optimize_fixed$$ objective function.
To be specific, the Cholesky factor update for
$latex f_{u,u} [ \theta , \hat{u} ( \theta ) ]$$
when there is a change in the fixed effects vector $latex \theta$$.
In addition, use matrices, instead of just column vectors,
when back solving (to simplify code and allow sparse solver
to obtain more efficiency).

$subhead 01-04$$
Regroup information in $cref theory$$ section of documentation so that
$cref/approximating optimal random effects
   /theory
   /Approximate Optimal Random Effects
/$$ is a separate section.

$subhead 01-01$$
$list number$$
Advance to newer version of CppAD; (must rerun $code bin/install_cppad.sh$$).
$lnext
Change package name in copyright message from $code dismod_at$$ to
$code cppad_mixed$$.
This should have been done when $code cppad_mixed$$ was extracted
from $code dismod_at$$.
$lend

$end
