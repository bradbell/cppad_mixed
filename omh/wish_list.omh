$Id:$
-----------------------------------------------------------------------------
cppad_mixed: C++ Laplace Approximation of Mixed Effects Models
          Copyright (C) 2014-16 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
	     GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-----------------------------------------------------------------------------
$begin wish_list$$
$spell
	CppAD
	Cholmod
	eigen
	optimizer
	cppad
	Cholesky
$$

$section CppAD Mixed Wish List$$

$head check_derivative$$
Currently $code cppad_mixed$$ does its own
$cref/derivative check/ipopt_fixed_check_derivative/$$ when
$code NDEBUG$$ is not defined.
It would be nice to have an option that turns this checking on and off
(it can take a long time for large problems).
In addition, it would be nice to have an option that prints all these
checks, not just the ones that fail, so the use could get an idea
if the problem is well scaled.

$head sample_fixed$$
It would be much more efficient if the $cref sample_fixed$$
routine used an LDLT factor of the observed implicit information
instead if inverting the information and factoring the
$cref/implicit covariance/sample_fixed/Theory/Implicit Covariance/$$.
(The $cref sample_random$$ routine already does this.)
In addition, it would be better to modify a non-positive definite
information matrix instead of inverting it and then modifying the corresponding
covariance (as is currently done).

$head sparse_mat_info$$
Use $cref sparse_mat_info$$ instead of
$icode row$$, $icode col$$, $icode val$$ triples
in syntax for following routines:
$cref fix_con_hes$$,
$cref fix_con_jac$$,
$cref fix_like_hes$$,
$cref fix_like_jac$$,
$cref ran_objcon_hes$$.

$head Second Order Method$$
The second order method,
when $cref/quasi_fixed/derived_ctor/quasi_fixed/$$ is false,
uses the second order approximate optimal random effects
$cref/W(beta, theta, u)
	/theory
	/Approximate Optimal Random Effects
	/Second Order, W(beta, theta, u)
/$$.
It might be more efficient (both in memory and speed)
to uses a second order version of the implicit function theory
derivatives or something similar to how ADOLC does it..

$head Optimizing Random Effects$$
It may save significant execution time and memory to write a special
purpose optimizer for the random effects.
We already have a recording for the Hessian w.r.t. the random effects,
it is wasteful use an optimizer that does not take advantage of that Hessian.

$head Windows Install$$
Make and test a set of Windows install instructions for $code cppad_mixed$$.

$end
