.. include:: xrst_preamble.rst

.. _sample_random-name:

!!!!!!!!!!!!!
sample_random
!!!!!!!!!!!!!

xrst input file: ``src/sample_random.cpp``

.. meta::
   :keywords: sample_random, simulation, the, posterior, distribution, for, random, effects

.. index:: sample_random, simulation, the, posterior, distribution, for, random, effects

.. _sample_random-title:

Simulation the Posterior Distribution for Random Effects
########################################################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _sample_random@Syntax:

Syntax
******

| *error_msg* = *mixed_object* . ``sample_random`` (
| |tab| *sample* ,
| |tab| *fixed_vec* ,
| |tab| *random_ipopt_options* ,
| |tab| *random_lower* ,
| |tab| *random_upper* ,
| |tab| *random_in*
| )

.. meta::
   :keywords: see, also

.. index:: see, also

.. _sample_random@See Also:

See Also
********
:ref:`sample_fixed-name`

.. meta::
   :keywords: prototype

.. index:: prototype

.. _sample_random@Prototype:

Prototype
*********

.. literalinclude:: ../../src/sample_random.cpp
   :lines: 224-230
   :language: cpp

.. meta::
   :keywords: purpose

.. index:: purpose

.. _sample_random@Purpose:

Purpose
*******
This routine draws samples from
the asymptotic posterior distribution for the
random effects given the model, the data, and the fixed effects; see
:ref:`theory@Sparse Observed Information` .

.. meta::
   :keywords: manage_gsl_rng

.. index:: manage_gsl_rng

.. _sample_random@manage_gsl_rng:

manage_gsl_rng
**************
It is assumed that
:ref:`manage_gsl_rng@get_gsl_rng` will return
a pointer to a GSL random number generator.

.. meta::
   :keywords: mixed_object

.. index:: mixed_object

.. _sample_random@mixed_object:

mixed_object
************
We use :ref:`derived_ctor@mixed_object`
to denote an object of a class that is
derived from the ``cppad_mixed`` base class.

.. meta::
   :keywords: sample

.. index:: sample

.. _sample_random@sample:

sample
******
This argument has prototype

   ``CppAD::vector<double>&`` *sample*

and its size is a multiple of
:ref:`derived_ctor@n_random` .
The input value of its elements does not matter.
We define

   *n_sample* = *sample_size* / *n_random*

If *error_msg* is empty, upon return
for ``i`` = 0 , ..., ``n_sample`` *-1* ,
``j`` = 0 , ..., ``n_random`` *-1* ,

   *sample* [ *i* * *n_random* + *j*  ]

is the *j*-th component of the *i*-th sample of the
optimal random effects.
The statistics of these samples is specified under
:ref:`sample_random@Covariance` below.

.. meta::
   :keywords: random_ipopt_options

.. index:: random_ipopt_options

.. _sample_random@random_ipopt_options:

random_ipopt_options
********************
This argument has prototype

   ``const std::string&`` *random_ipopt_options*

and is the :ref:`ipopt_options-name` for optimizing the random effects.

.. meta::
   :keywords: fixed_vec

.. index:: fixed_vec

.. _sample_random@fixed_vec:

fixed_vec
*********
This argument specifies the value of the
:ref:`fixed effects<problem@Notation@Fixed Effects, theta>`
vector :math:`\theta`.

.. meta::
   :keywords: random_lower

.. index:: random_lower

.. _sample_random@random_lower:

random_lower
************
This argument must have size equal to
:ref:`derived_ctor@n_random` and
specifies the lower limits for the optimization of the
:ref:`random effects<problem@Notation@Random Effects, u>`
vector :math:`u`.
The value minus infinity can be used to specify no lower limit.

.. meta::
   :keywords: random_upper

.. index:: random_upper

.. _sample_random@random_upper:

random_upper
************
This argument must have size equal to
:ref:`derived_ctor@n_random` and
specifies the upper limits for the optimization of the random effect.
The value plus infinity can be used to specify no lower limit.

.. meta::
   :keywords: random_in

.. index:: random_in

.. _sample_random@random_in:

random_in
*********
This argument must have size equal to
:ref:`derived_ctor@n_random` and
specifies the initial value used for the optimization of the
:ref:`random effects<problem@Notation@Random Effects, u>`
vector :math:`u`.
It must hold that

   *random_lower* [ *i* ] <= *random_in* [ *i* ] <= *random_upper* [ *i* ]

for each valid index *i* .

.. meta::
   :keywords: covariance

.. index:: covariance

.. _sample_random@Covariance:

Covariance
**********
Each sample of the random effects is an independent normal.
The mean for this distribution is the
:ref:`optimal random effects<theory@Optimal Random Effects, u^(theta)>`
:math:`\hat{u} ( \theta )`.
The variance of this distribution
is the inverse of the observed information
matrix; i.e.

.. math::

   f_{uu} [ \theta , \hat{u} ( \theta ) ] ^{-1}

This normal distribution is censored to be within the limits
*random_lower* , *random_upper* .

.. meta::
   :keywords: error_msg

.. index:: error_msg

.. _sample_random@error_msg:

error_msg
*********
If *error_msg* is empty (non-empty),
:ref:`sample_random@sample`
values have been calculated (have not been calculated).
If *error_msg* is non-empty,
it is a message describing the problem.

.. meta::
   :keywords: example

.. index:: example

.. _sample_random@Example:

Example
*******
The file :ref:`sample_random.cpp-name` is an example
and test of ``sample_random`` .

.. toctree::
   :maxdepth: 1
   :hidden:

   sample_random.cpp
