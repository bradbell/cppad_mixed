lines 6-77 of file: src/eigen/hes_fixed_obj.cpp

{xrst_begin hes_fixed_obj}

Compute the Hessian of The Fixed Effects Objective
##################################################

Syntax
******

| *hes_fixed_obj_rcv* = *mixed_object* . ``hes_fixed_obj`` (
| |tab| *fixed_vec* , *random_opt*
| )

Prototype
*********
{xrst_literal
   // BEGIN_PROTOTYPE
   // END_PROTOTYPE
}

Purpose
*******
Compute the Hessian of the fixed effects objective function
:math:`L ( \theta )`; see
:ref:`fixed effects objective<theory@Objective@Fixed Effects Objective, L(theta)>` .
The Hessian is

.. math::

   L^{(2)} ( \hat{\theta} )

Absolute value terms in the
:ref:`problem@Negative Log-Density Vector`
for the :ref:`fix_likelihood-name` are not include in this Hessian
(because they do not have a derivative, let alone Hessian, at zero).

mixed_object
************
We use :ref:`derived_ctor@mixed_object`
to denote an object of a class that is
derived from the ``cppad_mixed`` base class.

fixed_vec
*********
is the vector of fixed effects :math:`\theta` at which
the Hessian is evaluated.

random_opt
**********
is the optimal random effects corresponding to this value for the
fixed effects; i.e.,
:ref:`u^(theta)<theory@Optimal Random Effects, u^(theta)>` .

hes_fixed_obj_rcv
*****************
The return value is a
:ref:`typedef@Sparse Types@d_sparse_rcv` representation
of the lower triangle of the Hessian.
(The Hessian is symmetric and hence determined by its lower triangle.)
Absolute value terms in the
:ref:`problem@Negative Log-Density Vector`
for the :ref:`fix_likelihood-name` are not include in this Hessian
because they do not have a derivative (let alone Hessian) at zero.
{xrst_toc_hidden
   example/user/hes_fixed_obj.cpp
}

Example
*******
The file :ref:`hes_fixed_obj.cpp-name` contains an example and
test of this routine. It returns true for success and false for failure.

{xrst_end hes_fixed_obj}
