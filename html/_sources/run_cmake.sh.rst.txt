.. include:: xrst_preamble.rst

.. _run_cmake.sh-name:

!!!!!!!!!!!!
run_cmake.sh
!!!!!!!!!!!!

xrst input file: ``bin/run_cmake.sh``

.. meta::
   :keywords: run_cmake.sh, bin/run_cmake.sh:, user, configuration, options

.. index:: run_cmake.sh, bin/run_cmake.sh:, user, configuration, options

.. _run_cmake.sh-title:

bin/run_cmake.sh: User Configuration Options
############################################

.. meta::
   :keywords: verbose_makefile

.. index:: verbose_makefile

.. _run_cmake.sh@verbose_makefile:

verbose_makefile
****************
Use 'no' for normal and 'yes' for verbose make output:

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 36-36
   :language: sh

.. meta::
   :keywords: build_type

.. index:: build_type

.. _run_cmake.sh@build_type:

build_type
**********
Use either 'debug' or 'release' for the type of this build:

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 43-43
   :language: sh

.. meta::
   :keywords: cmake_install_prefix

.. index:: cmake_install_prefix

.. _run_cmake.sh@cmake_install_prefix:

cmake_install_prefix
********************
Prefix where cppad_mixed is installed:

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 50-50
   :language: sh

If *cmake_install_prefix* ends in ``/cppad_mixed`` ,
``run_cmake.sh`` will use a soft link from this prefix to
*cmake_install_prefix* . ``debug`` or
*cmake_install_prefix* . ``release``
depending on the choice for *build_type* .

.. meta::
   :keywords: debug, and, release

.. index:: debug, and, release

.. _run_cmake.sh@Debug and Release:

Debug and Release
*****************
If a soft link is used for the install,
the same technique will be used to map the ``build``
directory to the debug or release version.
If you are using both a debug and release versions of cppad_mixed,
both versions of the
:ref:`install_unix@Special Requirements`
will need to be installed.

.. meta::
   :keywords: eigen, prefix

.. index:: eigen, prefix

.. _run_cmake.sh@Eigen Prefix:

Eigen Prefix
************
It is a good idea to use a different prefix for installing eigen
because the corresponding include files are treated like system files,
otherwise the eigen include files would generate lots of warnings.
The example install script ``bin/install_eigen.sh`` uses
*cmake_install_prefix* / ``eigen`` as the prefix for installing eigen.

.. meta::
   :keywords: specific_compiler

.. index:: specific_compiler

.. _run_cmake.sh@specific_compiler:

specific_compiler
*****************
On some systems, e.g. the Mac using port, there are problems with mixing
different compiler systems for fortran and C++; see
`ipopt issue 471 <https://github.com/coin-or/Ipopt/discussions/471>`_.
This variable allows you to set a specific compiler for
C and or CXX and or FC.  For example
``specific_compiler='CC=gcc CXX=g++ FC=gfortran'``
uses the gnu versions of these compilers.
The configuration will automatically find compilers that are not specified;
i.e., if

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 88-88
   :language: sh

.. meta::
   :keywords: extra_cxx_flags

.. index:: extra_cxx_flags

.. _run_cmake.sh@extra_cxx_flags:

extra_cxx_flags
***************
Extra C++ flags used to compile and test

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 95-95
   :language: sh

.. meta::
   :keywords: cmake_libdir

.. index:: cmake_libdir

.. _run_cmake.sh@cmake_libdir:

cmake_libdir
************
Sub-directory of each prefix where libraries are installed.

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 102-102
   :language: sh

.. meta::
   :keywords: cppad_mixed.pc

.. index:: cppad_mixed.pc

.. _run_cmake.sh@cmake_libdir@cppad_mixed.pc:

cppad_mixed.pc
==============
The file pkg-config file ``cppad_mixed.pc`` is installed in the
*cmake_install_prefix/cmake_libdir* directory.

.. meta::
   :keywords: ldlt_cholmod

.. index:: ldlt_cholmod

.. _run_cmake.sh@ldlt_cholmod:

ldlt_cholmod
************
If yes, use ``ldlt_cholmod`` LDLT factorization where possible.
Otherwise always use ``ldlt_eigen`` for LDLT factorization.

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 115-115
   :language: sh

.. meta::
   :keywords: optimize_cppad_function

.. index:: optimize_cppad_function

.. _run_cmake.sh@optimize_cppad_function:

optimize_cppad_function
***********************
If yes, the operation sequence for certain CppAD functions
will be optimized. This makes the code run faster but in some cases
it can make debugging more complicated. It is suggested that you use
``no`` when *build_type* is ``debug`` and ``yes``
when *build_type* is ``release`` .

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 126-126
   :language: sh

.. meta::
   :keywords: for_hes_sparsity

.. index:: for_hes_sparsity

.. _run_cmake.sh@for_hes_sparsity:

for_hes_sparsity
****************
If yes, user ``for_hes_sparsity`` to compute sparsity w.r.t. random
effects (otherwise use ``rev_hes_sparsity`` ).

.. literalinclude:: ../../bin/run_cmake.sh
   :lines: 134-134
   :language: sh

.. meta::
   :keywords: testing, speed, and, memory

.. index:: testing, speed, and, memory

.. _run_cmake.sh@Testing Speed and Memory:

Testing Speed and Memory
************************
If you wish to test the speed or memory used by ``cppad_mixed`` ,
set *build_type* to ``release`` , include the ``-g`` flag
in *extra_cxx_flags* . Then execute the following commands:

| |tab| ``bin/install_cppad.sh``
| |tab| ``bin/run_cmake.sh``
| |tab| ``cd build`` ; ``make`` *program* ; ``cd ..``
| |tab| ``bin/`` *program* . ``sh`` *test2run*

where *program* is
:ref:`ar1_xam<ar1_xam.cpp-name>` or :ref:`capture_xam<ar1_xam.cpp-name>`
and *test2run* is
``normal`` , ``callgrind`` , or ``massif`` .
