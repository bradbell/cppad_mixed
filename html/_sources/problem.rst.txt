.. include:: xrst_preamble.rst

.. _problem-name:

!!!!!!!
problem
!!!!!!!

xrst input file: ``xrst/problem.xrst``

.. meta::
   :keywords: problem, the, cppad_mixed, maximum, likelihood, problem

.. index:: problem, the, cppad_mixed, maximum, likelihood, problem

.. _problem-title:

The cppad_mixed Maximum Likelihood Problem
##########################################

.. meta::
   :keywords: notation

.. index:: notation

.. _problem@Notation:

Notation
********
The densities below are
known functions of :math:`y`, :math:`z`, :math:`\theta`, and :math:`u`:

.. meta::
   :keywords: fixed, effects,, theta

.. index:: fixed, effects,, theta

.. _problem@Notation@Fixed Effects, theta:

Fixed Effects, theta
====================
For each ``cppad_mixed`` object,
there is a vector of fixed effects *theta* .
The number of the fixed effects, and their order is constant
(for each ``cppad_mixed`` object).
We sometimes use :math:`\theta` to denote the vector of fixed effects.

.. meta::
   :keywords: random, effects,, u

.. index:: random, effects,, u

.. _problem@Notation@Random Effects, u:

Random Effects, u
=================
For each ``cppad_mixed`` object, there is a vector of random effects
*u* .
The number of the random effects, and their order is constant
(for each ``cppad_mixed`` object).

.. meta::
   :keywords: data,, y,, z

.. index:: data,, y,, z

.. _problem@Notation@Data, y, z:

Data, y, z
==========
We use :math:`y`, (:math:`z`) to denote the set of data points that are
dependent on (independent of) the random effects.

.. meta::
   :keywords: fixed, prior, density,, p(theta)

.. index:: fixed, prior, density,, p(theta)

.. _problem@Notation@Fixed Prior Density, p(theta):

Fixed Prior Density, p(theta)
=============================
The fixed effects prior density
is denoted by :math:`\B{p}( \theta )`.

.. meta::
   :keywords: fixed, data, density,, p(z|theta)

.. index:: fixed, data, density,, p(z|theta)

.. _problem@Notation@Fixed Data Density, p(z|theta):

Fixed Data Density, p(z|theta)
==============================
The data density, that does not depend on the random effects,
is denoted by :math:`\B{p}( z | \theta )`.

.. meta::
   :keywords: random, prior, density,, p(u|theta)

.. index:: random, prior, density,, p(u|theta)

.. _problem@Notation@Random Prior Density, p(u|theta):

Random Prior Density, p(u|theta)
================================
The random effects prior density, given the fixed effects,
is denoted by :math:`\B{p}( u | \theta)`.

.. meta::
   :keywords: random, data, density,, p(y|theta,u)

.. index:: random, data, density,, p(y|theta,u)

.. _problem@Notation@Random Data Density, p(y|theta,u):

Random Data Density, p(y|theta,u)
=================================
The density for the data, given both the fixed and random effects,
is denoted by :math:`\B{p}( y | \theta, u)`.

.. meta::
   :keywords: fixed, constraint, function,, c(theta)

.. index:: fixed, constraint, function,, c(theta)

.. _problem@Notation@Fixed Constraint Function, c(theta):

Fixed Constraint Function, c(theta)
===================================
The fixed effects constraint function, denoted by :math:`c( \theta )`,
is a smooth function of the fixed effects,

.. meta::
   :keywords: optimal, random, effects,, u^(theta)

.. index:: optimal, random, effects,, u^(theta)

.. _problem@Notation@Optimal Random Effects, u^(theta):

Optimal Random Effects, u^(theta)
=================================
Given a value for the fixed effects :math:`\theta`,
the corresponding optimal random effects are defined by

.. math::

   \hat{u} ( \theta )
   =
   \R{argmax}  \; \B{p} ( y | \theta , u) \; \B{p} ( u | \theta )

Note that this definition agrees with the other definition for
:ref:`u^(theta)<theory@Optimal Random Effects, u^(theta)>` .

.. meta::
   :keywords: random, constraint, matrix,, a

.. index:: random, constraint, matrix,, a

.. _problem@Notation@Random Constraint Matrix, A:

Random Constraint Matrix, A
===========================
The random constraint matrix is denoted by :math:`A`.
It has row dimension equal to the number of constraints
and column dimension equal to the number of random effects.

.. meta::
   :keywords: random, constraint, function,, a*u^(theta)

.. index:: random, constraint, function,, a*u^(theta)

.. _problem@Notation@Random Constraint Function, A*u^(theta):

Random Constraint Function, A*u^(theta)
=======================================
We refer to :math:`A \; \hat{u} ( \theta )`
as the random constraint function.

.. meta::
   :keywords: maximum, likelihood

.. index:: maximum, likelihood

.. _problem@Maximum Likelihood:

Maximum Likelihood
******************
We are given the problem of
estimating the fixed effects by maximizing the likelihood with
respect to :math:`\theta`; i.e.,

.. math::

   \B{p}( y , z , \theta )
   =
   \B{p} ( \theta ) \B{p} ( z | \theta ) \int_{-\infty}^{+\infty}
         \B{p} ( y |  \theta, u ) \B{p} ( u | \theta ) \; \B{d} u

.. meta::
   :keywords: no, random, effects

.. index:: no, random, effects

.. _problem@Maximum Likelihood@No Random Effects:

No Random Effects
=================
In the case where there are not random effects, the vector :math:`u`
is empty and the optimal fixed effects maximize

.. math::

   \B{p} ( \theta ) \B{p} ( z | \theta )

.. meta::
   :keywords: fixed, constraints,, c

.. index:: fixed, constraints,, c

.. _problem@Maximum Likelihood@Fixed Constraints, c:

Fixed Constraints, c
====================
The fixed effects have constraints of the form

.. math::

   c_L \leq c(\theta) \leq c_U

where and :math:`c_L`, :math:`c_U` are vectors in the range of :math:`c(x)`.
In the case where there are no constraints on the fixed effects,
the range space is the empty vector.

.. meta::
   :keywords: random, constraints

.. index:: random, constraints

.. _problem@Maximum Likelihood@Random Constraints:

Random Constraints
==================
The random constraints are defined by the equation

.. math::

   0 = A \; \hat{u} ( \theta )

.. meta::
   :keywords: negative, log-density, vector

.. index:: negative, log-density, vector

.. _problem@Negative Log-Density Vector:

Negative Log-Density Vector
***************************
If *vec* is a density vector corresponding to :math:`\B{p}(x)`,
the corresponding negative log-density is given by

:math:`- \log [ \B{p} (x) ] =`

   *vec* [0] + ``fabs`` ( *vec* [1]) + ... ``fabs`` ( *vec* [ *s* ``-1`` ])

where *s* = *vec* . ``size`` () .
