.. include:: xrst_preamble.rst

.. _initialize-name:

!!!!!!!!!!
initialize
!!!!!!!!!!

xrst input file: ``src/initialize.cpp``

.. meta::
   :keywords: initialize, initialization, after, constructor

.. index:: initialize, initialization, after, constructor

.. _initialize-title:

Initialization After Constructor
################################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _initialize@Syntax:

Syntax
******
*size_map* = *mixed_object* . ``initialize`` ( *fixed_vec* , *random_vec* )

.. meta::
   :keywords: public

.. index:: public

.. _initialize@Public:

Public
******
This ``cppad_mixed`` :ref:`base_class-name` member function is public.

.. meta::
   :keywords: purpose

.. index:: purpose

.. _initialize@Purpose:

Purpose
*******
Some of the ``cppad_mixed`` initialization requires calling the
derived class version of the
:ref:`ran_likelihood-name` function.
Hence this initialization cannot be done until
after the :ref:`derived constructor<derived_ctor-name>` completes.

.. meta::
   :keywords: mixed_object

.. index:: mixed_object

.. _initialize@mixed_object:

mixed_object
************
We use :ref:`derived_ctor@mixed_object`
to denote an object of a class that is
derived from the ``cppad_mixed`` base class.

.. meta::
   :keywords: fixed_vec

.. index:: fixed_vec

.. _initialize@fixed_vec:

fixed_vec
*********
This argument has prototype

   ``const CppAD::vector<double>&`` *fixed_vec*

It specifies the value of the
:ref:`fixed effects<problem@Notation@Fixed Effects, theta>`
vector :math:`\theta` at which certain ``CppAD::ADFun``
objects are recorded.

.. meta::
   :keywords: random_vec

.. index:: random_vec

.. _initialize@random_vec:

random_vec
**********
This argument has prototype

   ``const CppAD::vector<double>&`` *random_vec*

It specifies the value of the
:ref:`random effects<problem@Notation@Random Effects, u>`
vector :math:`u` at which certain ``CppAD::ADFun``
objects are recorded.

.. meta::
   :keywords: size_map

.. index:: size_map

.. _initialize@size_map:

size_map
********
The return value has prototype

   ``std::map<std::string`` , ``size_t>`` *size_map*

It represent the size of certain aspects of the problem.

.. meta::
   :keywords: n_fixed

.. index:: n_fixed

.. _initialize@size_map@n_fixed:

n_fixed
=======
the number of fixed effects.

.. meta::
   :keywords: n_random

.. index:: n_random

.. _initialize@size_map@n_random:

n_random
========
the number of fixed effects.

.. meta::
   :keywords: quasi_fixed

.. index:: quasi_fixed

.. _initialize@size_map@quasi_fixed:

quasi_fixed
===========
If this is one (zero) are a using a quasi-Newton (Newton) method
for optimizing the fixed effects.

.. meta::
   :keywords: a_nr

.. index:: a_nr

.. _initialize@size_map@A_nr:

A_nr
====
is the number of rows in the liner constraint matrix A
(the matrix has *n_fixed* columns).

.. meta::
   :keywords: a_nnz

.. index:: a_nnz

.. _initialize@size_map@A_nnz:

A_nnz
=====
is the number of non-zeros in the liner constraint matrix A.

.. meta::
   :keywords: ran_like_fun.size_var

.. index:: ran_like_fun.size_var

.. _initialize@size_map@ran_like_fun.size_var:

ran_like_fun.size_var
=====================
is the number of variables in the algorithm that maps the
fixed and random effects to the part of the likelihood that depend
on the random effects.

.. meta::
   :keywords: fix_like_fun.size_var

.. index:: fix_like_fun.size_var

.. _initialize@size_map@fix_like_fun.size_var:

fix_like_fun.size_var
=====================
is the number of variables in the algorithm that maps the
fixed effects to the part of the likelihood that does not depend
on the random effects.

.. meta::
   :keywords: other, fields

.. index:: other, fields

.. _initialize@size_map@Other Fields:

Other Fields
============
Not all the fields in *size_map* are specified,
but they can be inspected. For example,

| |tab| ``std::map<std::string`` , ``size_t>::iterator itr`` ;
| |tab| ``for`` ( ``itr`` = *size_map* . ``begin`` (); ``itr`` != *size_map* . ``end`` (); ``itr`` ++)
| |tab| |tab| ``std::cout << itr->first <<`` " = " << ``itr->second <<`` "\\ ``n`` ";

.. meta::
   :keywords: example

.. index:: example

.. _initialize@Example:

Example
*******
The file :ref:`derived_ctor.cpp-name` contains an example
of using ``initialize`` .
