.. _sparse_mat_info-name:

!!!!!!!!!!!!!!!
sparse_mat_info
!!!!!!!!!!!!!!!

xrst input file: ``include/cppad/mixed/sparse_mat_info.hpp``

.. meta::
   :keywords: sparse_mat_info, sparse, matrix, information

.. index:: sparse_mat_info, sparse, matrix, information

.. _sparse_mat_info-title:

Sparse Matrix Information
#########################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _sparse_mat_info@Syntax:

Syntax
******

   *CppAD::mixed::sparse_mat_info* ``mat_info``

*mat_info* . ``resize`` ( *size* )

.. meta::
   :keywords: purpose

.. index:: purpose

.. _sparse_mat_info@Purpose:

Purpose
*******
This structure holds information about a sparse matrix.

.. meta::
   :keywords: row

.. index:: row

.. _sparse_mat_info@row:

row
***
The field *mat_info* . ``row`` has prototype

   ``CppAD::vector<size_t>`` *mat_info* . ``row``

It has size zero when it is constructed.
After initialization it should contain the row indices
corresponding to possibly non-zero elements of the matrix.

.. meta::
   :keywords: k

.. index:: k

.. _sparse_mat_info@row@K:

K
=
We use *K* = *mat_info* . ``row.size`` () below.

.. meta::
   :keywords: col

.. index:: col

.. _sparse_mat_info@col:

col
***
The field *mat_info* . ``col`` has prototype

   ``CppAD::vector<size_t>`` *mat_info* . ``col``

It has size zero when it is constructed.
After initialization it should have the same size as *row*
and contain the column indices
corresponding to possibly non-zero elements of the matrix.

.. meta::
   :keywords: val

.. index:: val

.. _sparse_mat_info@val:

val
***
The field *mat_info* . ``val`` has prototype

   ``CppAD::vector<double>`` *mat_info* . ``val``

It has size zero when it is constructed.
After initialization it should either have size zero,
or the same size as *row* .

.. meta::
   :keywords: resize

.. index:: resize

.. _sparse_mat_info@resize:

resize
******
The ``resize`` argument has prototype

   ``size_t`` *size*

All of the vectors,
*row* , *col* , and *val* ,
are modified to have the specified size.

.. meta::
   :keywords: notation

.. index:: notation

.. _sparse_mat_info@Notation:

Notation
********

.. meta::
   :keywords: sparsity, pattern

.. index:: sparsity, pattern

.. _sparse_mat_info@Notation@Sparsity Pattern:

Sparsity Pattern
================
We say that *mat_info* is a sparsity pattern if,
for *k* = 0 , ... , *K* ``-1`` ,
the element with index

   ( *mat_info* . ``row`` [ *k* ], *mat_info* . ``col`` [ *k* ])

is possibly non-zero and the size or elements of
*mat_info* . ``val`` are not specified.

.. meta::
   :keywords: sparse, matrix

.. index:: sparse, matrix

.. _sparse_mat_info@Notation@Sparse Matrix:

Sparse Matrix
=============
We say that *mat_info* is a sparse matrix if,
for *k* = 0 , ... , *K* ``-1`` ,
the element with index

   ( *mat_info* . ``row`` [ *k* ], *mat_info* . ``col`` [ *k* ])

is possibly non-zero and has value *mat_info* . ``val`` [ *k* ] .

.. meta::
   :keywords: empty, matrix

.. index:: empty, matrix

.. _sparse_mat_info@Notation@Empty Matrix:

Empty Matrix
============
If *K* is zero ( *mat_info* . ``row.size`` () is zero),
we say that *mat_info* is the empty matrix.

.. meta::
   :keywords: column, major, order

.. index:: column, major, order

.. _sparse_mat_info@Notation@Column Major Order:

Column Major Order
==================
If for *k* = 0 , ... , *K* ``-1`` ,

| |tab| *mat_info* . ``col`` [ *k* ] <= *mat_info* . ``col`` [ *k* +1]
| |tab| ``if`` ( *mat_info* . ``col`` [ *k* ] == *mat_info* . ``col`` [ *k* +1] )
| |tab| |tab| *mat_info* . ``row`` [ *k* ] < *mat_info* . ``row`` [ *k* +1]

we say that *mat_info* is in column major order.

.. meta::
   :keywords: row, major, order

.. index:: row, major, order

.. _sparse_mat_info@Notation@Row Major Order:

Row Major Order
===============
If for *k* = 0 , ... , *K* ``-1`` ,

| |tab| *mat_info* . ``row`` [ *k* ] <= *mat_info* . ``row`` [ *k* +1]
| |tab| ``if`` ( *mat_info* . ``row`` [ *k* ] == *mat_info* . ``row`` [ *k* +1] )
| |tab| |tab| *mat_info* . ``col`` [ *k* ] < *mat_info* . ``col`` [ *k* +1]

we say that *mat_info* is in row major order.

.. meta::
   :keywords: lower, triangular

.. index:: lower, triangular

.. _sparse_mat_info@Notation@Lower Triangular:

Lower Triangular
================
If for *k* = 0 , ... , *K* ``-1`` ,

   *mat_info* . ``row`` [ *k* ] >= *mat_info* . ``col`` [ *k* ]

we say that *mat_info* is lower triangular.
