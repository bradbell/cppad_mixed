.. include:: xrst_preamble.rst

.. _optimize_fixed-name:

!!!!!!!!!!!!!!
optimize_fixed
!!!!!!!!!!!!!!

xrst input file: ``src/optimize_fixed.cpp``

.. meta::
   :keywords: optimize_fixed, optimize, fixed, effects

.. index:: optimize_fixed, optimize, fixed, effects

.. _optimize_fixed-title:

Optimize Fixed Effects
######################

.. meta::
   :keywords: syntax

.. index:: syntax

.. _optimize_fixed@Syntax:

Syntax
******
*solution*  =

| *mixed_object* . ``optimize_fixed`` (
| |tab| *fixed_ipopt_options* ,
| |tab| *random_ipopt_options* ,
| |tab| *fixed_lower* ,
| |tab| *fixed_upper* ,
| |tab| *fix_constraint_lower* ,
| |tab| *fix_constraint_upper* ,
| |tab| *fixed_scale* ,
| |tab| *fixed_in* ,
| |tab| *random_lower* ,
| |tab| *random_upper* ,
| |tab| *random_in* ,
| |tab| *warm_start*
| )

.. meta::
   :keywords: purpose

.. index:: purpose

.. _optimize_fixed@Purpose:

Purpose
*******
This routine maximizes the fixed effects objective
:ref:`L(theta)<theory@Objective@Fixed Effects Objective, L(theta)>` .

.. meta::
   :keywords: inf

.. index:: inf

.. _optimize_fixed@inf:

inf
***
The value ``inf`` below refers to

   ``std::numeric_limits<double>::infinity`` ()

.. meta::
   :keywords: mixed_object

.. index:: mixed_object

.. _optimize_fixed@mixed_object:

mixed_object
************
We use :ref:`derived_ctor@mixed_object`
to denote an object of a class that is
derived from the ``cppad_mixed`` base class.

.. meta::
   :keywords: fixed_ipopt_options

.. index:: fixed_ipopt_options

.. _optimize_fixed@fixed_ipopt_options:

fixed_ipopt_options
*******************
This argument has prototype

   ``const std::string&`` *fixed_ipopt_options*

and is the :ref:`ipopt_options-name` for optimizing the fixed effects
with the following qualifications:

.. meta::
   :keywords: derivative_test

.. index:: derivative_test

.. _optimize_fixed@fixed_ipopt_options@derivative_test:

derivative_test
===============
If *derivative_test* is ``none`` ,
no derivative testing is done.
If it is ``first-order`` ,
only first order derivatives are tested.
If it is ``second-order`` (``only-second-order`` )
second derivatives (and first derivatives) are tested.
In these two cases
:ref:`derived_ctor@quasi_fixed` must be ``false`` .
If *derivative_test* is ``adaptive`` ,
a special ``cppad_mixed`` adaptive step size method is
used to test first order derivatives.
If it is ``trace-adaptive`` ,
the adaptive step size results are traced on standard output.

.. meta::
   :keywords: hessian_approximation

.. index:: hessian_approximation

.. _optimize_fixed@fixed_ipopt_options@hessian_approximation:

hessian_approximation
=====================
If *quasi_fixed* is true (false),
*hessian_approximation* will be set to
``limit-memory`` (``exact`` ).
If it is also set in *fixed_ipopt_options* , it must have this value.

.. meta::
   :keywords: max_iter

.. index:: max_iter

.. _optimize_fixed@fixed_ipopt_options@max_iter:

max_iter
========
If *max_iter* == ``-1`` in *fixed_ipopt_options* ,
*solution* . ``fixed_opt`` == *fixed_in* .
In addition, Ipopt is run with *max_iter*  = 0 and the return status
``Ipopt::Maximum_Iterations_Exceeded`` is consider normal; i.e.,
does not generate a warning or error message.
Furthermore, the fixed effects optimization will return immediately
(not try to backup and recover) if an error occur during evaluation of
the fixed effects objective, constraints, or their derivatives.
If *max_iter*  == 0 in the options,
it may be that *solution* . ``fixed_opt`` != *fixed_in*
(Ipopt moves non-equality constraints to the interior of the constraint).
(this is the only difference between ``-1`` and ``0`` ).

.. meta::
   :keywords: accept_after_max_steps

.. index:: accept_after_max_steps

.. _optimize_fixed@fixed_ipopt_options@accept_after_max_steps:

accept_after_max_steps
======================
The default value for *accept_after_max_steps* is ``-1``
(no limit).
This is the maximum number of backtracking steps to take before
accepting a line search point; see
:ref:`ipopt_trace@ls` is the ipopt tracing documentation.

.. meta::
   :keywords: nlp_scaling_method

.. index:: nlp_scaling_method

.. _optimize_fixed@fixed_ipopt_options@nlp_scaling_method:

nlp_scaling_method
==================
When optimizing the fixed effects,
the objective and the constraint functions are automatically scaled
by ``cppad_mixed`` .
It is an error for the user to specify this option in
*fixed_ipopt_options* .

.. meta::
   :keywords: random_ipopt_options

.. index:: random_ipopt_options

.. _optimize_fixed@random_ipopt_options:

random_ipopt_options
********************
This argument has prototype

   ``const std::string&`` *random_ipopt_options*

and is the :ref:`ipopt_options-name` for optimizing the random effects.

.. meta::
   :keywords: fixed_lower

.. index:: fixed_lower

.. _optimize_fixed@fixed_lower:

fixed_lower
***********
This argument has prototype

   ``const CppAD::vector<double>&`` *fixed_lower*

It has size :ref:`derived_ctor@n_fixed` and
specifies the lower limits for the
:ref:`fixed effects<problem@Notation@Fixed Effects, theta>` .
Note that minus infinity is used for no lower limit.

.. meta::
   :keywords: fixed_upper

.. index:: fixed_upper

.. _optimize_fixed@fixed_upper:

fixed_upper
***********
This argument has prototype

   ``const CppAD::vector<double>&`` *fixed_upper*

It has size *n_fixed* and specifies the upper limits for the
:ref:`fixed effects<problem@Notation@Fixed Effects, theta>` .
Note that plus infinity is used for no upper limit.

.. meta::
   :keywords: fix_constraint_lower

.. index:: fix_constraint_lower

.. _optimize_fixed@fix_constraint_lower:

fix_constraint_lower
********************
This argument has prototype

   ``const CppAD::vector<double>&`` *fix_constraint_lower*

it has size *n_fixed* and specifies the lower limits for the
:ref:`fixed constraints<fix_constraint-name>` .
Note that minus infinity is used for no lower limit.

.. meta::
   :keywords: fix_constraint_upper

.. index:: fix_constraint_upper

.. _optimize_fixed@fix_constraint_upper:

fix_constraint_upper
********************
This argument has prototype

   ``const CppAD::vector<double>&`` *fix_constraint_upper*

it specifies the upper limits for the
:ref:`fixed constraints<fix_constraint-name>` .
Note that plus infinity is used for no upper limit.

.. meta::
   :keywords: fixed_scale

.. index:: fixed_scale

.. _optimize_fixed@fixed_scale:

fixed_scale
***********
This argument has prototype

   ``const CppAD::vector<double>&`` *fixed_scale*

The fixed effect objective and constraint functions are multiplied by a
scale factor so that their derivatives are near one at *fixed_scale* .
This makes the Ipopt tolerance be relative to the derivatives at
*fixed_scale* .
It must hold for each *j* that

   *fixed_lower* [ *j* ] <= *fixed_scale* [ *j* ] <= *fixed_upper* [ *j* ]

Partial derivatives with respect to components for which

   *fixed_lower* [ *j* ] == *fixed_upper* [ *j* ]

are not included in this scaling.
Note that you can continue an optimization with the same scaling
by setting

   *fixed_in* = *solution* . ``fixed_opt``

and the re-running the optimization.
Also note that scaling the fixed effects is not done by ``cppad_mixed``
and should be done by the users program when it is useful.

.. meta::
   :keywords: fixed_in

.. index:: fixed_in

.. _optimize_fixed@fixed_in:

fixed_in
********
This argument has prototype

   ``const CppAD::vector<double>&`` *fixed_in*

It specifies the initial value for the
:ref:`fixed effects<problem@Notation@Fixed Effects, theta>`
vector :math:`\theta` during the optimization process.
It must hold for each *j* that

   *fixed_lower* [ *j* ] <= *fixed_in* [ *j* ] <= *fixed_upper* [ *j* ]

.. meta::
   :keywords: random_lower

.. index:: random_lower

.. _optimize_fixed@random_lower:

random_lower
************
This argument has prototype

   ``const CppAD::vector<double>&`` *random_lower*

It must have size equal to
:ref:`derived_ctor@n_random` and
specifies the lower limits for the optimization of the
:ref:`random effects<problem@Notation@Random Effects, u>`
vector :math:`u`.
This may be useful to keep the random effects
out of regions of numerical instability.
On the other hand, the calculation of the
:ref:`theory@Derivative of Optimal Random Effects`
:math:`\hat{u}_\theta ( \theta )` will not be correct when these constraints
are active (and this could have adverse effects on the optimization).
The value minus infinity can be used to specify no lower limit.

.. meta::
   :keywords: random_upper

.. index:: random_upper

.. _optimize_fixed@random_upper:

random_upper
************
This argument has prototype

   ``const CppAD::vector<double>&`` *random_upper*

It must have size equal to
:ref:`derived_ctor@n_random` and
specifies the upper limits for the optimization of the random effect.
The value plus infinity can be used to specify no lower limit.

.. meta::
   :keywords: random_in

.. index:: random_in

.. _optimize_fixed@random_in:

random_in
*********
This argument has prototype

   ``const CppAD::vector<double>&`` *random_in*

It must have size equal to
:ref:`derived_ctor@n_random` and
specifies the initial value used for the optimization of the
:ref:`random effects<problem@Notation@Random Effects, u>`
vector :math:`u`.
It must hold that

   *random_lower* [ *i* ] <= *random_in* [ *i* ] <= *random_upper* [ *i* ]

for each valid index *i* .

.. meta::
   :keywords: warm_start

.. index:: warm_start

.. _optimize_fixed@warm_start:

warm_start
**********
This argument is optional and has prototype

   ``const warm_start_struct&`` *warm_start*

It is an error for the user to specify *warm_start_init_point* in
*fixed_ipopt_options* .

.. meta::
   :keywords: no, warm, start

.. index:: no, warm, start

.. _optimize_fixed@warm_start@No Warm Start:

No Warm Start
=============
If the size of *warm_start* . ``x_info`` is zero,
there is no warm start information.
This is the same as when the argument is not present.
In this case, the ipopt *warm_start_init_point* option will be set to
``no`` .

.. meta::
   :keywords: warm, start

.. index:: warm, start

.. _optimize_fixed@warm_start@Warm Start:

Warm Start
==========
If the size of *warm_start* . ``x_info`` is non-zero,
*warm_start* must is equal the
:ref:`fixed_solution@warm_start` field in a
fixed effects solution returned by a previous call to ``optimized_fixed`` .
This can be used to continue a fit when the maximum number of iterations
is reached or when the tolerance for the fixed or random effects is changed.

#. The ipopt *warm_start_init_point* options will be set to ``yes`` .
#. The ipopt *mu_strategy* options will be set to ``monotone`` .
#. The *fixed_scale* and *fixed_in* arguments are not used
   during a warm start optimization.
#. Any derivative test specified in *fixed_ipopt_options*
   will not be passed onto Ipopt; i.e.,
   no derivative testing is done during a warm start.

.. meta::
   :keywords: example

.. index:: example

.. _optimize_fixed@warm_start@Example:

Example
=======
see :ref:`warm_start.cpp-name`

.. meta::
   :keywords: solution

.. index:: solution

.. _optimize_fixed@solution:

solution
********
The return value has prototype

   ``CppAD::mixed::fixed_solution`` *solution*

It is the solution (obtained by optimization) of the
fixed effects vector and its Lagrange multipliers; see
:ref:`fixed_solution-name` .

.. meta::
   :keywords: laplace, approximation

.. index:: laplace, approximation

.. _optimize_fixed@Laplace Approximation:

Laplace Approximation
*********************
The :ref:`theory-name` for the
Laplace approximation optimization only includes the case where
the :ref:`random likelihood<ran_likelihood-name>` is smooth.

.. meta::
   :keywords: example

.. index:: example

.. _optimize_fixed@Example:

Example
*******
The file :ref:`optimize_fixed.cpp-name` contains an example
and test of this procedure.
It returns true, if the test passes, and false otherwise.

.. meta::
   :keywords: ipopt_fixed

.. index:: ipopt_fixed

.. _optimize_fixed@ipopt_fixed:

ipopt_fixed
***********
The  class ``ipopt_fixed`` is used by ``optimize_fixed``
to optimize the fixed effects.
It's specifications are not part of the :ref:`cppad_mixed-name` public interface.

.. toctree::
   :maxdepth: 1
   :hidden:

   optimize_fixed.cpp
   ipopt_options
   ipopt_trace
