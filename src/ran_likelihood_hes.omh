// $Id:$
/* --------------------------------------------------------------------------
cppad_mixed: C++ Laplace Approximation of Mixed Effects Models
          Copyright (C) 2014-16 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
	     GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-------------------------------------------------------------------------- */
$begin ran_likelihood_hes$$
$spell
	hes
	vec
	cppad
	CppAD
	const
	checkpointing
$$

$section User Define Hessian With Respect to Random Effects$$

$head Under Construction$$
This feature is under construction and is not currently available for use.

$head Syntax$$
$icode%val% = mixed_object.ran_likelihood_hes(
	%fixed_vec%, %random_vec%, %row%, %col%
)%$$

$head See Also$$
$cref ran_likelihood_jac$$

$head Purpose$$
In some cases the user can define a more efficient version of the Hessian
$latex f_{u,u} ( \theta , u )$$ than can be obtained by applying AD to
the $cref ran_likelihood$$ function.
In this case one may define this function directly.
For example, it may be possible for the user to defined
$code ran_likelihood_hes$$ using CppAD checkpointing.
If one puts checkpointing in $cref ran_likelihood$$, it would be present in
$cref/ran_like_a1fun_/private/ran_like_fun_/$$ but it would be lost
when recording derivatives calculated by $code ran_like_a1fun_$$.

$head Public$$
This $code cppad_mixed$$ member function is $cref public$$.

$head mixed_object$$
We use $cref/mixed_object/derived_ctor/mixed_object/$$
to denote an object of a class that is
derived from the $code cppad_mixed$$ base class.

$head Virtual Function$$
The following virtual function may be implemented
in the derived class:
$codei%
	virtual CppAD::vector<a1_double> ran_likelihood_hes(
		const CppAD::vector<a1_double>& %fixed_vec%   ,
		const CppAD::vector<a1_double>& %random_vec%  ,
		const CppAD::vector<size_t>&          %row%   ,
		const CppAD::vector<size_t>&          %col%
	)
%$$

$head fixed_vec$$
This argument has prototype
$codei%
	const CppAD::vector<%Float%>& %fixed_vec%
%$$
It contains a value for the
$cref/fixed effects/cppad_mixed/Notation/Fixed Effects, theta/$$ vector
$latex \theta$$.

$head random_vec$$
This argument has prototype
$codei%
	const CppAD::vector<%Float%>& %random_vec%
%$$
It contains a value for the
$cref/random effects/cppad_mixed/Notation/Random Effects, u/$$ vector
$latex u$$.

$head K$$
We use $icode K$$ to denote the size of the
$icode row$$ and $icode col$$ vectors (which must be equal).

$head row$$
This argument has prototype
$codei%
	const CppAD::vector<size_t>& %row%
%$$
It contains the row indices for the Hessian values.
For $icode%k% = 0 , %...% , %K%-1%$$,
$icode%row%[%k%] < %random_vec%.size()%$$.

$head col$$
This argument has prototype
$codei%
	const CppAD::vector<size_t>& %col%
%$$
It contains the column indices for the Hessian values.
For $icode%k% = 0 , %...% , %K%-1%$$,
$icode%col%[%k%] < %random_vec%.size()%$$.

$head val$$
The return value has prototype
$codei%
	CppAD::vector<a1_double>& %val%
%$$
Upon return it contains the possibly non-zero values in the Hessian.
To be specific,
for $icode%k% = 0 , %...% , %K%-1%$$,
$icode%val%[%k%]%$$ is the second partial of the random likelihood
$latex f( \theta , u )$$ with respect to
$icode%u%[ %row%[k] ]%$$ and
$icode%u%[ %col%[k] ]%$$.

$head Default$$
The base class definition (default version) of
$code ran_likelihood_hes$$ returns a size zero vector for $icode val$$
(the empty vector).
In this case,
Hessian $latex f_{u,u} ( \theta , u )$$
is computed by applying AD to the $cref ran_likelihood$$ function.

$head Plan$$
This plan is for the case where $icode%val%.size() > 0%$$.
$list number$$
The function
$cref/ran_hes_fun_/private/ran_hes_fun_/$$ will be recorded using
$code ran_likelihood_hes$$ (as apposed to using $code ran_like_a1fun_$$.
$lend


$end
