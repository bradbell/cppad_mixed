// $Id:$
/* --------------------------------------------------------------------------
cppad_mixed: C++ Laplace Approximation of Mixed Effects Models
          Copyright (C) 2014-16 University of Washington
             (Bradley M. Bell bradbell@uw.edu)

This program is distributed under the terms of the
	     GNU Affero General Public License version 3.0 or later
see http://www.gnu.org/licenses/agpl.txt
-------------------------------------------------------------------------- */
$begin ran_likelihood_jac$$
$spell
	jac
	vec
	cppad
	CppAD
	const
	checkpointing
	Jacobian
$$

$section User Define Jacobian With Respect to Random Effects$$

$head Under Construction$$
This feature is under construction and is not currently available for use.

$head Syntax$$
$icode%vec% = mixed_object.ran_likelihood_jac(%fixed_vec%, %random_vec%)%$$

$head See Also$$
$cref ran_likelihood_hes$$

$head Purpose$$
In some cases the user can define a more efficient version of the Jacobian
$latex f_u ( \theta , u )$$ than can be obtained by applying AD to
the $cref ran_likelihood$$ function.
In this case one may define this function directly.
For example, it may be possible for the user to defined
$code ran_likelihood_jac$$ using CppAD checkpointing.
If one puts checkpointing in $cref ran_likelihood$$, it would be present in
$cref/ran_like_a1fun_/private/ran_like_fun_/$$ but it would be lost
when recording derivatives calculated by $code ran_like_a1fun_$$.

$head Public$$
This $code cppad_mixed$$ member function is $cref public$$.

$head mixed_object$$
We use $cref/mixed_object/derived_ctor/mixed_object/$$
to denote an object of a class that is
derived from the $code cppad_mixed$$ base class.

$head Virtual Function$$
The following virtual function may be implemented
in the derived class:
$codei%
	virtual CppAD::vector<a1_double> ran_likelihood_jac(
		const CppAD::vector<a1_double>& %fixed_vec%   ,
		const CppAD::vector<a1_double>& %random_vec%
	)
%$$

$head fixed_vec$$
This argument has prototype
$codei%
	const CppAD::vector<%Float%>& %fixed_vec%
%$$
It contains a value for the
$cref/fixed effects/cppad_mixed/Notation/Fixed Effects, theta/$$ vector
$latex \theta$$.

$head random_vec$$
This argument has prototype
$codei%
	const CppAD::vector<%Float%>& %random_vec%
%$$
It contains a value for the
$cref/random effects/cppad_mixed/Notation/Random Effects, u/$$ vector
$latex u$$.

$head vec$$
The return value has prototype
$codei%
	CppAD::vector<a1_double>& %vec%
%$$
Upon return it contains the values in the Jacobian.
Let $icode n$$ be the size of $icode random_vec$$.
For $icode%j% = 0 , %...% , %n%-1%$$,
$icode%vec%[%j%]%$$ is the partial of the random likelihood
$latex f( \theta , u )$$ with respect to $latex u_j$$.

$head Default$$
The base class definition (default) for version of
$code ran_likelihood_jac$$ returns a size zero vector for $icode vec$$
(the empty vector).
In this case,
the Jacobian $latex f_u ( \theta , u )$$
is computed by applying AD to the $cref ran_likelihood$$ function.

$head Plan$$
This plan is for the case where $icode%vec%.size() > 0%$$.
$list number$$
The function $cref ran_like_jac$$ will use
$code ran_likelihood_jac$$, as apposed to $code ran_like_a1fun_$$,
to evaluate the jacobian of the random likelihood.
$lend


$end
