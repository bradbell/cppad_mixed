<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Update Factorization Using new Matrix Values</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Update Factorization Using new Matrix Values">
<meta name="keywords" id="keywords" content=" update factorization using new matrix values syntax prototype private purpose ldlt_obj h_rcv ptr_ ok order operations example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ldlt_eigen_update_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ldlt_eigen_pattern.htm" target="_top">Prev</a>
</td><td><a href="ldlt_eigen_split.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ldlt_eigen</option>
<option>ldlt_eigen_update</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_18</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ipopt_random</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>order2random</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_eigen2rcv</option>
<option>sparse_rcv2eigen</option>
<option>sparse_print</option>
<option>sparsity_print</option>
<option>sparse_ad_cholesky</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ldlt_eigen-&gt;</option>
<option>ldlt_eigen_ctor</option>
<option>ldlt_eigen_init</option>
<option>ldlt_eigen_pattern</option>
<option>ldlt_eigen_update</option>
<option>ldlt_eigen_split</option>
<option>ldlt_eigen_logdet</option>
<option>ldlt_eigen_solve_H</option>
<option>ldlt_eigen_sim_cov</option>
<option>ldlt_eigen_inv</option>
<option>ldlt_eigen_solve_LDLT</option>
<option>ldlt_eigen.cpp</option>
</select>
</td>
<td>ldlt_eigen_update</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Private</option>
<option>Purpose</option>
<option>ldlt_obj</option>
<option>H_rcv</option>
<option>ptr_</option>
<option>ok</option>
<option>Order of Operations</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Update Factorization Using new Matrix Values</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i><font color="blue"><span style='white-space: nowrap'>.update(</span></font><i><font color="black"><span style='white-space: nowrap'>H_rcv</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Double</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> ldlt_eigen<font color="#990000">&lt;</font>Double<font color="#990000">&gt;::</font><b><font color="#000000">update</font></b><font color="#990000">(</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>sparse_rcv<font color="#990000">&lt;</font>s_vector<font color="#990000">,</font> v_vector<font color="#990000">&gt;&amp;</font> H_rcv
<font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
The <a href="ldlt_eigen.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen</span></a>
 class is an
<a href="ldlt_eigen.htm#Private" target="_top"><span style='white-space: nowrap'>implementation&nbsp;detail</span></a>
 and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine updates the <a href="ldlt_eigen.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen</span></a>
 factorization
for new values in the square positive definite matrix.

<br>
<br>
<b><big><a name="ldlt_obj" id="ldlt_obj">ldlt_obj</a></big></b>
<br>
This object has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ldlt_eigen&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Double</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
In addition, it must have a previous call to
<a href="ldlt_eigen_init.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen_init</span></a>
.

<br>
<br>
<b><big><a name="H_rcv" id="H_rcv">H_rcv</a></big></b>
<br>
This argument contains new values for the
<a href="sparse_mat_info.htm#Notation.Sparse Matrix" target="_top"><span style='white-space: nowrap'>sparse&nbsp;matrix</span></a>

we are computing the LDLT factor of.
The <a href="sparse_mat_info.htm#Notation.Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>

must be the same as in <a href="ldlt_eigen_init.htm#H_rc" target="_top"><span style='white-space: nowrap'>ldlt_eigen_init</span></a>
.
Hence, in particular, it must be in
<a href="sparse_mat_info.htm#Notation.Column Major Order" target="_top"><span style='white-space: nowrap'>column&nbsp;major</span></a>
 order
and
<a href="sparse_mat_info.htm#Notation.Lower Triangular" target="_top"><span style='white-space: nowrap'>lower&nbsp;triangular</span></a>
.

<br>
<br>
<b><big><a name="ptr_" id="ptr_">ptr_</a></big></b>
<br>
On input, the member variable 
<code><i><font color="black"><span style='white-space: nowrap'>ptr_</span></font></i></code>

has been <a href="ldlt_eigen_init.htm" target="_top"><span style='white-space: nowrap'>initialized</span></a>

using the sparsity pattern for the Hessian.
Upon return, it contains the factorization

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr_-&gt;factorize(</span></font><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 is an <code><font color="blue">eigen_sparse</font></code>
representation of the Hessian with values.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
If the return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 is true, the matrix was factored.
Otherwise, the matrix is singular.

<br>
<br>
<b><big><a name="Order of Operations" id="Order of Operations">Order of Operations</a></big></b>
<br>
This 
<code><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i></code>
 function must be called,
after the constructor and <a href="ldlt_eigen_init.htm" target="_top"><span style='white-space: nowrap'>init</span></a>

and before any other member functions.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="ldlt_eigen.cpp.htm#update" target="_top"><span style='white-space: nowrap'>ldlt_eigen.cpp</span></a>
 contains an
example and test that uses this function.


<hr>Input File: src/eigen/ldlt_eigen.cpp

</body>
</html>
