<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Newton Step Algorithm Evaluation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Newton Step Algorithm Evaluation">
<meta name="keywords" id="keywords" content=" newton step algorithm evaluation syntax prototype private algo a1_theta_u_v a1_logdet_step ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_newton_step_algo_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="newton_step_algo_ctor.htm" target="_top">Prev</a>
</td><td><a href="newton_step_ctor.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>newton_step</option>
<option>newton_step_algo</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_18</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ipopt_random</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>newton_step</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_print</option>
<option>sparsity_print</option>
<option>sparse_ad_cholesky</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>newton_step-&gt;</option>
<option>newton_step.cpp</option>
<option>newton_step_algo_ctor</option>
<option>newton_step_algo</option>
<option>newton_step_ctor</option>
<option>newton_step_initialize</option>
<option>newton_step_size_var</option>
<option>newton_step_eval</option>
</select>
</td>
<td>newton_step_algo</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Private</option>
<option>algo</option>
<option>a1_theta_u_v</option>
<option>a1_logdet_step</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Newton Step Algorithm Evaluation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>a1_theta_u_v</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>    
    <font color="#009900">void</font> newton_step_algo<font color="#990000">::</font><b><font color="#0000FF">operator</font></b><font color="#990000">()(</font>
     <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font>  a1_theta_u_v    <font color="#990000">,</font>
     a1_vector<font color="#990000">&amp;</font>        a1_logdet_step  <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This class is an implementation detail and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="algo" id="algo">algo</a></big></b>
<br>
This is a Newton step object; see
<a href="newton_step_algo_ctor.htm#algo" target="_top"><span style='white-space: nowrap'>algo</span></a>
.

<br>
<br>
<b><big><a name="a1_theta_u_v" id="a1_theta_u_v">a1_theta_u_v</a></big></b>
<br>
This is a point at which we are evaluating the Newton step
and log determinant.
This vector has size <code><font color="blue">n_fixed_ + 2 * n_random_</font></code>.
and the order of its elements are <small>@(@
\theta
@)@</small>, followed by <small>@(@
u
@)@</small>
followed by <small>@(@
v
@)@</small>.

<br>
<br>
<b><big><a name="a1_logdet_step" id="a1_logdet_step">a1_logdet_step</a></big></b>
<br>
This vector has  size <code><font color="blue">1 + n_random_</font></code>.
The input value of its elements does not matter.
Upon return,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]<br>
</span></font></code>
is the log of the determinant of <small>@(@
f_{uu} ( \theta , u )
@)@</small>.
For 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;,</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;n_random_</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
is the <small>@(@
s_{j-1}
@)@</small> where <small>@(@
s
@)@</small> is the Newton step; i.e.,
<small>@[@

	s = f_{uu} ( \theta , u )^{-1} v

@]@</small>


<hr>Input File: src/eigen/newton_step.cpp

</body>
</html>
