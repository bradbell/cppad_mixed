<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Initialize the Newton Step Checkpoint Function</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Initialize the Newton Step Checkpoint Function">
<meta name="keywords" id="keywords" content=" initialize the newton step checkpoint function syntax prototype private newton_checkpoint a1_adfun hes_rcv hes_work theta u checkpoint_fun_ ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_newton_step_initialize_htm.js'>
</script>
</head>
<body>
<table><tr>
<td><a href="newton_step_ctor.htm" target="_top">Prev</a>
</td><td><a href="newton_step_size_var.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>newton_step</option>
<option>newton_step_initialize</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_17</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>newton_step</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_ad_cholesky</option>
<option>sparse_print</option>
<option>sparsity_print</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>newton_step-&gt;</option>
<option>newton_step.cpp</option>
<option>newton_step_algo_ctor</option>
<option>newton_step_algo</option>
<option>newton_step_ctor</option>
<option>newton_step_initialize</option>
<option>newton_step_size_var</option>
<option>newton_step_eval</option>
</select>
</td>
<td>newton_step_initialize</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Private</option>
<option>newton_checkpoint</option>
<option>a1_adfun</option>
<option>hes_rcv</option>
<option>hes_work</option>
<option>theta</option>
<option>u</option>
<option>checkpoint_fun_</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Initialize the Newton Step Checkpoint Function</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>newton_checkpoint</span></font></i><font color="blue"><span style='white-space: nowrap'>.initialize(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_adfun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hes_rcv</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hes_work</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>    
    <font color="#009900">void</font> newton_step<font color="#990000">::</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>
     CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font>a1_double<font color="#990000">&gt;&amp;</font>          a1_adfun      <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> sparse_rcv<font color="#990000">&amp;</font>                 hes_rcv       <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_hes_work</font>      hes_work      <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>      theta         <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>      u             <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This class is an implementation detail and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="newton_checkpoint" id="newton_checkpoint">newton_checkpoint</a></big></b>
<br>
This is a Newton step object; see
<a href="newton_step_ctor.htm#newton_checkpoint" target="_top"><span style='white-space: nowrap'>newton_checkpoint</span></a>
.

<br>
<br>
<b><big><a name="a1_adfun" id="a1_adfun">a1_adfun</a></big></b>
<br>
This is a recording of the function <small>@(@
f( \theta , u)
@)@</small>
for which we are checkpointing the Newton step and log determinant for.
The routine <a href="pack.htm" target="_top"><span style='white-space: nowrap'>pack(theta,&nbsp;u)</span></a>
 is used to
convert the pair of vectors into the argument vector for 
<code><i><font color="black"><span style='white-space: nowrap'>a1_adfun</span></font></i></code>
.

<br>
<br>
<b><big><a name="hes_rcv" id="hes_rcv">hes_rcv</a></big></b>
<br>
This argument has prototype
<code><font color="blue">%
	const CppAD::mixed::sparse_rcv&amp; %hes_rcv%
%</font></code>
It is the
<a href="typedef.htm#Sparse Types.sparse_rcv" target="_top"><span style='white-space: nowrap'>sparse_rcv</span></a>

information for the Hessian with respect to the
random effects (as a function of the fixed and random effects); i.e.
<small>@(@
f_uu ( \theta , u)
@)@</small>.

<br>
<br>
<b><big><a name="hes_work" id="hes_work">hes_work</a></big></b>
<br>
This argument has prototype
<code><font color="blue">%
	const CppAD::sparse_hes_work&amp; %hes_work%
%</font></code>
It contains the necessary information so that the call

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a1_adfun.sparse_hes(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_w</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a1_hes_rcv,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>not_used_pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>not_used_coloring</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hes_work<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
</span></font></code>
can be used the compute the sparse Hessian.
Here 
<code><i><font color="black"><span style='white-space: nowrap'>a1_hes_rcv</span></font></i></code>
 is the same as 
<code><i><font color="black"><span style='white-space: nowrap'>hes_rcv</span></font></i></code>
, except
that its value vector has type <code><font color="blue">a1_vector</font></code> instead of <code><font color="blue">d_vector</font></code>.

<br>
<br>
<b><big><a name="theta" id="theta">theta</a></big></b>
<br>
This is a value for <small>@(@
\theta
@)@</small>
at which we can evaluate the Newton step and log determinant.

<br>
<br>
<b><big><a name="u" id="u">u</a></big></b>
<br>
This is a value for <small>@(@
u
@)@</small>
at which we can evaluate the Newton step and log determinant.

<br>
<br>
<b><big><a name="checkpoint_fun_" id="checkpoint_fun_">checkpoint_fun_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::checkpoint&lt;double&gt;*&nbsp;&nbsp;checkpoint_fun_;<br>
</span></font></code>
It must be <code><font color="blue">null</font></code> when this function is called.
Upon return,
it will point to a CppAD checkpoint function that is used
to evaluate the Newton step; see <a href="newton_step_eval.htm" target="_top"><span style='white-space: nowrap'>newton_step_eval</span></a>
.



<hr>Input File: src/eigen/newton_step.cpp

</body>
</html>
