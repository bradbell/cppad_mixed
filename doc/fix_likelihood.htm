<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>User Defined Fixed Likelihood Function</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="User Defined Fixed Likelihood Function">
<meta name="keywords" id="keywords" content=" user defined fixed likelihood function syntax mixed_object a1_double virtual fixed_vec vec constant default example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fix_likelihood_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ran_likelihood.cpp.htm" target="_top">Prev</a>
</td><td><a href="fix_likelihood.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>fix_likelihood</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_class_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_fix_likelihood_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>User Defined Fixed Likelihood Function</big></big></b></center>

<br><a href="fix_likelihood.htm#Syntax" target="_top">Syntax</a>
<br><a href="fix_likelihood.htm#mixed_object" target="_top">mixed_object</a>
<br><a href="fix_likelihood.htm#a1_double" target="_top">a1_double</a>
<br><a href="fix_likelihood.htm#Virtual Function" target="_top">Virtual&nbsp;Function</a>
<br><a href="fix_likelihood.htm#fixed_vec" target="_top">fixed_vec</a>
<br><a href="fix_likelihood.htm#vec" target="_top">vec</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="fix_likelihood.htm#vec.constant" target="_top">constant</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="fix_likelihood.htm#vec.Default" target="_top">Default</a>
<br><a href="fix_likelihood.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>mixed_object</span></font></i><font color="blue"><span style='white-space: nowrap'>.fix_likelihood(</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="mixed_object" id="mixed_object">mixed_object</a></big></b>
<br>
We use <a href="derived_ctor.htm#mixed_object" target="_top"><span style='white-space: nowrap'>mixed_object</span></a>

to denote an object of a class that is
derived from the <code><font color="blue">cppad_mixed</font></code> base class.

<br>
<br>
<b><big><a name="a1_double" id="a1_double">a1_double</a></big></b>
<br>
see <a href="typedef.htm#Scalar Types.a1_double" target="_top"><span style='white-space: nowrap'>a1_double</span></a>
.

<br>
<br>
<b><big><a name="Virtual Function" id="Virtual Function">Virtual Function</a></big></b>
<br>
The following virtual function may be implemented in the derived class:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;CppAD::vector&lt;a1_double&gt;&nbsp;fix_likelihood(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;a1_double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
</span></font></code>
<br>
<b><big><a name="fixed_vec" id="fixed_vec">fixed_vec</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;a1_double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It contains a value for the
<a href="cppad_mixed.htm#Notation.Fixed Effects, theta" target="_top"><span style='white-space: nowrap'>fixed&nbsp;effects</span></a>
 vector.

<br>
<br>
<b><big><a name="vec" id="vec">vec</a></big></b>
<br>
This result has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_double</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a
<a href="cppad_mixed.htm#Negative Log-Density Vector" target="_top"><span style='white-space: nowrap'>negative&nbsp;log-density&nbsp;vector</span></a>

corresponding to the fixed likelihood
<a href="theory.htm#Fixed Likelihood, g(theta)" target="_top"><span style='white-space: nowrap'>g(theta)</span></a>
 where
<small>@[@

	g( \theta ) = - \log [ \B{p} ( z | \theta ) \B{p} ( \theta ) ]

@]@</small>

<br>
<br>
<big><a name="vec.constant" id="vec.constant">constant</a></big>
<br>
Adding or subtracting a constant to 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
,
that does not depend on the fixed effects <small>@(@
\theta
@)@</small>,
does not affect the optimal estimates for the fixed or random effects.

<br>
<br>
<big><a name="vec.Default" id="vec.Default">Default</a></big>
<br>
The base class definition (default) for <code><font color="blue">fix_likelihood</font></code>
returns an empty vector;
i.e., 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;==&nbsp;0</span></font></code>
.
This corresponds to the case where:
<ol type="1"><li>
All of the data depends on the
random effects; i.e., the data vector
<a href="cppad_mixed.htm#Notation.Data, y, z" target="_top"><span style='white-space: nowrap'>z</span></a>
 is empty.
</li><li>

There is no prior
<a href="cppad_mixed.htm#Notation.Fixed Prior Density, p(theta)" target="_top"><span style='white-space: nowrap'>p(theta)</span></a>

for the fixed effects.
</li></ol>



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="fix_likelihood.cpp.htm" target="_top"><span style='white-space: nowrap'>fix_likelihood.cpp</span></a>
 contains an example and test
of defining this virtual function.
It returns true, if the test passes, and false otherwise.


<hr>Input File: src/fix_likelihood.omh

</body>
</html>
