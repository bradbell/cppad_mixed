<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Adaptive Step Size check of Derivative Calculations</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Adaptive Step Size check of Derivative Calculations">
<meta name="keywords" id="keywords" content=" adaptive step size check derivative calculations syntax trace relative_step relative_tol infinity ok error_message_ adaptive_called_ fixed_scale_ scale_f_ scale_g_ jac_g_row_ jac_g_col_ prototype ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_fixed_adaptive_derivative_check_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_fixed_finalize_solution.htm" target="_top">Prev</a>
</td><td><a href="ipopt_fixed_new_random.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ipopt_fixed</option>
<option>ipopt_fixed_adaptive_derivative_check</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_fixed_htm.js'></script>
</td>
<td>ipopt_fixed_adaptive_derivative_check</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Adaptive Step Size check of Derivative Calculations</big></big></b></center>

<br><a href="ipopt_fixed_adaptive_derivative_check.htm#Syntax" target="_top">Syntax</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#trace" target="_top">trace</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#relative_step" target="_top">relative_step</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#relative_tol" target="_top">relative_tol</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_fixed_adaptive_derivative_check.htm#relative_tol.infinity" target="_top">infinity</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#ok" target="_top">ok</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#error_message_" target="_top">error_message_</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#adaptive_called_" target="_top">adaptive_called_</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#fixed_scale_" target="_top">fixed_scale_</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#scale_f_" target="_top">scale_f_</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#scale_g_" target="_top">scale_g_</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#jac_g_row_, jac_g_col_" target="_top">jac_g_row_,&nbsp;jac_g_col_</a>
<br><a href="ipopt_fixed_adaptive_derivative_check.htm#Prototype" target="_top">Prototype</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;adaptive_derivative_check(</span></font><i><font color="black"><span style='white-space: nowrap'>trace</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>relative_tol</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="trace" id="trace">trace</a></big></b>
<br>
If true, a trace of this computation is printed on standard output.

<br>
<br>
<b><big><a name="relative_step" id="relative_step">relative_step</a></big></b>
<br>
For an unspecified set of relative step sizes between
<code><font color="blue">1e-3</font></code> and <code><font color="blue">1e-10</font></code>:
If the upper and lower bounds are finite,
the step is relative to the upper minus the lower bound
(for each component of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
).
If the upper or lower bound is infinite,
the step is the maximum of the relative step
and the relative step times the absolute component of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br>
<br>
<b><big><a name="relative_tol" id="relative_tol">relative_tol</a></big></b>
<br>
This is the relative tolerance for the difference between a finite difference
approximation and the evaluated derivative.
The absolute tolerance is the relative tolerance times the
sum of sum of the absolute value of the gradient and the approximation.
In the case of the Hessian, for each column the absolute value of
the diagonal element for that column is added to the sum before multiplying
by the relative tolerance.

<br>
<br>
<big><a name="relative_tol.infinity" id="relative_tol.infinity">infinity</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>trace</span></font></i></code>
 is false and 
<code><i><font color="black"><span style='white-space: nowrap'>relative_tol</span></font></i></code>
 is equal to
<code><font color="blue">std::numeric_limits&lt;double&gt;::infinity()</font></code>,
the finite difference approximations for the derivatives are not calculated.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
If it is true, no function evaluation error occurred and
all the differences between the finite difference approximation
and the evaluated derivative are within the relative tolerance
(for one of the relative steps).
Otherwise,
at least one of the differences is not within the specified tolerance.

<br>
<br>
<b><big><a name="error_message_" id="error_message_">error_message_</a></big></b>
<br>
Use <code><font color="blue">clear_error_message()</font></code> to set this to the empty
string before calling <code><font color="blue">adaptive_derivative_check</font></code>.
(Note that it is empty after the <code><font color="blue">ipopt_fixed</font></code> constructor is called.)
If upon return, <code><font color="blue">get_error_message()</font></code> is non-empty,
a description of a function evaluation
error that occurred during this routine.

<br>
<br>
<b><big><a name="adaptive_called_" id="adaptive_called_">adaptive_called_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;adaptive_called_<br>
</span></font></code>
It's value upon call must be <code><font color="blue">false</font></code>.
It is set to true at the beginning of <code><font color="blue">adaptive_derivative_check</font></code>,
before any other <code><font color="blue">ipopt_fixed</font></code> routine is called.

<br>
<br>
<b><big><a name="fixed_scale_" id="fixed_scale_">fixed_scale_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d_vector&nbsp;fixed_scale_<br>
</span></font></code>
and is size is equal to the number of fixed effects.
It is used as the point where in the extended space 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

where the scaling and derivative testing is done.

<br>
<br>
<b><big><a name="scale_f_" id="scale_f_">scale_f_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;scale_f_<br>
</span></font></code>
and its input value does not matter.
If 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 is true, upon return 
<code><i><font color="black"><span style='white-space: nowrap'>scale_f_</span></font></i></code>

is a scale factor of <small>@(@
f(x)
@)@</small>; i.e., multiplier for f.
Components of <small>@(@
x
@)@</small> for which the lower and upper limits are equal
are not included in the scaling of <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="scale_g_" id="scale_g_">scale_g_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d_vector&nbsp;scale_g_<br>
</span></font></code>
and its input size is zero.
If 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 is true, upon return 
<code><i><font color="black"><span style='white-space: nowrap'>scale_g_</span></font></i></code>

has size equal to range for <small>@(@
g(x)
@)@</small>; i.e., 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.
For each <small>@(@
i
@)@</small>, 
<code><i><font color="black"><span style='white-space: nowrap'>scale_g_</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is scale factor for
<small>@(@
g_i (x)
@)@</small>.
Components of <small>@(@
x
@)@</small> for which the lower and upper limits are equal
are not included in the scaling of <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="jac_g_row_, jac_g_col_" id="jac_g_row_, jac_g_col_">jac_g_row_, jac_g_col_</a></big></b>
<br>
These member variables have prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_vector&nbsp;jac_g_row_,&nbsp;jac_g_col_<br>
</span></font></code>
This input size for these vectors must be zero.
Upon return these vectors
map return index for <code><font color="blue">eval_jac_g</font></code> values vector
to row and column index in <small>@(@
g'(x)
@)@</small>.


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre style='display:inline'><tt>
<font color="#009900">bool</font> ipopt_fixed<font color="#990000">::</font><b><font color="#000000">adaptive_derivative_check</font></b><font color="#990000">(</font><font color="#009900">bool</font> trace<font color="#990000">,</font> <font color="#009900">double</font> relative_tol<font color="#990000">)</font>
</tt></pre>

<hr>Input File: src/ipopt_fixed/adaptive_derivative_check.cpp

</body>
</html>
