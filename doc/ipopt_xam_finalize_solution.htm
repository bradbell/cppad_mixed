<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Get Solution Results</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Get Solution Results">
<meta name="keywords" id="keywords" content=" get solution results syntax n x z_l z_u m lambda obj_value ip_data ip_cq status success maxiter_exceeded cputime_exceeded stop_at_tiny_step stop_at_acceptable_point local_infeasibility user_requested_stop diverging_iterates restoration_failure error_in_step_computation invalid_number_detected source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_xam_finalize_solution_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_xam_eval_h.htm" target="_top">Prev</a>
</td><td><a href="ipopt_xam_intermediate_callback.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ipopt_fixed</option>
<option>ipopt_xam</option>
<option>ipopt_xam_finalize_solution</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_fixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_xam_htm.js'></script>
</td>
<td>ipopt_xam_finalize_solution</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Get Solution Results</big></big></b></center>

<br><a href="ipopt_xam_finalize_solution.htm#Syntax" target="_top">Syntax</a>
<br><a href="ipopt_xam_finalize_solution.htm#n" target="_top">n</a>
<br><a href="ipopt_xam_finalize_solution.htm#x" target="_top">x</a>
<br><a href="ipopt_xam_finalize_solution.htm#z_L" target="_top">z_L</a>
<br><a href="ipopt_xam_finalize_solution.htm#z_U" target="_top">z_U</a>
<br><a href="ipopt_xam_finalize_solution.htm#m" target="_top">m</a>
<br><a href="ipopt_xam_finalize_solution.htm#lambda" target="_top">lambda</a>
<br><a href="ipopt_xam_finalize_solution.htm#obj_value" target="_top">obj_value</a>
<br><a href="ipopt_xam_finalize_solution.htm#ip_data" target="_top">ip_data</a>
<br><a href="ipopt_xam_finalize_solution.htm#ip_cq" target="_top">ip_cq</a>
<br><a href="ipopt_xam_finalize_solution.htm#status" target="_top">status</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.SUCCESS" target="_top">SUCCESS</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.MAXITER_EXCEEDED" target="_top">MAXITER_EXCEEDED</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.CPUTIME_EXCEEDED" target="_top">CPUTIME_EXCEEDED</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.STOP_AT_TINY_STEP" target="_top">STOP_AT_TINY_STEP</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.STOP_AT_ACCEPTABLE_POINT" target="_top">STOP_AT_ACCEPTABLE_POINT</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.LOCAL_INFEASIBILITY" target="_top">LOCAL_INFEASIBILITY</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.USER_REQUESTED_STOP" target="_top">USER_REQUESTED_STOP</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.DIVERGING_ITERATES" target="_top">DIVERGING_ITERATES</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.RESTORATION_FAILURE" target="_top">RESTORATION_FAILURE</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.ERROR_IN_STEP_COMPUTATION" target="_top">ERROR_IN_STEP_COMPUTATION</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="ipopt_xam_finalize_solution.htm#status.INVALID_NUMBER_DETECTED" target="_top">INVALID_NUMBER_DETECTED</a>
<br><a href="ipopt_xam_finalize_solution.htm#Source" target="_top">Source</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>finalize_solution(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>status</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_L</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_U</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>,</span></font></code>


<code><i><font color="black"><span style='white-space: nowrap'>lambda</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>obj_value</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ip_data</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ip_cq</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="n" id="n">n</a></big></b>
<br>
is the number of variables in the problem (dimension of x).

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
is the final value (best value found) for the primal variables
(has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
).

<br>
<br>
<b><big><a name="z_L" id="z_L">z_L</a></big></b>
<br>
is the final value for the 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 lower bound constraint multipliers
(has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
).

<br>
<br>
<b><big><a name="z_U" id="z_U">z_U</a></big></b>
<br>
is the final value for the 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 upper bound constraint multipliers
(has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
).

<br>
<br>
<b><big><a name="m" id="m">m</a></big></b>
<br>
is the number of constraints in the problem (dimension of g(x)).

<br>
<br>
<b><big><a name="lambda" id="lambda">lambda</a></big></b>
<br>
is the final value for the g(x) constraint multipliers <small>@(@
\lambda
@)@</small>.

<br>
<br>
<b><big><a name="obj_value" id="obj_value">obj_value</a></big></b>
<br>
is the value of the objective f(x) at the final 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 value.

<br>
<br>
<b><big><a name="ip_data" id="ip_data">ip_data</a></big></b>
<br>
Unspecified; i.e., not part of the Ipopt user API.

<br>
<br>
<b><big><a name="ip_cq" id="ip_cq">ip_cq</a></big></b>
<br>
Unspecified; i.e., not part of the Ipopt user API.

<br>
<br>
<b><big><a name="status" id="status">status</a></big></b>
<br>
These status values are in the <code><font color="blue">Ipopt</font></code> namespace; e.g.,
<code><font color="blue">SUCCESS</font></code> is short for <code><font color="blue">Ipopt::SUCCESS</font></code>:

<br>
<br>
<big><a name="status.SUCCESS" id="status.SUCCESS">SUCCESS</a></big>
<br>
Algorithm terminated successfully at a locally optimal point,
satisfying the convergence tolerances (can be specified by options).

<br>
<br>
<big><a name="status.MAXITER_EXCEEDED" id="status.MAXITER_EXCEEDED">MAXITER_EXCEEDED</a></big>
<br>
Maximum number of iterations exceeded (can be specified by an option).

<br>
<br>
<big><a name="status.CPUTIME_EXCEEDED" id="status.CPUTIME_EXCEEDED">CPUTIME_EXCEEDED</a></big>
<br>
Maximum number of CPU seconds exceeded (can be specified by an option).

<br>
<br>
<big><a name="status.STOP_AT_TINY_STEP" id="status.STOP_AT_TINY_STEP">STOP_AT_TINY_STEP</a></big>
<br>
Algorithm proceeds with very little progress.

<br>
<br>
<big><a name="status.STOP_AT_ACCEPTABLE_POINT" id="status.STOP_AT_ACCEPTABLE_POINT">STOP_AT_ACCEPTABLE_POINT</a></big>
<br>
Algorithm stopped at a point that was converged, not to desired
tolerances, but to acceptable tolerances (see the acceptable-... options).

<br>
<br>
<big><a name="status.LOCAL_INFEASIBILITY" id="status.LOCAL_INFEASIBILITY">LOCAL_INFEASIBILITY</a></big>
<br>
Algorithm converged to a point of local infeasibility. Problem may be
infeasible.

<br>
<br>
<big><a name="status.USER_REQUESTED_STOP" id="status.USER_REQUESTED_STOP">USER_REQUESTED_STOP</a></big>
<br>
A user call-back function returned false, i.e.,
the user code requested a premature termination of the optimization.

<br>
<br>
<big><a name="status.DIVERGING_ITERATES" id="status.DIVERGING_ITERATES">DIVERGING_ITERATES</a></big>
<br>
It seems that the iterates diverge.

<br>
<br>
<big><a name="status.RESTORATION_FAILURE" id="status.RESTORATION_FAILURE">RESTORATION_FAILURE</a></big>
<br>
Restoration phase failed, algorithm doesn't know how to proceed.

<br>
<br>
<big><a name="status.ERROR_IN_STEP_COMPUTATION" id="status.ERROR_IN_STEP_COMPUTATION">ERROR_IN_STEP_COMPUTATION</a></big>
<br>
An unrecoverable error occurred while Ipopt tried to compute
the search direction.

<br>
<br>
<big><a name="status.INVALID_NUMBER_DETECTED" id="status.INVALID_NUMBER_DETECTED">INVALID_NUMBER_DETECTED</a></big>
<br>
Algorithm received an invalid number (such as NaN or Inf) from
the NLP; see also option check_derivatives_for_naninf.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt><font color="#009900">void</font> ipopt_nlp_xam<font color="#990000">::</font><b><font color="#000000">finalize_solution</font></b><font color="#990000">(</font>
     Ipopt<font color="#990000">::</font><font color="#008080">SolverReturn</font>               status    <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <font color="#008080">Index</font>                             n         <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     x         <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     z_L       <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     z_U       <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <font color="#008080">Index</font>                             m         <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     g         <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     lambda    <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <font color="#008080">Number</font>                            obj_value <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <b><font color="#0000FF">const</font></b> Ipopt<font color="#990000">::</font>IpoptData<font color="#990000">*</font>           ip_data   <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     Ipopt<font color="#990000">::</font>IpoptCalculatedQuantities<font color="#990000">*</font> ip_cq     <font color="#990000">)</font>  <i><font color="#9A1900">// in</font></i>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>fabs<font color="#990000">;</font>

     <i><font color="#9A1900">// default tolerance</font></i>
     <font color="#009900">double</font> tol <font color="#990000">=</font> <font color="#993399">1e-08</font><font color="#990000">;</font>

     <i><font color="#9A1900">// check problem dimensions</font></i>
     ok <font color="#990000">&amp;=</font> n <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> m <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>

     <i><font color="#9A1900">// check that x is feasible</font></i>
     ok <font color="#990000">&amp;=</font> <font color="#990000">(</font><font color="#993399">0.0</font> <font color="#990000">&lt;=</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">&amp;&amp;</font> <font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">&lt;=</font> <font color="#990000">+</font><font color="#993399">2.0</font><font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> <font color="#990000">(</font><font color="#993399">0.0</font> <font color="#990000">&lt;=</font> x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">&amp;&amp;</font> <font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">&lt;=</font> <font color="#990000">+</font><font color="#993399">3.0</font><font color="#990000">);</font>

     <i><font color="#9A1900">// check that the bound multipliers are feasible</font></i>
     ok <font color="#990000">&amp;=</font> <font color="#990000">(</font><font color="#993399">0.0</font> <font color="#990000">&lt;=</font> z_L<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">&amp;&amp;</font> <font color="#990000">(</font><font color="#993399">0.0</font> <font color="#990000">&lt;=</font> z_L<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
     ok <font color="#990000">&amp;=</font> <font color="#990000">(</font><font color="#993399">0.0</font> <font color="#990000">&lt;=</font> z_U<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">&amp;&amp;</font> <font color="#990000">(</font><font color="#993399">0.0</font> <font color="#990000">&lt;=</font> z_U<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>

     <i><font color="#9A1900">// check that the constraint on g(x) is satisfied</font></i>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">-</font> <font color="#993399">2.0</font> <font color="#990000">)</font> <font color="#990000">&lt;=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> tol<font color="#990000">;</font>

     <i><font color="#9A1900">// Check the partial of the Lagrangian w.r.t x[0]</font></i>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>
          <font color="#993399">2.0</font> <font color="#990000">*</font> beta_ <font color="#990000">*</font> <font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">-</font> <font color="#993399">2.0</font><font color="#990000">)</font> <font color="#990000">+</font> lambda<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">-</font> z_L<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> z_U<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>
     <font color="#990000">)</font> <font color="#990000">&lt;=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> tol<font color="#990000">;</font>

     <i><font color="#9A1900">// Check the partial of the Lagrangian w.r.t x[1]</font></i>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>
          <font color="#993399">2.0</font> <font color="#990000">*</font> beta_ <font color="#990000">*</font> <font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">-</font> <font color="#993399">3.0</font><font color="#990000">)</font> <font color="#990000">+</font> lambda<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">-</font> z_L<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> z_U<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>
     <font color="#990000">)</font> <font color="#990000">&lt;=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> tol<font color="#990000">;</font>

     <i><font color="#9A1900">// set member variable finalize_solution_ok_</font></i>
     finalize_solution_ok_ <font color="#990000">=</font> ok<font color="#990000">;</font>

     <i><font color="#9A1900">// set member variable final_solution_</font></i>
     final_solution_<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">Index</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
          final_solution_<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/ipopt_run.cpp

</body>
</html>
