<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Newton Step Algorithm Constructor</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Newton Step Algorithm Constructor">
<meta name="keywords" id="keywords" content=" newton step algorithm constructor syntax prototype private algo a1fun jac_a1fun hes_rcv theta u cholesky_ n_fixed_ n_random_ a1fun_ a1_jac2hes_rcv_ ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_newton_step_algo_ctor_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="newton_step.cpp.htm" target="_top">Prev</a>
</td><td><a href="newton_step_algo.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>newton_step</option>
<option>newton_step_algo_ctor</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_18</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>newton_step</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_print</option>
<option>sparsity_print</option>
<option>sparse_ad_cholesky</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>newton_step-&gt;</option>
<option>newton_step.cpp</option>
<option>newton_step_algo_ctor</option>
<option>newton_step_algo</option>
<option>newton_step_ctor</option>
<option>newton_step_initialize</option>
<option>newton_step_size_var</option>
<option>newton_step_eval</option>
</select>
</td>
<td>newton_step_algo_ctor</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Private</option>
<option>algo</option>
<option>a1fun</option>
<option>jac_a1fun</option>
<option>hes_rcv</option>
<option>theta</option>
<option>u</option>
<option>cholesky_</option>
<option>n_fixed_</option>
<option>n_random_</option>
<option>a1fun_</option>
<option>a1_jac2hes_rcv_</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Newton Step Algorithm Constructor</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>CppAD::mixed::newton_step_algo&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i><font color="blue"><span style='white-space: nowrap'>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>jac_a1fun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hes_rcv</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>    
    newton_step_algo<font color="#990000">::</font><b><font color="#000000">newton_step_algo</font></b><font color="#990000">(</font>
     CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font>a1_double<font color="#990000">&gt;&amp;</font>      a1fun         <font color="#990000">,</font>
     CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font>a1_double<font color="#990000">&gt;&amp;</font>      jac_a1fun     <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> sparse_rcv<font color="#990000">&amp;</font>             hes_rcv       <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  theta         <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  u             <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This class is an implementation detail and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="algo" id="algo">algo</a></big></b>
<br>
This is the Newton step algorithm object that is constructed
by this operation.

<br>
<br>
<b><big><a name="a1fun" id="a1fun">a1fun</a></big></b>
<br>
This is a recording of the function <small>@(@
f( \theta , u)
@)@</small>
for which we are checkpointing the Newton step and log determinant for.
The routine <a href="pack.htm" target="_top"><span style='white-space: nowrap'>pack(theta,&nbsp;u)</span></a>
 is used to
convert the pair of vectors into the argument vector for 
<code><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i></code>
.
A reference to 
<code><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i></code>
 is stored,
so this object should exist as long as 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
 exists.

<br>
<br>
<b><big><a name="jac_a1fun" id="jac_a1fun">jac_a1fun</a></big></b>
<br>
This is a recording of the Partial <small>@(@
f_u ( \theta , u)
@)@</small>.
A reference to 
<code><i><font color="black"><span style='white-space: nowrap'>jac_a1fun</span></font></i></code>
 is stored,
so this object should exist as long as 
<code><i><font color="black"><span style='white-space: nowrap'>algo</span></font></i></code>
 exists.

<br>
<br>
<b><big><a name="hes_rcv" id="hes_rcv">hes_rcv</a></big></b>
<br>
This argument has prototype
<code><font color="blue">%
	const CppAD::mixed::sparse_rcv&amp; %hes_rcv%
%</font></code>
It is the
<a href="typedef.htm#Sparse Types.sparse_rcv" target="_top"><span style='white-space: nowrap'>sparse_rcv</span></a>

information for the lower triangle of the Hessian with respect to the
random effects, as a function of the fixed and random effects; i.e.
<small>@(@
f_uu ( \theta , u)
@)@</small>.
In addition, this matrix is in column major order.

<br>
<br>
<b><big><a name="theta" id="theta">theta</a></big></b>
<br>
This is a value for <small>@(@
\theta
@)@</small>
at which we can evaluate the Newton step and log determinant.

<br>
<br>
<b><big><a name="u" id="u">u</a></big></b>
<br>
This is a value for <small>@(@
u
@)@</small>
at which we can evaluate the Newton step and log determinant.

<br>
<br>
<b><big><a name="cholesky_" id="cholesky_">cholesky_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::mixed::sparse_ad_cholesky&nbsp;cholesky_<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cholesky_.initialize(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_Hlow</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code>
is called where 
<code><i><font color="black"><span style='white-space: nowrap'>a1_Hlow</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eigen::SparseMatrix&lt;&nbsp;CppAD::AD&lt;double&gt;,&nbsp;Eigen::ColMajor&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_Hlow</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the lower triangle of the Hessian <small>@(@
f_{uu} ( \theta , u )
@)@</small>.

<br>
<br>
<b><big><a name="n_fixed_" id="n_fixed_">n_fixed_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_fixed_</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the number of fixed effects; i.e., the size of 
<code><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i></code>
.

<br>
<br>
<b><big><a name="n_random_" id="n_random_">n_random_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;size_t&nbsp;n_random_<br>
</span></font></code>
and is the number of random effects; i.e., the size of 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
.

<br>
<br>
<b><big><a name="a1fun_" id="a1fun_">a1fun_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;a1_double&gt;&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a1fun_<br>
</span></font></code>
and is a reference to the 
<code><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i></code>
 argument.

<br>
<br>
<b><big><a name="a1_jac2hes_rcv_" id="a1_jac2hes_rcv_">a1_jac2hes_rcv_</a></big></b>
<br>
This member variable has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a1_sparse_rcv_&amp;&nbsp;&nbsp;&nbsp;a1_jac2hes_rcv_<br>
</span></font></code>

<hr>Input File: src/eigen/newton_step.cpp

</body>
</html>
