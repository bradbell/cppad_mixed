<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Optimize Fixed Effects</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Optimize Fixed Effects">
<meta name="keywords" id="keywords" content=" optimize fixed effects syntax public purpose inf mixed_object fixed_ipopt_options derivative_test hessian_approximation max_iter accept_after_max_steps nlp_scaling_method random_ipopt_options fixed_lower fixed_upper fix_constraint_lower fix_constraint_upper fixed_scale fixed_in random_lower random_upper random_in warm_start no warm start example solution laplace approximation ipopt_fixed ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_optimize_fixed_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="optimize_random.cpp.htm" target="_top">Prev</a>
</td><td><a href="optimize_fixed.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>optimize_fixed</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_class_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_optimize_fixed_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Optimize Fixed Effects</big></big></b></center>

<br><a href="optimize_fixed.htm#Syntax" target="_top">Syntax</a>
<br><a href="optimize_fixed.htm#Public" target="_top">Public</a>
<br><a href="optimize_fixed.htm#Purpose" target="_top">Purpose</a>
<br><a href="optimize_fixed.htm#inf" target="_top">inf</a>
<br><a href="optimize_fixed.htm#mixed_object" target="_top">mixed_object</a>
<br><a href="optimize_fixed.htm#fixed_ipopt_options" target="_top">fixed_ipopt_options</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#fixed_ipopt_options.derivative_test" target="_top">derivative_test</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#fixed_ipopt_options.hessian_approximation" target="_top">hessian_approximation</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#fixed_ipopt_options.max_iter" target="_top">max_iter</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#fixed_ipopt_options.accept_after_max_steps" target="_top">accept_after_max_steps</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#fixed_ipopt_options.nlp_scaling_method" target="_top">nlp_scaling_method</a>
<br><a href="optimize_fixed.htm#random_ipopt_options" target="_top">random_ipopt_options</a>
<br><a href="optimize_fixed.htm#fixed_lower" target="_top">fixed_lower</a>
<br><a href="optimize_fixed.htm#fixed_upper" target="_top">fixed_upper</a>
<br><a href="optimize_fixed.htm#fix_constraint_lower" target="_top">fix_constraint_lower</a>
<br><a href="optimize_fixed.htm#fix_constraint_upper" target="_top">fix_constraint_upper</a>
<br><a href="optimize_fixed.htm#fixed_scale" target="_top">fixed_scale</a>
<br><a href="optimize_fixed.htm#fixed_in" target="_top">fixed_in</a>
<br><a href="optimize_fixed.htm#random_lower" target="_top">random_lower</a>
<br><a href="optimize_fixed.htm#random_upper" target="_top">random_upper</a>
<br><a href="optimize_fixed.htm#random_in" target="_top">random_in</a>
<br><a href="optimize_fixed.htm#warm_start" target="_top">warm_start</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#warm_start.No Warm Start" target="_top">No&nbsp;Warm&nbsp;Start</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#warm_start.Warm Start" target="_top">Warm&nbsp;Start</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="optimize_fixed.htm#warm_start.Example" target="_top">Example</a>
<br><a href="optimize_fixed.htm#solution" target="_top">solution</a>
<br><a href="optimize_fixed.htm#Laplace Approximation" target="_top">Laplace&nbsp;Approximation</a>
<br><a href="optimize_fixed.htm#Example" target="_top">Example</a>
<br><a href="optimize_fixed.htm#ipopt_fixed" target="_top">ipopt_fixed</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=</span></font></code>


<code><i><font color="black"><span style='white-space: nowrap'>mixed_object</span></font></i><font color="blue"><span style='white-space: nowrap'>.optimize_fixed(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_ipopt_options</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fix_constraint_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fix_constraint_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_scale</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>warm_start</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Public" id="Public">Public</a></big></b>
<br>
This <code><font color="blue">cppad_mixed</font></code> <a href="base_class.htm" target="_top"><span style='white-space: nowrap'>base_class</span></a>
 member function is public.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine maximizes the fixed effects objective
<a href="theory.htm#Objective.Fixed Effects Objective, L(theta)" target="_top"><span style='white-space: nowrap'>L(theta)</span></a>
.

<br>
<br>
<b><big><a name="inf" id="inf">inf</a></big></b>
<br>
The value <code><font color="blue">inf</font></code> below refers to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::numeric_limits&lt;double&gt;::infinity()<br>
</span></font></code>
<br>
<b><big><a name="mixed_object" id="mixed_object">mixed_object</a></big></b>
<br>
We use <a href="derived_ctor.htm#mixed_object" target="_top"><span style='white-space: nowrap'>mixed_object</span></a>

to denote an object of a class that is
derived from the <code><font color="blue">cppad_mixed</font></code> base class.

<br>
<br>
<b><big><a name="fixed_ipopt_options" id="fixed_ipopt_options">fixed_ipopt_options</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::string&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the <a href="ipopt_options.htm" target="_top"><span style='white-space: nowrap'>ipopt_options</span></a>
 for optimizing the fixed effects
with the following qualifications:

<br>
<br>
<big><a name="fixed_ipopt_options.derivative_test" id="fixed_ipopt_options.derivative_test">derivative_test</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>derivative_test</span></font></i></code>
 is <code><font color="blue">none</font></code>,
no derivative testing is done.
If it is <code><font color="blue">first-order</font></code>,
only first order derivatives are tested.
If it is <code><font color="blue">second-order</font></code> (<code><font color="blue">only-second-order</font></code>)
second derivatives (and first derivatives) are tested.
In these two cases
<a href="derived_ctor.htm#quasi_fixed" target="_top"><span style='white-space: nowrap'>quasi_fixed</span></a>
 must be <code><font color="blue">false</font></code>.
If 
<code><i><font color="black"><span style='white-space: nowrap'>derivative_test</span></font></i></code>
 is <code><font color="blue">adaptive</font></code>,
a special <code><font color="blue">cppad_mixed</font></code> adaptive step size method is
used to test first order derivatives.
If it is <code><font color="blue">trace-adaptive</font></code>,
the adaptive step size results are traced on standard output.

<br>
<br>
<big><a name="fixed_ipopt_options.hessian_approximation" id="fixed_ipopt_options.hessian_approximation">hessian_approximation</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>quasi_fixed</span></font></i></code>
 is true (false),

<code><i><font color="black"><span style='white-space: nowrap'>hessian_approximation</span></font></i></code>
 will be set to
<code><font color="blue">limit-memory</font></code> (<code><font color="blue">exact</font></code>).
If it is also set in 
<code><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i></code>
, it must have this value.

<br>
<br>
<big><a name="fixed_ipopt_options.max_iter" id="fixed_ipopt_options.max_iter">max_iter</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>max_iter</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;-1</span></font></code>
 in 
<code><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.fixed_opt&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i></code>
.
In addition, Ipopt is run with 
<code><i><font color="black"><span style='white-space: nowrap'>max_iter</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0</span></font></code>
 and the return status
<code><font color="blue">Ipopt::Maximum_Iterations_Exceeded</font></code> is consider normal; i.e.,
does not generate a warning or error message.
Furthermore, the fixed effects optimization will return immediately
(not try to backup and recover) if an error occur during evaluation of
the fixed effects objective, constraints, or their derivatives.
If 
<code><i><font color="black"><span style='white-space: nowrap'>max_iter</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;0</span></font></code>
 in the options,
it may be that 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.fixed_opt&nbsp;!=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i></code>

(Ipopt moves non-equality constraints to the interior of the constraint).
(this is the only difference between <code><font color="blue">-1</font></code> and <code><font color="blue">0</font></code>).

<br>
<br>
<big><a name="fixed_ipopt_options.accept_after_max_steps" id="fixed_ipopt_options.accept_after_max_steps">accept_after_max_steps</a></big>
<br>
The default value for 
<code><i><font color="black"><span style='white-space: nowrap'>accept_after_max_steps</span></font></i></code>
 is <code><font color="blue">-1</font></code>
(no limit).
This is the maximum number of backtracking steps to take before
accepting a line search point; see
<a href="ipopt_trace.htm#ls" target="_top"><span style='white-space: nowrap'>ls</span></a>
 is the ipopt tracing documentation.

<br>
<br>
<big><a name="fixed_ipopt_options.nlp_scaling_method" id="fixed_ipopt_options.nlp_scaling_method">nlp_scaling_method</a></big>
<br>
When optimizing the fixed effects,
the objective and the constraint functions are automatically scaled
by <code><font color="blue">cppad_mixed</font></code>.
It is an error for the user to specify this option in

<code><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i></code>
.

<br>
<br>
<b><big><a name="random_ipopt_options" id="random_ipopt_options">random_ipopt_options</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::string&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_ipopt_options</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the <a href="ipopt_options.htm" target="_top"><span style='white-space: nowrap'>ipopt_options</span></a>
 for optimizing the random effects.

<br>
<br>
<b><big><a name="fixed_lower" id="fixed_lower">fixed_lower</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_lower</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It has size <a href="derived_ctor.htm#n_fixed" target="_top"><span style='white-space: nowrap'>n_fixed</span></a>
 and
specifies the lower limits for the
<a href="cppad_mixed.htm#Notation.Fixed Effects, theta" target="_top"><span style='white-space: nowrap'>fixed&nbsp;effects</span></a>
.
Note that minus infinity is used for no lower limit.

<br>
<br>
<b><big><a name="fixed_upper" id="fixed_upper">fixed_upper</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It has size 
<code><i><font color="black"><span style='white-space: nowrap'>n_fixed</span></font></i></code>
 and specifies the upper limits for the
<a href="cppad_mixed.htm#Notation.Fixed Effects, theta" target="_top"><span style='white-space: nowrap'>fixed&nbsp;effects</span></a>
.
Note that plus infinity is used for no upper limit.

<br>
<br>
<b><big><a name="fix_constraint_lower" id="fix_constraint_lower">fix_constraint_lower</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fix_constraint_lower</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
it has size 
<code><i><font color="black"><span style='white-space: nowrap'>n_fixed</span></font></i></code>
 and specifies the lower limits for the
<a href="fix_constraint.htm" target="_top"><span style='white-space: nowrap'>fixed&nbsp;constraints</span></a>
.
Note that minus infinity is used for no lower limit.

<br>
<br>
<b><big><a name="fix_constraint_upper" id="fix_constraint_upper">fix_constraint_upper</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fix_constraint_upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
it specifies the upper limits for the
<a href="fix_constraint.htm" target="_top"><span style='white-space: nowrap'>fixed&nbsp;constraints</span></a>
.
Note that plus infinity is used for no upper limit.

<br>
<br>
<b><big><a name="fixed_scale" id="fixed_scale">fixed_scale</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_scale</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The fixed effect objective and constraint functions are multiplied by a
scale factor so that their derivatives are near one at 
<code><i><font color="black"><span style='white-space: nowrap'>fixed_scale</span></font></i></code>
.
This makes the Ipopt tolerance be relative to the derivatives at

<code><i><font color="black"><span style='white-space: nowrap'>fixed_scale</span></font></i></code>
.
It must hold for each 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
 that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_scale</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
Partial derivatives with respect to components for which

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
are not included in this scaling.
Note that you can continue an optimization with the same scaling
by setting

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.fixed_opt<br>
</span></font></code>
and the re-running the optimization.
Also note that scaling the fixed effects is not done by <code><font color="blue">cppad_mixed</font></code>
and should be done by the users program when it is useful.

<br>
<br>
<b><big><a name="fixed_in" id="fixed_in">fixed_in</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the initial value for the
<a href="cppad_mixed.htm#Notation.Fixed Effects, theta" target="_top"><span style='white-space: nowrap'>fixed&nbsp;effects</span></a>

vector <small>@(@
\theta
@)@</small> during the optimization process.
It must hold for each 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
 that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
<br>
<b><big><a name="random_lower" id="random_lower">random_lower</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_lower</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must have size equal to
<a href="derived_ctor.htm#n_random" target="_top"><span style='white-space: nowrap'>n_random</span></a>
 and
specifies the lower limits for the optimization of the
<a href="cppad_mixed.htm#Notation.Random Effects, u" target="_top"><span style='white-space: nowrap'>random&nbsp;effects</span></a>

vector <small>@(@
u
@)@</small>.
This may be useful to keep the random effects
out of regions of numerical instability.
On the other hand, the calculation of the
<a href="theory.htm#Derivative of Optimal Random Effects" target="_top"><span style='white-space: nowrap'>derivative&nbsp;of&nbsp;optimal&nbsp;random&nbsp;effects</span></a>

<small>@(@
\hat{u}_\theta ( \theta )
@)@</small> will not be correct when these constraints
are active (and this could have adverse effects on the optimization).
The value minus infinity can be used to specify no lower limit.

<br>
<br>
<b><big><a name="random_upper" id="random_upper">random_upper</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_upper</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must have size equal to
<a href="derived_ctor.htm#n_random" target="_top"><span style='white-space: nowrap'>n_random</span></a>
 and
specifies the upper limits for the optimization of the random effect.
The value plus infinity can be used to specify no lower limit.

<br>
<br>
<b><big><a name="random_in" id="random_in">random_in</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must have size equal to
<a href="derived_ctor.htm#n_random" target="_top"><span style='white-space: nowrap'>n_random</span></a>
 and
specifies the initial value used for the optimization of the
<a href="cppad_mixed.htm#Notation.Random Effects, u" target="_top"><span style='white-space: nowrap'>random&nbsp;effects</span></a>

vector <small>@(@
u
@)@</small>.
It must hold that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_lower</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_upper</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
for each valid index 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
.

<br>
<br>
<b><big><a name="warm_start" id="warm_start">warm_start</a></big></b>
<br>
This argument is optional and has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;warm_start_struct&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>warm_start</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is an error for the user to specify 
<code><i><font color="black"><span style='white-space: nowrap'>warm_start_init_point</span></font></i></code>
 in

<code><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i></code>
.

<br>
<br>
<big><a name="warm_start.No Warm Start" id="warm_start.No Warm Start">No Warm Start</a></big>
<br>
If the size of 
<code><i><font color="black"><span style='white-space: nowrap'>warm_start</span></font></i><font color="blue"><span style='white-space: nowrap'>.x_info</span></font></code>
 is zero,
there is no warm start information.
This is the same as when the argument is not present.
In this case, the ipopt 
<code><i><font color="black"><span style='white-space: nowrap'>warm_start_init_point</span></font></i></code>
 option will be set to
<code><font color="blue">no</font></code>.

<br>
<br>
<big><a name="warm_start.Warm Start" id="warm_start.Warm Start">Warm Start</a></big>
<br>
If the size of 
<code><i><font color="black"><span style='white-space: nowrap'>warm_start</span></font></i><font color="blue"><span style='white-space: nowrap'>.x_info</span></font></code>
 is non-zero,

<code><i><font color="black"><span style='white-space: nowrap'>warm_start</span></font></i></code>
 must is equal the
<a href="fixed_solution.htm#warm_start" target="_top"><span style='white-space: nowrap'>warm_start</span></a>
 field in a
fixed effects solution returned by a previous call to <code><font color="blue">optimized_fixed</font></code>
(where all the other arguments to <code><font color="blue">optimize_fixed</font></code> were the same).
<ol type="1"><li>
The ipopt 
<code><i><font color="black"><span style='white-space: nowrap'>warm_start_init_point</span></font></i></code>
 options will be set to <code><font color="blue">yes</font></code>.
</li><li>

The 
<code><i><font color="black"><span style='white-space: nowrap'>fixed_scale</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>fixed_in</span></font></i></code>
 arguments are not used
during a warm start optimization.
</li><li>

Any derivative test specified in 
<code><i><font color="black"><span style='white-space: nowrap'>fixed_ipopt_options</span></font></i></code>

will not be passed onto Ipopt; i.e.,
no derivative testing is done during a warm start.
</li></ol>


<br>
<br>
<big><a name="warm_start.Example" id="warm_start.Example">Example</a></big>
<br>
see <a href="warm_start.cpp.htm" target="_top"><span style='white-space: nowrap'>warm_start.cpp</span></a>


<br>
<br>
<b><big><a name="solution" id="solution">solution</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::mixed::fixed_solution&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the solution (obtained by optimization) of the
fixed effects vector and its Lagrange multipliers; see
<a href="fixed_solution.htm" target="_top"><span style='white-space: nowrap'>fixed_solution</span></a>
.

<br>
<br>
<b><big><a name="Laplace Approximation" id="Laplace Approximation">Laplace Approximation</a></big></b>
<br>
The <a href="theory.htm" target="_top"><span style='white-space: nowrap'>theory</span></a>
 for the
Laplace approximation optimization only includes the case where
the <a href="ran_likelihood.htm" target="_top"><span style='white-space: nowrap'>random&nbsp;likelihood</span></a>
 is smooth.



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="optimize_fixed.cpp.htm" target="_top"><span style='white-space: nowrap'>optimize_fixed.cpp</span></a>
 contains an example
and test of this procedure.
It returns true, if the test passes, and false otherwise.

<br>
<br>
<b><big><a name="ipopt_fixed" id="ipopt_fixed">ipopt_fixed</a></big></b>
<br>
The  class <code><font color="blue">ipopt_fixed</font></code> is used by <code><font color="blue">optimize_fixed</font></code>
to optimize the fixed effects.
It's specifications are not part of the <a href="cppad_mixed.htm" target="_top"><span style='white-space: nowrap'>cppad_mixed</span></a>
 public interface.


<hr>Input File: src/optimize_fixed.cpp

</body>
</html>
