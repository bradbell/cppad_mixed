<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Initialization After Constructor</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Initialization After Constructor">
<meta name="keywords" id="keywords" content=" initialization after constructor syntax purpose mixed_object fixed_vec random_vec size_map n_fixed n_random quasi_fixed a_nr a_nnz ran_like_fun.size_var fix_like_fun.size_var other fields example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_initialize_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="fix_constraint.cpp.htm" target="_top">Prev</a>
</td><td><a href="optimize_random.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>initialize</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_class_htm.js'></script>
</td>
<td>initialize</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Initialization After Constructor</big></big></b></center>

<br><a href="initialize.htm#Syntax" target="_top">Syntax</a>
<br><a href="initialize.htm#Purpose" target="_top">Purpose</a>
<br><a href="initialize.htm#mixed_object" target="_top">mixed_object</a>
<br><a href="initialize.htm#fixed_vec" target="_top">fixed_vec</a>
<br><a href="initialize.htm#random_vec" target="_top">random_vec</a>
<br><a href="initialize.htm#size_map" target="_top">size_map</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.n_fixed" target="_top">n_fixed</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.n_random" target="_top">n_random</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.quasi_fixed" target="_top">quasi_fixed</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.A_nr" target="_top">A_nr</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.A_nnz" target="_top">A_nnz</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.ran_like_fun.size_var" target="_top">ran_like_fun.size_var</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.fix_like_fun.size_var" target="_top">fix_like_fun.size_var</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="initialize.htm#size_map.Other Fields" target="_top">Other&nbsp;Fields</a>
<br><a href="initialize.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>size_map</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>mixed_object</span></font></i><font color="blue"><span style='white-space: nowrap'>.initialize(</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Some of the <code><font color="blue">cppad_mixed</font></code> initialization requires calling the
derived class version of the
<a href="ran_likelihood.htm" target="_top"><span style='white-space: nowrap'>ran_likelihood</span></a>
 function.
Hence this initialization cannot be done until
after the <a href="derived_ctor.htm" target="_top"><span style='white-space: nowrap'>derived&nbsp;constructor</span></a>
 completes.

<br>
<br>
<b><big><a name="mixed_object" id="mixed_object">mixed_object</a></big></b>
<br>
We use <a href="derived_ctor.htm#mixed_object" target="_top"><span style='white-space: nowrap'>mixed_object</span></a>

to denote an object of a class that is
derived from the <code><font color="blue">cppad_mixed</font></code> base class.

<br>
<br>
<b><big><a name="fixed_vec" id="fixed_vec">fixed_vec</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fixed_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the value of the
<a href="cppad_mixed.htm#Notation.Fixed Effects, theta" target="_top"><span style='white-space: nowrap'>fixed&nbsp;effects</span></a>

vector <small>@(@
\theta
@)@</small> at which certain <code><font color="blue">CppAD::ADFun</font></code>
objects are recorded.

<br>
<br>
<b><big><a name="random_vec" id="random_vec">random_vec</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>random_vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the value of the
<a href="cppad_mixed.htm#Notation.Random Effects, u" target="_top"><span style='white-space: nowrap'>random&nbsp;effects</span></a>

vector <small>@(@
u
@)@</small> at which certain <code><font color="blue">CppAD::ADFun</font></code>
objects are recorded.

<br>
<br>
<b><big><a name="size_map" id="size_map">size_map</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::map&lt;std::string,&nbsp;size_t&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_map</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It represent the size of certain aspects of the problem.

<br>
<br>
<big><a name="size_map.n_fixed" id="size_map.n_fixed">n_fixed</a></big>
<br>
the number of fixed effects.

<br>
<br>
<big><a name="size_map.n_random" id="size_map.n_random">n_random</a></big>
<br>
the number of fixed effects.

<br>
<br>
<big><a name="size_map.quasi_fixed" id="size_map.quasi_fixed">quasi_fixed</a></big>
<br>
If this is one (zero) are a using a quasi-Newton (Newton) method
for optimizing the fixed effects.

<br>
<br>
<big><a name="size_map.A_nr" id="size_map.A_nr">A_nr</a></big>
<br>
is the number of rows in the liner constraint matrix A
(the matrix has 
<code><i><font color="black"><span style='white-space: nowrap'>n_fixed</span></font></i></code>
 columns).

<br>
<br>
<big><a name="size_map.A_nnz" id="size_map.A_nnz">A_nnz</a></big>
<br>
is the number of non-zeros in the liner constraint matrix A.

<br>
<br>
<big><a name="size_map.ran_like_fun.size_var" id="size_map.ran_like_fun.size_var">ran_like_fun.size_var</a></big>
<br>
is the number of variables in the algorithm that maps the
fixed and random effects to the part of the likelihood that depend
on the random effects.

<br>
<br>
<big><a name="size_map.fix_like_fun.size_var" id="size_map.fix_like_fun.size_var">fix_like_fun.size_var</a></big>
<br>
is the number of variables in the algorithm that maps the
fixed effects to the part of the likelihood that does not depend
on the random effects.

<br>
<br>
<big><a name="size_map.Other Fields" id="size_map.Other Fields">Other Fields</a></big>
<br>
Not all the fields in 
<code><i><font color="black"><span style='white-space: nowrap'>size_map</span></font></i></code>
 are specified,
but they can be inspected. For example,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::map&lt;std::string,&nbsp;size_t&gt;::iterator&nbsp;itr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(itr&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_map</span></font></i><font color="blue"><span style='white-space: nowrap'>.begin();&nbsp;itr&nbsp;!=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_map</span></font></i><font color="blue"><span style='white-space: nowrap'>.end();&nbsp;itr++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::cout&nbsp;&lt;&lt;&nbsp;itr-&gt;first&nbsp;&lt;&lt;&nbsp;&quot;&nbsp;=&nbsp;&quot;&nbsp;&lt;&lt;&nbsp;itr-&gt;second&nbsp;&lt;&lt;&nbsp;&quot;\n&quot;;<br>
</span></font></code>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="derived_ctor.cpp.htm" target="_top"><span style='white-space: nowrap'>derived_ctor.cpp</span></a>
 contains an example
of using <code><font color="blue">initialize</font></code>.


<hr>Input File: src/initialize.cpp

</body>
</html>
