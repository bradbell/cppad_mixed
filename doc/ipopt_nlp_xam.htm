<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Ipopt Example: Declare Non-linear Program Problem Class</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Ipopt Example: Declare Non-linear Program Problem Class">
<meta name="keywords" id="keywords" content=" ipopt example: declare non-linear program problem class ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_nlp_xam_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_xam.htm" target="_top">Prev</a>
</td><td><a href="ipopt_xam_ctor.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ipopt_fixed</option>
<option>ipopt_xam</option>
<option>ipopt_nlp_xam</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_fixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_xam_htm.js'></script>
</td>
<td>ipopt_nlp_xam</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Ipopt Example: Declare Non-linear Program Problem Class</big></big></b></center>

<br><pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cmath&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;coin/IpIpoptApplication.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;coin/IpTNLP.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cassert&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <i><font color="#9A1900">// Ipopt types used by this file</font></i>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font><font color="#008080">Number</font>                      Number<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font><font color="#008080">Index</font>                       Index<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font>TNLP<font color="#990000">::</font><font color="#008080">IndexStyleEnum</font>        IndexStyleEnum<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font><font color="#008080">AlgorithmMode</font>               AlgorithmMode<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font><font color="#008080">IpoptData</font>                   IpoptData<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Ipopt<font color="#990000">::</font><font color="#008080">IpoptCalculatedQuantities</font>   IpoptCalculatedQuantities<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// ipopt_nlp_xam</font></i>
     <b><font color="#0000FF">class</font></b> <font color="#008080">ipopt_nlp_xam</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> Ipopt<font color="#990000">::</font>TNLP
     <font color="#FF0000">{</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// factor in the objective function</font></i>
          <b><font color="#0000FF">const</font></b> <font color="#009900">double</font> beta_<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// did check of solution pass</font></i>
          <font color="#009900">bool</font> finalize_solution_ok_<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// final solution</font></i>
          std<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> final_solution_<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// default constructor</font></i>
          <b><font color="#000000">ipopt_nlp_xam</font></b><font color="#990000">(</font><font color="#009900">double</font> beta<font color="#990000">);</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// default destructor</font></i>
          <b><font color="#0000FF">virtual</font></b> <font color="#990000">~</font><b><font color="#000000">ipopt_nlp_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
          <i><font color="#9A1900">//</font></i>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">get_nlp_info</font></b><font color="#990000">(</font>
               Index<font color="#990000">&amp;</font>          n            <font color="#990000">,</font>
               Index<font color="#990000">&amp;</font>          m            <font color="#990000">,</font>
               Index<font color="#990000">&amp;</font>          nnz_jac_g    <font color="#990000">,</font>
               Index<font color="#990000">&amp;</font>          nnz_h_lag    <font color="#990000">,</font>
               IndexStyleEnum<font color="#990000">&amp;</font> index_style
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">get_bounds_info</font></b><font color="#990000">(</font>
                    <font color="#008080">Index</font>       n        <font color="#990000">,</font>
                    Number<font color="#990000">*</font>     x_l      <font color="#990000">,</font>
                    Number<font color="#990000">*</font>     x_u      <font color="#990000">,</font>
                    <font color="#008080">Index</font>       m        <font color="#990000">,</font>
                    Number<font color="#990000">*</font>     g_l      <font color="#990000">,</font>
                    Number<font color="#990000">*</font>     g_u
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">get_starting_point</font></b><font color="#990000">(</font>
               <font color="#008080">Index</font>           n            <font color="#990000">,</font>
               <font color="#009900">bool</font>            init_x       <font color="#990000">,</font>
               Number<font color="#990000">*</font>         x            <font color="#990000">,</font>
               <font color="#009900">bool</font>            init_z       <font color="#990000">,</font>
               Number<font color="#990000">*</font>         z_L          <font color="#990000">,</font>
               Number<font color="#990000">*</font>         z_U          <font color="#990000">,</font>
               <font color="#008080">Index</font>           m            <font color="#990000">,</font>
               <font color="#009900">bool</font>            init_lambda  <font color="#990000">,</font>
               Number<font color="#990000">*</font>         lambda
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">eval_f</font></b><font color="#990000">(</font>
               <font color="#008080">Index</font>           n        <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>   x        <font color="#990000">,</font>
               <font color="#009900">bool</font>            new_x    <font color="#990000">,</font>
               Number<font color="#990000">&amp;</font>         obj_value
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">eval_grad_f</font></b><font color="#990000">(</font>
               <font color="#008080">Index</font>           n        <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>   x        <font color="#990000">,</font>
               <font color="#009900">bool</font>            new_x    <font color="#990000">,</font>
               Number<font color="#990000">*</font>         grad_f
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">eval_g</font></b><font color="#990000">(</font>
               <font color="#008080">Index</font>           n        <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>   x        <font color="#990000">,</font>
               <font color="#009900">bool</font>            new_x    <font color="#990000">,</font>
               <font color="#008080">Index</font>           m        <font color="#990000">,</font>
               Number<font color="#990000">*</font>         g
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">eval_jac_g</font></b><font color="#990000">(</font>
               <font color="#008080">Index</font>           n        <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>   x        <font color="#990000">,</font>
               <font color="#009900">bool</font>            new_x    <font color="#990000">,</font>
               <font color="#008080">Index</font>           m        <font color="#990000">,</font>
               <font color="#008080">Index</font>           nele_jac <font color="#990000">,</font>
               Index<font color="#990000">*</font>          iRow     <font color="#990000">,</font>
               Index<font color="#990000">*</font>          jCol     <font color="#990000">,</font>
               Number<font color="#990000">*</font>         values
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">eval_h</font></b><font color="#990000">(</font>
               <font color="#008080">Index</font>         n              <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font> x              <font color="#990000">,</font>
               <font color="#009900">bool</font>          new_x          <font color="#990000">,</font>
               <font color="#008080">Number</font>        obj_factor     <font color="#990000">,</font>
               <font color="#008080">Index</font>         m              <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font> lambda         <font color="#990000">,</font>
               <font color="#009900">bool</font>          new_lambda     <font color="#990000">,</font>
               <font color="#008080">Index</font>         nele_hess      <font color="#990000">,</font>
               Index<font color="#990000">*</font>        iRow           <font color="#990000">,</font>
               Index<font color="#990000">*</font>        jCol           <font color="#990000">,</font>
               Number<font color="#990000">*</font>       values
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">void</font> <b><font color="#000000">finalize_solution</font></b><font color="#990000">(</font>
               Ipopt<font color="#990000">::</font><font color="#008080">SolverReturn</font>               status    <font color="#990000">,</font>
               <font color="#008080">Index</font>                             n         <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     x         <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     z_L       <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     z_U       <font color="#990000">,</font>
               <font color="#008080">Index</font>                             m         <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     g         <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Number<font color="#990000">*</font>                     lambda    <font color="#990000">,</font>
               <font color="#008080">Number</font>                            obj_value <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Ipopt<font color="#990000">::</font>IpoptData<font color="#990000">*</font>           ip_data   <font color="#990000">,</font>
               Ipopt<font color="#990000">::</font>IpoptCalculatedQuantities<font color="#990000">*</font> ip_cq
          <font color="#990000">);</font>
          <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">intermediate_callback</font></b><font color="#990000">(</font>
               <font color="#008080">AlgorithmMode</font>               mode<font color="#990000">,</font>
               <font color="#008080">Index</font>                       iter<font color="#990000">,</font>
               <font color="#008080">Number</font>                      obj_value<font color="#990000">,</font>
               <font color="#008080">Number</font>                      inf_pr<font color="#990000">,</font>
               <font color="#008080">Number</font>                      inf_du<font color="#990000">,</font>
               <font color="#008080">Number</font>                      mu<font color="#990000">,</font>
               <font color="#008080">Number</font>                      d_norm<font color="#990000">,</font>
               <font color="#008080">Number</font>                      regularization_size<font color="#990000">,</font>
               <font color="#008080">Number</font>                      alpha_du<font color="#990000">,</font>
               <font color="#008080">Number</font>                      alpha_pr<font color="#990000">,</font>
               <font color="#008080">Index</font>                       ls_trials<font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> IpoptData<font color="#990000">*</font>            ip_data<font color="#990000">,</font>
               IpoptCalculatedQuantities<font color="#990000">*</font>  ip_cq
          <font color="#990000">);</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/ipopt_run.cpp

</body>
</html>
