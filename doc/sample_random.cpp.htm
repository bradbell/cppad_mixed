<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Sample From Fixed Effects Posterior: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Sample From Fixed Effects Posterior: Example and Test">
<meta name="keywords" id="keywords" content=" sample from fixed effects posterior: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sample_random.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sample_random.htm" target="_top">Prev</a>
</td><td><a href="information_mat.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>sample_random</option>
<option>sample_random.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_class_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sample_random_htm.js'></script>
</td>
<td>sample_random.cpp</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@



<b>This is cppad_mixed--20220519 documentation:</b> Here is a link to its
<a href="https://cppad-mixed.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Sample From Fixed Effects Posterior: Example and Test</big></big></b></center>

<br><code><font color="blue"><pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/cppad_mixed.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/manage_gsl_rng.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;Eigen/Dense&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>log<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_sparse_rcv<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_vector<font color="#990000">;</font>

     <b><font color="#0000FF">class</font></b> <font color="#008080">mixed_derived</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_mixed <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <b><font color="#0000FF">const</font></b> <font color="#008080">size_t</font>          n_fixed_<font color="#990000">;</font>
          <b><font color="#0000FF">const</font></b> <font color="#008080">size_t</font>          n_random_<font color="#990000">;</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       y_<font color="#990000">;</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// constructor</font></i>
          <b><font color="#000000">mixed_derived</font></b><font color="#990000">(</font>
               <font color="#008080">size_t</font>                 n_fixed       <font color="#990000">,</font>
               <font color="#008080">size_t</font>                 n_random      <font color="#990000">,</font>
               <font color="#009900">bool</font>                   quasi_fixed   <font color="#990000">,</font>
               <font color="#009900">bool</font>                   bool_sparsity <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       y              <font color="#990000">)</font> <font color="#990000">:</font>
               <b><font color="#000000">cppad_mixed</font></b><font color="#990000">(</font>
                    n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity
               <font color="#990000">)</font>                     <font color="#990000">,</font>
               <b><font color="#000000">n_fixed_</font></b><font color="#990000">(</font>n_fixed<font color="#990000">)</font>     <font color="#990000">,</font>
               <b><font color="#000000">n_random_</font></b><font color="#990000">(</font>n_random<font color="#990000">)</font>   <font color="#990000">,</font>
               <b><font color="#000000">y_</font></b><font color="#990000">(</font>y<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#000000">assert</font></b><font color="#990000">(</font> n_fixed <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">);</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font> y_<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_random_ <font color="#990000">);</font>
          <font color="#FF0000">}</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
          <i><font color="#9A1900">// implementation of ran_likelihood</font></i>
          <font color="#008080">a1_vector</font> <b><font color="#000000">ran_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font>         theta  <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font>         u      <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
          <font color="#FF0000">{</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font> theta<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_fixed_ <font color="#990000">);</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font> u<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> y_<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
               <font color="#008080">a1_vector</font> <b><font color="#000000">vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

               <i><font color="#9A1900">// initialize part of log-density that is always smooth</font></i>
               vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>

               <i><font color="#9A1900">// sqrt_2pi = CppAD::sqrt(8.0 * CppAD::atan(1.0) );</font></i>

               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random_<font color="#990000">;</font> i<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <font color="#008080">a1_double</font> mu     <font color="#990000">=</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">+</font> theta<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
                    <font color="#008080">a1_double</font> sigma  <font color="#990000">=</font> theta<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
                    <font color="#008080">a1_double</font> res    <font color="#990000">=</font> <font color="#990000">(</font>y_<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> mu<font color="#990000">)</font> <font color="#990000">/</font> sigma<font color="#990000">;</font>

                    <i><font color="#9A1900">// p(y_i | u, theta)</font></i>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> <b><font color="#000000">log</font></b><font color="#990000">(</font>sigma<font color="#990000">)</font> <font color="#990000">+</font> res <font color="#990000">*</font> res <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">;</font>
                    <i><font color="#9A1900">// following term does not depend on fixed or random effects</font></i>
                    <i><font color="#9A1900">// vec[0] += log(sqrt_2pi);</font></i>

                    <i><font color="#9A1900">// p(u_i | theta)</font></i>
                    <font color="#008080">a1_double</font> sq <font color="#990000">=</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> u<font color="#990000">[</font>i<font color="#990000">];</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">)</font>
                         sq <font color="#990000">=</font> <font color="#990000">(</font>u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">*</font> <font color="#990000">(</font>u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> sq <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">;</font>
                    <i><font color="#9A1900">// following term does not depend on fixed or random effects</font></i>
                    <i><font color="#9A1900">// vec[0] += log(sqrt_2pi);</font></i>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> vec<font color="#990000">;</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">sample_random_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
     <font color="#009900">bool</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> inf <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// initialize gsl random number generator</font></i>
     <font color="#008080">size_t</font> random_seed <font color="#990000">=</font> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">new_gsl_rng</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">size_t</font> n_data   <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_fixed  <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_random <font color="#990000">=</font> n_data<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">d_vector</font> <b><font color="#000000">data</font></b><font color="#990000">(</font>n_data<font color="#990000">),</font> <b><font color="#000000">random_in</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_data<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    data<font color="#990000">[</font>i<font color="#990000">]</font>       <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
          random_in<font color="#990000">[</font>i<font color="#990000">]</font>    <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">fixed_vec</font></b><font color="#990000">(</font>n_fixed<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> i<font color="#990000">++)</font>
          fixed_vec<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>

     <i><font color="#9A1900">// object that is derived from cppad_mixed</font></i>
     <font color="#009900">bool</font> quasi_fixed   <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">bool</font> bool_sparsity <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#008080">mixed_derived</font> <b><font color="#000000">mixed_object</font></b><font color="#990000">(</font>
          n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> data
     <font color="#990000">);</font>
     mixed_object<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>fixed_vec<font color="#990000">,</font> random_in<font color="#990000">);</font>

     std<font color="#990000">::</font><font color="#008080">string</font> random_ipopt_options <font color="#990000">=</font>
          <font color="#FF0000">"Integer print_level     0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  sb              yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test second-order</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"Numeric tol             1e-8</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
     <font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">random_lower</font></b><font color="#990000">(</font>n_random<font color="#990000">),</font> <b><font color="#000000">random_upper</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    random_lower<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font>inf<font color="#990000">;</font>
          random_upper<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">+</font>inf<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute the optimal random effects</font></i>
     <font color="#008080">d_vector</font> random_opt <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">optimize_random</font></b><font color="#990000">(</font>
          random_ipopt_options<font color="#990000">,</font> fixed_vec<font color="#990000">,</font> random_lower<font color="#990000">,</font> random_upper<font color="#990000">,</font> random_in
     <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// sample from the posterior for random effects given fixed effects</font></i>
     <i><font color="#9A1900">// and compute the  sample covariance matrix</font></i>
     <font color="#008080">size_t</font> n_sample <font color="#990000">=</font> <font color="#993399">10000</font><font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">sample</font></b><font color="#990000">(</font>n_sample <font color="#990000">*</font> n_random<font color="#990000">);</font>
     std<font color="#990000">::</font><font color="#008080">string</font> error_msg <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">sample_random</font></b><font color="#990000">(</font>
          sample<font color="#990000">,</font>
          random_ipopt_options<font color="#990000">,</font>
          fixed_vec<font color="#990000">,</font>
          random_lower<font color="#990000">,</font>
          random_upper<font color="#990000">,</font>
          random_in
     <font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> error_msg <font color="#990000">==</font> <font color="#FF0000">""</font><font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">sample_cov</font></b><font color="#990000">(</font>n_random <font color="#990000">*</font> n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
               sample_cov<font color="#990000">[</font>i <font color="#990000">*</font> n_random <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i_sample <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i_sample <font color="#990000">&lt;</font> n_sample<font color="#990000">;</font> i_sample<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <font color="#008080">d_vector</font> <b><font color="#000000">diff</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
               diff<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> sample<font color="#990000">[</font>i_sample <font color="#990000">*</font> n_random <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">-</font> random_opt<font color="#990000">[</font>j<font color="#990000">];</font>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
                    sample_cov<font color="#990000">[</font>i <font color="#990000">*</font> n_random <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">+=</font>
                         diff<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> diff<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">/</font> <font color="#009900">double</font><font color="#990000">(</font>n_sample<font color="#990000">);</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// For i &gt; 1, the terms involving u[i] is</font></i>
     <i><font color="#9A1900">//     0.5 * ( (y[i] - theta[0] - u[i])^2 / theta[1]^2 + u[i]^2  )</font></i>
     <i><font color="#9A1900">// The terms involving u[0] and u[1] are</font></i>
     <i><font color="#9A1900">//     0.5 * ( (y[1] - theta[0] - u[1])^2 / theta[1]^2 + u[1]^2  )</font></i>
     <i><font color="#9A1900">//   + 0.5 * ( (y[0] - theta[0] - u[0])^2 / theta[1]^2 + (u[0]+u[1])^2  )</font></i>
     <font color="#009900">double</font> diag <font color="#990000">=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> <font color="#990000">(</font>fixed_vec<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> fixed_vec<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">+</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Eigen<font color="#990000">::</font><font color="#008080">Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt;</font> double_mat<font color="#990000">;</font>
     <font color="#008080">double_mat</font> info_mat <font color="#990000">=</font> double_mat<font color="#990000">::</font><b><font color="#000000">Zero</font></b><font color="#990000">(</font>n_random<font color="#990000">,</font> n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
          <b><font color="#000000">info_mat</font></b><font color="#990000">(</font>i<font color="#990000">,</font> i<font color="#990000">)</font> <font color="#990000">=</font> diag<font color="#990000">;</font>
     <b><font color="#000000">info_mat</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">)</font>  <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <b><font color="#000000">info_mat</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">)</font>  <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <b><font color="#000000">info_mat</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">+=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">double_mat</font> cov_mat <font color="#990000">=</font> info_mat<font color="#990000">.</font><b><font color="#000000">inverse</font></b><font color="#990000">();</font>
     <font color="#009900">double</font> max_err <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <font color="#009900">double</font> value <font color="#990000">=</font> sample_cov<font color="#990000">[</font>i <font color="#990000">*</font> n_random <font color="#990000">+</font> j<font color="#990000">];</font>
               <font color="#009900">double</font> check <font color="#990000">=</font> <b><font color="#000000">cov_mat</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">);</font>
               max_err <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>max_err<font color="#990000">,</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>value <font color="#990000">-</font> check<font color="#990000">)</font> <font color="#990000">/</font> diag<font color="#990000">);</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
          std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"</font><font color="#CC33CC">\n</font><font color="#FF0000">random_seed = "</font> <font color="#990000">&lt;&lt;</font> random_seed <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">free_gsl_rng</font></b><font color="#990000">();</font>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/user/sample_random.cpp

</body>
</html>
