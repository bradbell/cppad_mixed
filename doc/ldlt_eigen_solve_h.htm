<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Solve Linear Equations Using Stored Factor</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Solve Linear Equations Using Stored Factor">
<meta name="keywords" id="keywords" content=" solve linear equations using stored factor syntax prototype private purpose ldlt_obj row val_in val_out example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ldlt_eigen_solve_h_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ldlt_eigen_logdet.htm" target="_top">Prev</a>
</td><td><a href="ldlt_eigen_sim_cov.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ldlt_eigen</option>
<option>ldlt_eigen_solve_H</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ldlt_eigen_htm.js'></script>
</td>
<td>ldlt_eigen_solve_H</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Solve Linear Equations Using Stored Factor</big></big></b></center>

<br><a href="ldlt_eigen_solve_h.htm#Syntax" target="_top">Syntax</a>
<br><a href="ldlt_eigen_solve_h.htm#Prototype" target="_top">Prototype</a>
<br><a href="ldlt_eigen_solve_h.htm#Private" target="_top">Private</a>
<br><a href="ldlt_eigen_solve_h.htm#Purpose" target="_top">Purpose</a>
<br><a href="ldlt_eigen_solve_h.htm#ldlt_obj" target="_top">ldlt_obj</a>
<br><a href="ldlt_eigen_solve_h.htm#row" target="_top">row</a>
<br><a href="ldlt_eigen_solve_h.htm#val_in" target="_top">val_in</a>
<br><a href="ldlt_eigen_solve_h.htm#val_out" target="_top">val_out</a>
<br><a href="ldlt_eigen_solve_h.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"></font><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i><font color="blue"><span style='white-space: nowrap'>.solve_H(</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>val_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>val_out</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Double</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> ldlt_eigen<font color="#990000">&lt;</font>Double<font color="#990000">&gt;::</font><b><font color="#000000">solve_H</font></b><font color="#990000">(</font>
     <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>              row     <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Double<font color="#990000">&gt;&amp;</font> val_in  <font color="#990000">,</font>
     CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Double<font color="#990000">&gt;&amp;</font>       val_out <font color="#990000">)</font> <b><font color="#0000FF">const</font></b></tt></pre>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
The <a href="ldlt_eigen.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen</span></a>
 class is an
<a href="ldlt_eigen.htm#Private" target="_top"><span style='white-space: nowrap'>implementation&nbsp;detail</span></a>
 and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This function solves the linear equation
<small>@(@
H x = b
@)@</small> where <small>@(@
H
@)@</small> is the positive definite matrix
corresponding to the previous <a href="ldlt_eigen_update.htm" target="_top"><span style='white-space: nowrap'>update</span></a>
,
<small>@(@
b
@)@</small> is a known column vector,
and <small>@(@
x
@)@</small> is unknown.

<br>
<br>
<b><big><a name="ldlt_obj" id="ldlt_obj">ldlt_obj</a></big></b>
<br>
This object has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::ldlt_eigen&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Double</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
In addition, it must have a previous call to
<a href="ldlt_eigen_update.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen_update</span></a>
.

<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
This argument
contains all of the rows of column vector <small>@(@
b
@)@</small> that are
non-zero and the rows of the column vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

that are desired.
These values are in strictly increasing order; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]<br>
</span></font></code>
It follows that 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
 is less than or equal
<a href="ldlt_eigen_ctor.htm#n_row_" target="_top"><span style='white-space: nowrap'>n_row_</span></a>
.

<br>
<br>
<b><big><a name="val_in" id="val_in">val_in</a></big></b>
<br>
This argument has the same size as 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
.
It specifies the values in the column vector <small>@(@
b
@)@</small>
for each of the corresponding rows; i.e.,
for 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()-1</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>val_in</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
.

<br>
<br>
<b><big><a name="val_out" id="val_out">val_out</a></big></b>
<br>
This argument has the same size as 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
.
On input, the value of its elements do not matter.
Upon return, it contains the values in the column vector <small>@(@
b
@)@</small>
for each of the corresponding rows; i.e.,
for 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()-1</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>val_out</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="ldlt_eigen.cpp.htm#solve_H" target="_top"><span style='white-space: nowrap'>ldlt_eigen.cpp</span></a>
 contains an
example and test that uses this function.


<hr>Input File: src/eigen/ldlt_eigen.cpp

</body>
</html>
