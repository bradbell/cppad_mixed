<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Set, Get, And Free A GSL Random Number Generator</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Set, Get, And Free A GSL Random Number Generator">
<meta name="keywords" id="keywords" content=" set get free gsl random number generator syntax purpose new_gsl_rng s_in s_out get_gsl_rng rng free_gsl_rng example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_manage_gsl_rng_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="typedef.htm" target="_top">Prev</a>
</td><td><a href="manage_gsl_rng.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>manage_gsl_rng</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_manage_gsl_rng_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Set, Get, And Free A GSL Random Number Generator</big></big></b></center>

<br><a href="manage_gsl_rng.htm#Syntax" target="_top">Syntax</a>
<br><a href="manage_gsl_rng.htm#Purpose" target="_top">Purpose</a>
<br><a href="manage_gsl_rng.htm#new_gsl_rng" target="_top">new_gsl_rng</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="manage_gsl_rng.htm#new_gsl_rng.s_in" target="_top">s_in</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="manage_gsl_rng.htm#new_gsl_rng.s_out" target="_top">s_out</a>
<br><a href="manage_gsl_rng.htm#get_gsl_rng" target="_top">get_gsl_rng</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="manage_gsl_rng.htm#get_gsl_rng.rng" target="_top">rng</a>
<br><a href="manage_gsl_rng.htm#free_gsl_rng" target="_top">free_gsl_rng</a>
<br><a href="manage_gsl_rng.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/mixed/manage_gsl_rng.hpp&gt;<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>s_out</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;CppAD::mixed::new_gsl_rng(</span></font><i><font color="black"><span style='white-space: nowrap'>s_in</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>rng</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;CppAD::mixed::get_gsl_rng()<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>CppAD::mixed::free_gsl_rng()<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Create and use a GSL random number generator.

<br>
<br>
<b><big><a name="new_gsl_rng" id="new_gsl_rng">new_gsl_rng</a></big></b>
<br>
This routine creates a new GSL random number generator.
If a previous random number generator was created, it must
be freed using <code><font color="blue">free_gsl_rng</font></code> before <code><font color="blue">new_gsl_rng</font></code>
can be called again.

<br>
<br>
<big><a name="new_gsl_rng.s_in" id="new_gsl_rng.s_in">s_in</a></big>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>s_in</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;!=&nbsp;0</span></font></code>
,
it is used as a seed for the random number generator.
Otherwise the actual seed is the number of seconds returned by
<code><font color="blue">std::time</font></code> plus the number of previous calls to <code><font color="blue">set_gsl_rng</font></code>.
(Adding the number of calls prevents the same
seed from being used by calls that are close together in time.)

<br>
<br>
<big><a name="new_gsl_rng.s_out" id="new_gsl_rng.s_out">s_out</a></big>
<br>
This return value prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the actual seed that was used to initialize the random number generator.

<br>
<br>
<b><big><a name="get_gsl_rng" id="get_gsl_rng">get_gsl_rng</a></big></b>
<br>
If we are between a call to
<code><font color="blue">new_gsl_rng</font></code> and <code><font color="blue">free_gsl_rng</font></code>,
this routine retrieves a pointer to the current
GSL random number generator.
Otherwise it returns the null pointer.

<br>
<br>
<big><a name="get_gsl_rng.rng" id="get_gsl_rng.rng">rng</a></big>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>rng</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gsl_rng*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>rng</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="free_gsl_rng" id="free_gsl_rng">free_gsl_rng</a></big></b>
<br>
Once you are done with a generator created by <code><font color="blue">new_gsl_rng</font></code>,
you should free the corresponding memory using

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gsl_rng_free()<br>
</span></font></code>
.



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="manage_gsl_rng.cpp.htm" target="_top"><span style='white-space: nowrap'>manage_gsl_rng.cpp</span></a>
 contains an example and test of
<code><font color="blue">manage_gsl_rng</font></code>.  It returns <code><font color="blue">true</font></code>, if the test passes,
and <code><font color="blue">false</font></code> otherwise.


<hr>Input File: src/manage_gsl_rng.cpp

</body>
</html>
