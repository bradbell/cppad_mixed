<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
>
</script>
<head>
<title>newton_step: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="newton_step: Example and Test">
<meta name="keywords" id="keywords" content=" newton_step: example test private ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_newton_step.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="newton_step.htm" target="_top">Prev</a>
</td><td><a href="newton_step_algo_ctor.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>newton_step</option>
<option>newton_step.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_17</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>newton_step</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_ad_cholesky</option>
<option>sparse_print</option>
<option>sparsity_print</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>newton_step-&gt;</option>
<option>newton_step.cpp</option>
<option>newton_step_algo_ctor</option>
<option>newton_step_algo</option>
<option>newton_step_ctor</option>
<option>newton_step_initialize</option>
<option>newton_step_size_var</option>
<option>newton_step_eval</option>
</select>
</td>
<td>newton_step.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Private</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>newton_step: Example and Test</big></big></b></center>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This example is not part of the
<a href="public.htm" target="_top"><span style='white-space: nowrap'>cppad_mixed&nbsp;public&nbsp;API</span></a>
.

<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/newton_step.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">newton_step_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
     <font color="#009900">bool</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">100</font><font color="#990000">.</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;double&gt;</font>    a1_double<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;a1_double&gt;</font> a2_double<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute a1_ad_fun --------------------------------------------------</font></i>
     <font color="#008080">size_t</font> n_fixed  <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_random <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_both   <font color="#990000">=</font> n_fixed <font color="#990000">+</font> n_random<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">vector&lt;a2_double&gt;</font> <b><font color="#000000">a2_theta_u</font></b><font color="#990000">(</font>n_both<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_both<font color="#990000">;</font> j<font color="#990000">++)</font>
          a2_theta_u<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a2_theta_u<font color="#990000">);</font>
     <font color="#008080">vector&lt;a2_double&gt;</font> <b><font color="#000000">a2_f</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
     a2_f<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_both<font color="#990000">;</font> j<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// Hessian is diagonal matrix with 2 on diagonal</font></i>
          <font color="#008080">a2_double</font> term <font color="#990000">=</font> a2_theta_u<font color="#990000">[</font>j<font color="#990000">];</font>
          a2_f<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>       <font color="#990000">+=</font> term <font color="#990000">*</font> term<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a1_double&gt;</font> <b><font color="#000000">a1_adfun</font></b><font color="#990000">(</font>a2_theta_u<font color="#990000">,</font> a2_f<font color="#990000">);</font>
     <i><font color="#9A1900">/// compute has_ran and a1_hes_ran</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Only requesting Hessian w.r.t. random effects so the pattern</font></i>
     <i><font color="#9A1900">// w.r.t to fixed effects does not matter.</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_rc</font> <b><font color="#000000">pattern</font></b><font color="#990000">(</font>n_both<font color="#990000">,</font> n_both<font color="#990000">,</font> n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> k<font color="#990000">++)</font>
          pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> n_fixed <font color="#990000">+</font> k<font color="#990000">,</font> n_fixed <font color="#990000">+</font> k<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// structure that holds result of calculation</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_rcv</font>    <b><font color="#000000">hes_ran</font></b><font color="#990000">(</font> pattern <font color="#990000">);</font>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">a1_sparse_rcv</font> <b><font color="#000000">a1_hes_ran</font></b><font color="#990000">(</font> pattern <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute hes_ran_work</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">sparse_hes_work</font> hes_ran_work<font color="#990000">;</font>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">a1_vector</font> <b><font color="#000000">a1_w</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">a1_both</font></b><font color="#990000">(</font>n_both<font color="#990000">);</font>
     a1_w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_both<font color="#990000">;</font> j<font color="#990000">++)</font>
          a1_both<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     std<font color="#990000">::</font><font color="#008080">string</font> coloring <font color="#990000">=</font> <font color="#FF0000">"cppad.symmetric"</font><font color="#990000">;</font>
     a1_adfun<font color="#990000">.</font><b><font color="#000000">sparse_hes</font></b><font color="#990000">(</font>
          a1_both<font color="#990000">,</font>
          a1_w<font color="#990000">,</font>
          a1_hes_ran<font color="#990000">,</font>
          pattern<font color="#990000">,</font>
          coloring<font color="#990000">,</font>
          hes_ran_work
     <font color="#990000">);</font>
     <i><font color="#9A1900">// create newton_checkpoint ---------------------------------------------</font></i>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">theta</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">u</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> j<font color="#990000">++)</font>
          theta<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
          u<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">newton_step</font> newton_checkpoint<font color="#990000">;</font>
     newton_checkpoint<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>a1_adfun<font color="#990000">,</font> hes_ran<font color="#990000">,</font> hes_ran_work<font color="#990000">,</font> theta<font color="#990000">,</font> u<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// use and test newton_checkpoint ---------------------------------------</font></i>
     <font color="#008080">vector&lt;a1_double&gt;</font> <b><font color="#000000">a1_theta_u_v</font></b><font color="#990000">(</font>n_fixed <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
          a1_theta_u_v<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">);</font>
     <font color="#008080">vector&lt;a1_double&gt;</font> <b><font color="#000000">a1_logdet_step</font></b><font color="#990000">(</font><font color="#993399">1</font> <font color="#990000">+</font> n_random<font color="#990000">);</font>
     newton_checkpoint<font color="#990000">.</font><b><font color="#000000">eval</font></b><font color="#990000">(</font>a1_theta_u_v<font color="#990000">,</font> a1_logdet_step<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check log of determinant</font></i>
     <font color="#009900">double</font> logdet <font color="#990000">=</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font> a1_logdet_step<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
     <font color="#009900">double</font> check  <font color="#990000">=</font> <b><font color="#000000">log</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">)</font> <font color="#990000">*</font> n_random<font color="#990000">;</font>
     ok           <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>logdet<font color="#990000">,</font> check<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check the Newton step</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <font color="#009900">double</font> step  <font color="#990000">=</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font> a1_logdet_step<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">);</font>
          <font color="#009900">double</font> vj    <font color="#990000">=</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font> a1_theta_u_v<font color="#990000">[</font>n_fixed <font color="#990000">+</font> n_random <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">);</font>
          <font color="#009900">double</font> check <font color="#990000">=</font> vj <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">;</font>
          ok          <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>step<font color="#990000">,</font> check<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
     <font color="#FF0000">}</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/private/newton_step.cpp

</body>
</html>
