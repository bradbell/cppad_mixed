<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>order2random: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="order2random: Example and Test">
<meta name="keywords" id="keywords" content=" order2random: example test private ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_order2random.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="order2random.htm" target="_top">Prev</a>
</td><td><a href="undetermined.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>order2random</option>
<option>order2random.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_18</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ipopt_random</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>order2random</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_eigen2rcv</option>
<option>sparse_rcv2eigen</option>
<option>sparse_print</option>
<option>sparsity_print</option>
<option>sparse_ad_cholesky</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>order2random-&gt;</option>
<option>order2random.cpp</option>
</select>
</td>
<td>order2random.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Private</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>order2random: Example and Test</big></big></b></center>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This example is not part of the
<a href="public.htm" target="_top"><span style='white-space: nowrap'>cppad_mixed&nbsp;public&nbsp;API</span></a>
.

<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/cppad_mixed.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/order2random.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/ran_like_hes.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>log<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_sparse_rcv<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a1_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a1_vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a2_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a2_vector<font color="#990000">;</font>

     <b><font color="#0000FF">class</font></b> <font color="#008080">mixed_derived</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_mixed <font color="#FF0000">{</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// constructor</font></i>
          <b><font color="#000000">mixed_derived</font></b><font color="#990000">(</font>
               <font color="#008080">size_t</font>                               n_fixed       <font color="#990000">,</font>
               <font color="#008080">size_t</font>                               n_random      <font color="#990000">,</font>
               <font color="#009900">bool</font>                                 quasi_fixed   <font color="#990000">,</font>
               <font color="#009900">bool</font>                                 bool_sparsity <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_sparse_rcv<font color="#990000">&amp;</font>    A_rcv         <font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#000000">cppad_mixed</font></b><font color="#990000">(</font>
               n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv
          <font color="#990000">)</font>
          <font color="#FF0000">{</font> <font color="#FF0000">}</font>
          <i><font color="#9A1900">// implementation of ran_likelihood</font></i>
          <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
          <font color="#008080">Vector</font> <b><font color="#000000">template_ran_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> theta  <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> u      <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">typedef</font></b> <b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">::</font><font color="#008080">value_type</font> scalar<font color="#990000">;</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font> theta<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> u<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>

               <font color="#008080">Vector</font> <b><font color="#000000">vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

               <i><font color="#9A1900">// initialize part of log-density that is always smooth</font></i>
               vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">scalar</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>

               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> theta<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> j<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <font color="#008080">scalar</font> res   <font color="#990000">=</font> <b><font color="#000000">exp</font></b><font color="#990000">(</font>u<font color="#990000">[</font>j<font color="#990000">])</font> <font color="#990000">-</font> theta<font color="#990000">[</font>j<font color="#990000">];</font>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>      <font color="#990000">+=</font> res <font color="#990000">*</font> res<font color="#990000">;</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> vec<font color="#990000">;</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// a3_vector version of ran_likelihood</font></i>
          <b><font color="#0000FF">virtual</font></b> <font color="#008080">a3_vector</font> <b><font color="#000000">ran_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> a3_vector<font color="#990000">&amp;</font> fixed_vec<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> a3_vector<font color="#990000">&amp;</font> random_vec
          <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">return</font></b> <b><font color="#000000">template_ran_likelihood</font></b><font color="#990000">(</font> fixed_vec<font color="#990000">,</font> random_vec <font color="#990000">);</font> <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">order2random_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
     <font color="#009900">bool</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">100</font><font color="#990000">.</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;double&gt;</font>    a1_double<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;a1_double&gt;</font> a2_double<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;a2_double&gt;</font> a3_double<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// n_fixed</font></i>
     <font color="#008080">size_t</font> n_fixed     <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// n_random</font></i>
     <font color="#008080">size_t</font> n_random    <font color="#990000">=</font> n_fixed<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// n_both</font></i>
     <font color="#008080">size_t</font> n_both      <font color="#990000">=</font> n_fixed <font color="#990000">+</font> n_random<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// mixed_object (no information)</font></i>
     <font color="#009900">bool</font> quasi_fixed   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     <font color="#009900">bool</font> bool_sparsity <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">d_sparse_rcv</font> A_rcv<font color="#990000">;</font> <i><font color="#9A1900">// empty matrix</font></i>
     <font color="#008080">mixed_derived</font> <b><font color="#000000">mixed_object</font></b><font color="#990000">(</font>
          n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv
     <font color="#990000">);</font>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">fixed_vec</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">random_vec</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
     <font color="#FF0000">{</font>    fixed_vec<font color="#990000">[</font>j<font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          random_vec<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     mixed_object<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>fixed_vec<font color="#990000">,</font> random_vec<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// a2fun = f(theta, u)</font></i>
     <font color="#008080">vector&lt;a3_double&gt;</font> <b><font color="#000000">a3_theta_u</font></b><font color="#990000">(</font>n_both<font color="#990000">),</font> <b><font color="#000000">a3_theta</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">a3_u</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_both<font color="#990000">;</font> j<font color="#990000">++)</font>
          a3_theta_u<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a3_theta_u<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
     <font color="#FF0000">{</font>    a3_theta<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> a3_theta_u<font color="#990000">[</font>j<font color="#990000">];</font>
          a3_u<font color="#990000">[</font>j<font color="#990000">]</font>     <font color="#990000">=</font> a3_theta_u<font color="#990000">[</font>j <font color="#990000">+</font> n_fixed<font color="#990000">];</font>
     <font color="#FF0000">}</font>
     <font color="#008080">vector&lt;a3_double&gt;</font> a3_f <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">ran_likelihood</font></b><font color="#990000">(</font>a3_theta<font color="#990000">,</font> a3_u<font color="#990000">);</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a2_double&gt;</font> <b><font color="#000000">a2fun</font></b><font color="#990000">(</font>a3_theta_u<font color="#990000">,</font> a3_f<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// jac_a1fun = f_u (theta, u)</font></i>
     <font color="#008080">vector&lt;a2_double&gt;</font> <b><font color="#000000">a2_theta_u</font></b><font color="#990000">(</font>n_both<font color="#990000">),</font> <b><font color="#000000">a2_fu</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_both<font color="#990000">;</font> j<font color="#990000">++)</font>
          a2_theta_u<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a2_theta_u<font color="#990000">);</font>
     <font color="#008080">vector&lt;a2_double&gt;</font> jac_all <font color="#990000">=</font> a2fun<font color="#990000">.</font><b><font color="#000000">Jacobian</font></b><font color="#990000">(</font>a2_theta_u<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
          a2_fu<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> jac_all<font color="#990000">[</font>j <font color="#990000">+</font> n_fixed<font color="#990000">];</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a1_double&gt;</font> <b><font color="#000000">jac_a1fun</font></b><font color="#990000">(</font>a2_theta_u<font color="#990000">,</font> a2_fu<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// ran_hes_uu_rc = sparsity pattern for f_{uu} (theta , u)</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_rc</font> <b><font color="#000000">ran_hes_uu_rc</font></b><font color="#990000">(</font>n_random<font color="#990000">,</font> n_random<font color="#990000">,</font> n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> k<font color="#990000">++)</font>
          ran_hes_uu_rc<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> k<font color="#990000">,</font> k<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// ran_hes_uu_rcv = hessian f_{uu} (theta, u);</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">a1_sparse_rcv</font> <b><font color="#000000">ran_hes_uu_rcv</font></b><font color="#990000">(</font> ran_hes_uu_rc <font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
          ran_hes_uu_rcv<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> <b><font color="#000000">a1_double</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">)</font> <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// a1_ldlt_ran_hes</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">ldlt_eigen&lt;a1_double&gt;</font> <b><font color="#000000">a1_ldlt_ran_hes</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     a1_ldlt_ran_hes<font color="#990000">.</font><b><font color="#000000">init</font></b><font color="#990000">(</font> ran_hes_uu_rcv<font color="#990000">.</font><b><font color="#000000">pat</font></b><font color="#990000">()</font> <font color="#990000">);</font>
     a1_ldlt_ran_hes<font color="#990000">.</font><b><font color="#000000">update</font></b><font color="#990000">(</font> ran_hes_uu_rcv <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// record W(beta, theta, u)</font></i>
     <font color="#008080">vector&lt;a1_double&gt;</font> <b><font color="#000000">a1_beta</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">a1_theta_u</font></b><font color="#990000">(</font>n_both<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> j<font color="#990000">++)</font>
          a1_beta<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_both<font color="#990000">;</font> j<font color="#990000">++)</font>
          a1_theta_u<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
     <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     <font color="#009900">bool</font>   record_compare <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a1_beta<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">,</font> a1_theta_u<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// ran_hes_uu_rcv = f_uu(theta, u)</font></i>
     ran_hes_uu_rcv <font color="#990000">=</font> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">ran_like_hes</font></b><font color="#990000">(</font>
          n_fixed<font color="#990000">,</font>
          n_random<font color="#990000">,</font>
          jac_a1fun<font color="#990000">,</font>
          a1_ldlt_ran_hes<font color="#990000">.</font><b><font color="#000000">pattern</font></b><font color="#990000">(),</font>
          a1_theta_u
     <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// a1_ldlt_ran_hes_.update</font></i>
     a1_ldlt_ran_hes<font color="#990000">.</font><b><font color="#000000">update</font></b><font color="#990000">(</font> ran_hes_uu_rcv <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">vector&lt;a1_double&gt;</font> W <font color="#990000">=</font> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">order2random</font></b><font color="#990000">(</font>
          n_fixed<font color="#990000">,</font>
          n_random<font color="#990000">,</font>
          jac_a1fun<font color="#990000">,</font>
          a1_ldlt_ran_hes<font color="#990000">,</font>
          a1_beta<font color="#990000">,</font>
          a1_theta_u
     <font color="#990000">);</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">Wfun</font></b><font color="#990000">(</font>a1_beta<font color="#990000">,</font> W<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// beta, theta_u</font></i>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">beta</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">theta_u</font></b><font color="#990000">(</font>n_both<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// theta[j]</font></i>
          <font color="#009900">double</font> theta_j <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">+</font><font color="#993399">2</font><font color="#990000">);</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// corresponding optimal u[j]</font></i>
          <font color="#009900">double</font> u_j     <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">log</font></b><font color="#990000">(</font>theta_j<font color="#990000">);</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// theta</font></i>
          theta_u<font color="#990000">[</font>j<font color="#990000">]</font>  <font color="#990000">=</font> theta_j<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// beta</font></i>
          beta<font color="#990000">[</font>j<font color="#990000">]</font>     <font color="#990000">=</font> theta_j<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// uhat</font></i>
          theta_u<font color="#990000">[</font>j <font color="#990000">+</font> n_fixed<font color="#990000">]</font> <font color="#990000">=</font> u_j<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// set dynamic parameters</font></i>
     Wfun<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>theta_u<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// for each component of W</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> k<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <i><font color="#9A1900">// compute the Hessian of k-th component of W w.r.t beta</font></i>
          <font color="#008080">vector&lt;double&gt;</font> H <font color="#990000">=</font> Wfun<font color="#990000">.</font><b><font color="#000000">Hessian</font></b><font color="#990000">(</font>beta<font color="#990000">,</font> k<font color="#990000">);</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// Check Hessian w.r.t. beta is equal Hessian of optimal u w.r.t theta</font></i>
          <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> i<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> j<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <font color="#009900">double</font> H_ij <font color="#990000">=</font> H<font color="#990000">[</font> i <font color="#990000">*</font> n_fixed <font color="#990000">+</font> j <font color="#990000">];</font>
                    <font color="#009900">double</font> check <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">==</font> j <font color="#990000">&amp;&amp;</font> i <font color="#990000">==</font> k <font color="#990000">)</font>
                    <font color="#FF0000">{</font>    <font color="#009900">double</font> theta_j <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">+</font><font color="#993399">2</font><font color="#990000">);</font>
                         check <font color="#990000">=</font>  <font color="#990000">-</font> <font color="#993399">1.0</font> <font color="#990000">/</font> <font color="#990000">(</font>theta_j <font color="#990000">*</font> theta_j<font color="#990000">);</font>
                         <i><font color="#9A1900">// std::cout &lt;&lt; "H_ij = " &lt;&lt; H_ij &lt;&lt; " , ";</font></i>
                         <i><font color="#9A1900">// std::cout &lt;&lt; "check = " &lt;&lt; check &lt;&lt; "\n";</font></i>
                    <font color="#FF0000">}</font>
                    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>H_ij<font color="#990000">,</font> check<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
               <font color="#FF0000">}</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/private/order2random.cpp

</body>
</html>
