<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Using Sparse AD Cholesky Factor L</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Using Sparse AD Cholesky Factor L">
<meta name="keywords" id="keywords" content=" using sparse ad cholesky factor l syntax public / private ad_alow ad_l example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_ad_cholesky_eval_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_ad_cholesky_p.htm" target="_top">Prev</a>
</td><td><a href="set_jac_sparsity.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>sparse_ad_cholesky</option>
<option>sparse_ad_cholesky_eval</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_ad_cholesky_htm.js'></script>
</td>
<td>sparse_ad_cholesky_eval</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Using Sparse AD Cholesky Factor L</big></big></b></center>

<br><a href="sparse_ad_cholesky_eval.htm#Syntax" target="_top">Syntax</a>
<br><a href="sparse_ad_cholesky_eval.htm#Public / Private" target="_top">Public&nbsp;/&nbsp;Private</a>
<br><a href="sparse_ad_cholesky_eval.htm#ad_Alow" target="_top">ad_Alow</a>
<br><a href="sparse_ad_cholesky_eval.htm#ad_L" target="_top">ad_L</a>
<br><a href="sparse_ad_cholesky_eval.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>cholesky</span></font></i><font color="blue"><span style='white-space: nowrap'>.eval(</span></font><i><font color="black"><span style='white-space: nowrap'>ad_Alow</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad_L</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Public / Private" id="Public / Private">Public / Private</a></big></b>
<br>
This is a public member function of the class <code><font color="blue">sparse_ad_cholesky</font></code>.
On the other hand, this class,
and all of its members, are implementation details and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="ad_Alow" id="ad_Alow">ad_Alow</a></big></b>
<br>
This matrix has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;Eigen::SparseMatrix&lt;&nbsp;CppAD::AD&lt;double&gt;,&nbsp;Eigen::ColMajor&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad_Alow</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the lower triangle of a positive definite matrix
<a href="sparse_ad_cholesky.htm#Notation.A" target="_top"><span style='white-space: nowrap'>A</span></a>
.
It must have the same sparsity pattern as
<a href="sparse_ad_cholesky_initialize.htm#ad_Alow" target="_top"><span style='white-space: nowrap'>ad_Alow</span></a>
 in the 
<code><i><font color="black"><span style='white-space: nowrap'>cholesky</span></font></i></code>

initialization.

<br>
<br>
<b><big><a name="ad_L" id="ad_L">ad_L</a></big></b>
<br>
This matrix has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eigen::SparseMatrix&lt;&nbsp;CppAD::AD&lt;double&gt;,&nbsp;Eigen::ColMajor&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad_L</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of its elements does not matter.
Upon return, it is a lower triangular matrix
<a href="sparse_ad_cholesky.htm#Notation.L" target="_top"><span style='white-space: nowrap'>L</span></a>
 corresponding to the matrix <small>@(@
A
@)@</small>
specified by 
<code><i><font color="black"><span style='white-space: nowrap'>ad_Alow</span></font></i></code>
.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="sparse_ad_chol_eval.cpp.htm" target="_top"><span style='white-space: nowrap'>sparse_ad_chol_eval.cpp</span></a>
 is an example
and test using this operation.


<hr>Input File: cholesky/sparse_ad_cholesky.cpp

</body>
</html>
