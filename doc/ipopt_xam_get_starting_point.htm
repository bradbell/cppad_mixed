<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Return Initial Values Where Optimization is Started</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Return Initial Values Where Optimization is Started">
<meta name="keywords" id="keywords" content=" return initial values where optimization is started syntax n init_x x init_z z_l z_u init_lambda lambda ok source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_xam_get_starting_point_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_xam_get_bounds_info.htm" target="_top">Prev</a>
</td><td><a href="ipopt_xam_eval_f.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ipopt_fixed</option>
<option>ipopt_xam</option>
<option>ipopt_xam_get_starting_point</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_fixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_xam_htm.js'></script>
</td>
<td>ipopt_xam_get_starting_point</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Return Initial Values Where Optimization is Started</big></big></b></center>

<br><a href="ipopt_xam_get_starting_point.htm#Syntax" target="_top">Syntax</a>
<br><a href="ipopt_xam_get_starting_point.htm#n" target="_top">n</a>
<br><a href="ipopt_xam_get_starting_point.htm#init_x" target="_top">init_x</a>
<br><a href="ipopt_xam_get_starting_point.htm#x" target="_top">x</a>
<br><a href="ipopt_xam_get_starting_point.htm#init_z" target="_top">init_z</a>
<br><a href="ipopt_xam_get_starting_point.htm#z_L" target="_top">z_L</a>
<br><a href="ipopt_xam_get_starting_point.htm#z_U" target="_top">z_U</a>
<br><a href="ipopt_xam_get_starting_point.htm#init_lambda" target="_top">init_lambda</a>
<br><a href="ipopt_xam_get_starting_point.htm#lambda" target="_top">lambda</a>
<br><a href="ipopt_xam_get_starting_point.htm#ok" target="_top">ok</a>
<br><a href="ipopt_xam_get_starting_point.htm#Source" target="_top">Source</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;get_starting_point(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>init_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>init_z</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_L</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z_U</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>init_lambda</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lambda</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="n" id="n">n</a></big></b>
<br>
is the number of variables in the problem (dimension of x).

<br>
<br>
<b><big><a name="init_x" id="init_x">init_x</a></big></b>
<br>
if true, the ipopt options specify that the this routine
will provide an initial value for 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
if 
<code><i><font color="black"><span style='white-space: nowrap'>init_x</span></font></i></code>
 is true,
set to the initial value for the primal variables (has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
).

<br>
<br>
<b><big><a name="init_z" id="init_z">init_z</a></big></b>
<br>
if true, the ipopt options specify that the this routine
will provide an initial value for 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 upper and lower bound
multipliers.

<br>
<br>
<b><big><a name="z_L" id="z_L">z_L</a></big></b>
<br>
if 
<code><i><font color="black"><span style='white-space: nowrap'>init_z</span></font></i></code>
 is true,
set to the initial value for the lower bound multipliers (has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
).

<br>
<br>
<b><big><a name="z_U" id="z_U">z_U</a></big></b>
<br>
if 
<code><i><font color="black"><span style='white-space: nowrap'>init_z</span></font></i></code>
 is true,
set to the initial value for the upper bound multipliers (has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
).

<br>
<br>
<b><big><a name="init_lambda" id="init_lambda">init_lambda</a></big></b>
<br>
if true, the ipopt options specify that the this routine
will provide an initial value for 
<code><i><font color="black"><span style='white-space: nowrap'>g(x)</span></font></i></code>
 upper and lower bound
multipliers.

<br>
<br>
<b><big><a name="lambda" id="lambda">lambda</a></big></b>
<br>
if 
<code><i><font color="black"><span style='white-space: nowrap'>init_lambda</span></font></i></code>
 is true,
set to the initial value for the 
<code><i><font color="black"><span style='white-space: nowrap'>g(x)</span></font></i></code>
 multipliers
(has size 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
).

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
if set to false, the optimization will treat this point like
it was not feasible
(the function could not be evaluated at this point).

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt><font color="#009900">bool</font> ipopt_nlp_xam<font color="#990000">::</font><b><font color="#000000">get_starting_point</font></b><font color="#990000">(</font>
     <font color="#008080">Index</font>           n            <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <font color="#009900">bool</font>            init_x       <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     Number<font color="#990000">*</font>         x            <font color="#990000">,</font>  <i><font color="#9A1900">// out</font></i>
     <font color="#009900">bool</font>            init_z       <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     Number<font color="#990000">*</font>         z_L          <font color="#990000">,</font>  <i><font color="#9A1900">// out</font></i>
     Number<font color="#990000">*</font>         z_U          <font color="#990000">,</font>  <i><font color="#9A1900">// out</font></i>
     <font color="#008080">Index</font>           m            <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     <font color="#009900">bool</font>            init_lambda  <font color="#990000">,</font>  <i><font color="#9A1900">// in</font></i>
     Number<font color="#990000">*</font>         lambda       <font color="#990000">)</font>  <i><font color="#9A1900">// out</font></i>
<font color="#FF0000">{</font>
     <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
     <b><font color="#000000">assert</font></b><font color="#990000">(</font> init_x <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
     x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <b><font color="#000000">assert</font></b><font color="#990000">(</font> init_z <font color="#990000">==</font> <b><font color="#0000FF">false</font></b> <font color="#990000">);</font>
     <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
     <b><font color="#000000">assert</font></b><font color="#990000">(</font> init_lambda <font color="#990000">==</font> <b><font color="#0000FF">false</font></b> <font color="#990000">);</font>

     <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/ipopt_run.cpp

</body>
</html>
