<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Sparse Cholesky Factorization as an Atomic CppAD Operation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Sparse Cholesky Factorization as an Atomic CppAD Operation">
<meta name="keywords" id="keywords" content=" sparse cholesky factorization atomic cppad operation syntax not used purpose notation p l private public member functions type declarations variables ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_ad_cholesky_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparsity_print.htm" target="_top">Prev</a>
</td><td><a href="sparse_ad_cholesky_initialize.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>sparse_ad_cholesky</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_ad_cholesky_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Sparse Cholesky Factorization as an Atomic CppAD Operation</big></big></b></center>

<br><a href="sparse_ad_cholesky.htm#Syntax" target="_top">Syntax</a>
<br><a href="sparse_ad_cholesky.htm#Not Used" target="_top">Not&nbsp;Used</a>
<br><a href="sparse_ad_cholesky.htm#Purpose" target="_top">Purpose</a>
<br><a href="sparse_ad_cholesky.htm#Notation" target="_top">Notation</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="sparse_ad_cholesky.htm#Notation.A" target="_top">A</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="sparse_ad_cholesky.htm#Notation.P" target="_top">P</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="sparse_ad_cholesky.htm#Notation.L" target="_top">L</a>
<br><a href="sparse_ad_cholesky.htm#Private" target="_top">Private</a>
<br><a href="sparse_ad_cholesky.htm#Public Member Functions" target="_top">Public&nbsp;Member&nbsp;Functions</a>
<br><a href="sparse_ad_cholesky.htm#Type Declarations" target="_top">Type&nbsp;Declarations</a>
<br><a href="sparse_ad_cholesky.htm#Member Variables" target="_top">Member&nbsp;Variables</a>
<br><a href="sparse_ad_cholesky.htm#Contents" target="_top">Contents</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>CppAD::mixed::sparse_ad_cholesky&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cholesky</span></font></i></code>


<br>
<br>
<b><big><a name="Not Used" id="Not Used">Not Used</a></big></b>
<br>
The option for <code><font color="blue">cppad_mixed</font></code> to use this class was removed on 2017-01-21.
Is implementation and examples have been stored in the
<code><font color="blue">cholesky</font></code> directory for possible future research.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Given a symmetric positive definite matrix <small>@(@
A \in \B{R}^{n \times n}
@)@</small>,
this routine computes a permutation matrix <small>@(@
P \in \B{R}^{n \times n}
@)@</small>
and a lower triangular matrix <small>@(@
L \in \B{R}^{n \times n}
@)@</small>
such that
<small>@[@

	P A P^\R{T} = L L^\R{T}

@]@</small>
The permutation matrix is chosen to be fill reducing; i.e.,
to make <small>@(@
L
@)@</small> sparse.

<br>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>


<br>
<br>
<big><a name="Notation.A" id="Notation.A">A</a></big>
<br>
We use <small>@(@
A
@)@</small> to refer to the symmetric positive definite
matrix.

<br>
<br>
<big><a name="Notation.P" id="Notation.P">P</a></big>
<br>
We use <small>@(@
P
@)@</small> to refer to the permutation matrix.

<br>
<br>
<big><a name="Notation.L" id="Notation.L">L</a></big>
<br>
We use <small>@(@
L
@)@</small> to refer to the lower triangular matrix.

<br>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This class is an implementation detail and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="Public Member Functions" id="Public Member Functions">Public Member Functions</a></big></b>

<pre><tt>    
    <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// OK status flag</font></i>
     <font color="#009900">bool</font> <b><font color="#000000">ok</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
     <font color="#FF0000">{</font>    <b><font color="#0000FF">return</font></b> ok_<font color="#990000">;</font> <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// default constructor</font></i>
     <b><font color="#000000">sparse_ad_cholesky</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#990000">:</font> CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>
          <font color="#FF0000">"sparse_ad_cholesky"</font><font color="#990000">,</font>
          CppAD<font color="#990000">::</font>atomic_base<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font>pack_sparsity_enum
     <font color="#990000">)</font>
     <font color="#FF0000">{</font> <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// initialize</font></i>
     <font color="#009900">void</font> <b><font color="#000000">initialize</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> sparse_ad_matrix<font color="#990000">&amp;</font> Alow <font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Permutation matrix for this factorization</font></i>
     <b><font color="#0000FF">const</font></b> Eigen<font color="#990000">::</font>PermutationMatrix<font color="#990000">&lt;</font>Eigen<font color="#990000">::</font>Dynamic<font color="#990000">,</font> Eigen<font color="#990000">::</font>Dynamic<font color="#990000">&gt;&amp;</font>
     <b><font color="#000000">permutation</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// AD version of atomic Cholesky factorization</font></i>
     <font color="#009900">void</font> <b><font color="#000000">eval</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> sparse_ad_matrix<font color="#990000">&amp;</font> ad_Alow  <font color="#990000">,</font>
          sparse_ad_matrix<font color="#990000">&amp;</font>       ad_L
     <font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="Type Declarations" id="Type Declarations">Type Declarations</a></big></b>

<pre><tt>    
    <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
     <b><font color="#0000FF">typedef</font></b> Eigen<font color="#990000">::</font>
     <font color="#008080">SparseMatrix&lt;double, Eigen::ColMajor&gt;</font>               sparse_d_matrix<font color="#990000">;</font>
     <b><font color="#0000FF">typedef</font></b> Eigen<font color="#990000">::</font>
     <font color="#008080">SparseMatrix&lt; CppAD::AD&lt;double&gt;, Eigen::ColMajor &gt;</font>  sparse_ad_matrix<font color="#990000">;</font></tt></pre>
<br>
<b><big><a name="Member Variables" id="Member Variables">Member Variables</a></big></b>

<pre><tt>    
    <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
     <i><font color="#9A1900">// number of columns and rows in the square matrices Alow and L</font></i>
     <i><font color="#9A1900">// (set by initialize)</font></i>
     <font color="#008080">size_t</font> nc_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// OK flag is initialized as true to false if an</font></i>
     <i><font color="#9A1900">// error occurs.</font></i>
     <font color="#009900">bool</font> ok_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Sparsity pattern for Alow and the temporary vector Alow_pattern_.val</font></i>
     <i><font color="#9A1900">// (set by initialize).</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_mat_info</font> Alow_pattern_<font color="#990000">;</font>
    
     <i><font color="#9A1900">// Object used for Cholesky factorization</font></i>
     <i><font color="#9A1900">// (analyzePattern is only called by initialize).</font></i>
     Eigen<font color="#990000">::</font><font color="#008080">SimplicialLDLT&lt;sparse_d_matrix&gt;</font> ldlt_obj_<font color="#990000">;</font>
    
     <i><font color="#9A1900">// Value of the permutation matrix (set by initialize).</font></i>
     Eigen<font color="#990000">::</font><font color="#008080">PermutationMatrix&lt;Eigen::Dynamic, Eigen::Dynamic&gt;</font> P_<font color="#990000">;</font>
    
     <i><font color="#9A1900">// Sparsity pattern for L and the temporary vector L_pattern_.val</font></i>
     <i><font color="#9A1900">// (set by initialize).</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_mat_info</font> L_pattern_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Indices that access lower traingle of B = P * A * P^T</font></i>
     <i><font color="#9A1900">// in column major order (set by initialize).</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;size_t&gt;</font> Alow_permuted_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Indices that access L_pattern_ in row major order</font></i>
     <i><font color="#9A1900">// (set by initialize).</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt;size_t&gt;</font> L_row_major_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Jacobian sparsity as a sparse_pack.  This is CppAD internal</font></i>
     <i><font color="#9A1900">// representations for vectors of of bools.  Its use is not part of the</font></i>
     <i><font color="#9A1900">// CppAD API (yet), but it is more efficient, so we use it here.</font></i>
     CppAD<font color="#990000">::</font>local<font color="#990000">::</font><font color="#008080">sparse_pack</font> jac_sparsity_pack_<font color="#990000">;</font></tt></pre>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="sparse_ad_cholesky_initialize.htm" target="_top">sparse_ad_cholesky_initialize</a></td><td>Initialize&nbsp;Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Factorization</td></tr><tr><td><a href="sparse_ad_cholesky_p.htm" target="_top">sparse_ad_cholesky_p</a></td><td>Using&nbsp;Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Permutation&nbsp;P</td></tr><tr><td><a href="sparse_ad_cholesky_eval.htm" target="_top">sparse_ad_cholesky_eval</a></td><td>Using&nbsp;Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Factor&nbsp;L</td></tr><tr><td><a href="set_jac_sparsity.htm" target="_top">set_jac_sparsity</a></td><td>Set&nbsp;the&nbsp;Jacobian&nbsp;Sparsity&nbsp;Pattern</td></tr><tr><td><a href="set_hes_sparsity.htm" target="_top">set_hes_sparsity</a></td><td>Set&nbsp;the&nbsp;Hessian&nbsp;Sparsity&nbsp;Pattern</td></tr><tr><td><a href="sparse_ad_chol_eval.cpp.htm" target="_top">sparse_ad_chol_eval.cpp</a></td><td>Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="sparse_ad_chol_perm.cpp.htm" target="_top">sparse_ad_chol_perm.cpp</a></td><td>Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Permutation:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="sparse_ad_chol_eq.cpp.htm" target="_top">sparse_ad_chol_eq.cpp</a></td><td>Using&nbsp;Sparse&nbsp;AD&nbsp;Cholesky&nbsp;To&nbsp;Solve&nbsp;Equations:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="sparse_ad_chol_var.cpp.htm" target="_top">sparse_ad_chol_var.cpp</a></td><td>Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Variable&nbsp;Calculation:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="sparse_ad_chol_sp1.cpp.htm" target="_top">sparse_ad_chol_sp1.cpp</a></td><td>Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Sparsity&nbsp;Calculation:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="sparse_ad_chol_sp2.cpp.htm" target="_top">sparse_ad_chol_sp2.cpp</a></td><td>Sparse&nbsp;AD&nbsp;Cholesky&nbsp;Sparsity&nbsp;Calculation:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table>
<hr>Input File: cholesky/sparse_ad_cholesky.hpp

</body>
</html>
