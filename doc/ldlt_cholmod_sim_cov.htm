<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Simulations with Covariance Corresponding to Factored Matrix</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Simulations with Covariance Corresponding to Factored Matrix">
<meta name="keywords" id="keywords" content=" simulations with covariance corresponding to factored matrix syntax prototype private purpose ldlt_obj w v positive definite ok example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ldlt_cholmod_sim_cov_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ldlt_cholmod_solve_h.htm" target="_top">Prev</a>
</td><td><a href="ldlt_cholmod_inv.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>ldlt_cholmod</option>
<option>ldlt_cholmod_sim_cov</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ldlt_cholmod_htm.js'></script>
</td>
<td>ldlt_cholmod_sim_cov</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Simulations with Covariance Corresponding to Factored Matrix</big></big></b></center>

<br><a href="ldlt_cholmod_sim_cov.htm#Syntax" target="_top">Syntax</a>
<br><a href="ldlt_cholmod_sim_cov.htm#Prototype" target="_top">Prototype</a>
<br><a href="ldlt_cholmod_sim_cov.htm#Private" target="_top">Private</a>
<br><a href="ldlt_cholmod_sim_cov.htm#Purpose" target="_top">Purpose</a>
<br><a href="ldlt_cholmod_sim_cov.htm#ldlt_obj" target="_top">ldlt_obj</a>
<br><a href="ldlt_cholmod_sim_cov.htm#w" target="_top">w</a>
<br><a href="ldlt_cholmod_sim_cov.htm#v" target="_top">v</a>
<br><a href="ldlt_cholmod_sim_cov.htm#Positive Definite" target="_top">Positive&nbsp;Definite</a>
<br><a href="ldlt_cholmod_sim_cov.htm#ok" target="_top">ok</a>
<br><a href="ldlt_cholmod_sim_cov.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i><font color="blue"><span style='white-space: nowrap'>.sim_cov(</span></font><i><font color="black"><span style='white-space: nowrap'>w</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<font color="#009900">bool</font> ldlt_cholmod<font color="#990000">::</font><b><font color="#000000">sim_cov</font></b><font color="#990000">(</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> w  <font color="#990000">,</font>
     CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>       v  <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
The <a href="ldlt_cholmod.htm" target="_top"><span style='white-space: nowrap'>ldlt_cholmod</span></a>
 class is an
<a href="ldlt_cholmod.htm#Private" target="_top"><span style='white-space: nowrap'>implementation&nbsp;detail</span></a>
 and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This function simulates a normal random vector with mean zero
and covariance <small>@(@
H^{-1}
@)@</small> where
<small>@[@

	L D L^\R{T} = P H P^\R{T}

@]@</small>
is the current factorization; see
<a href="ldlt_cholmod.htm#Factorization.H" target="_top"><span style='white-space: nowrap'>H</span></a>
,
<a href="ldlt_cholmod.htm#Factorization.L" target="_top"><span style='white-space: nowrap'>L</span></a>
,
<a href="ldlt_cholmod.htm#Factorization.D" target="_top"><span style='white-space: nowrap'>D</span></a>
, and
<a href="ldlt_cholmod.htm#Factorization.P" target="_top"><span style='white-space: nowrap'>P</span></a>
.

<br>
<br>
<b><big><a name="ldlt_obj" id="ldlt_obj">ldlt_obj</a></big></b>
<br>
This object has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::mixed::ldlt_cholmod&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ldlt_obj</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
In addition, it must have a previous call to
<a href="ldlt_cholmod_update.htm" target="_top"><span style='white-space: nowrap'>ldlt_cholmod_update</span></a>
.

<br>
<br>
<b><big><a name="w" id="w">w</a></big></b>
<br>
This argument's
size is equal to the number of rows in <small>@(@
H
@)@</small>.

<br>
<br>
<b><big><a name="v" id="v">v</a></big></b>
<br>
This argument's
size is equal to the number of rows in <small>@(@
H
@)@</small>.
The input value of its elements does not matter.
Upon return
<small>@[@

	v = P^\R{T} L^{-\R{T}} \tilde{D}^{-1/2} w

@]@</small>
If <small>@(@
w
@)@</small> is mean zero, variance identity white noise,
<small>@(@
w \sim \B{N} ( 0 , I )
@)@</small>,
then <small>@(@
v
@)@</small> will be mean zero and variance <small>@(@
H^{-1}
@)@</small>,
<small>@(@
v \sim \B{N} ( 0 , H^{-1} )
@)@</small>; see
<a href="theory.htm#Sparse Observed Information" target="_top"><span style='white-space: nowrap'>sparse&nbsp;observed&nbsp;information</span></a>
.

<br>
<br>
<b><big><a name="Positive Definite" id="Positive Definite">Positive Definite</a></big></b>
<br>
In the formula for <small>@(@
v
@)@</small> above,
the matrix <small>@(@
\tilde{D}
@)@</small> is a positive version of <small>@(@
D
@)@</small>.
To be specific,
<small>@[@

\tilde{D}_{i,i} = \left\{ \begin{array}{ll}
	D_{i,i} & \R{if} \; D_{i,i} \geq  \varepsilon^2 \; \max(D) \\
	\varepsilon^2 \; \max(D) & \R{otherwise}
\end{array} \right.

@]@</small>
where <small>@(@
\varepsilon
@)@</small>
<code><font color="blue">std::numeric_limits&lt;double&gt;::epsilon()</font></code>,
and <small>@(@
\max(D)
@)@</small> is the largest element in <small>@(@
D
@)@</small>.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
If <small>@(@
\max(D) > 0
@)@</small>, this routine terminates with 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>

equal to true.
Otherwise it is false and the output values in 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

are the same as their input values.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="ldlt_cholmod.cpp.htm#sim_cov" target="_top"><span style='white-space: nowrap'>ldlt_cholmod.cpp</span></a>
 contains an
example and test that uses this function.


<hr>Input File: src/cholmod/sim_cov.cpp

</body>
</html>
