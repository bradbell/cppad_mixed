<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>sparse_eigen2rcv: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="sparse_eigen2rcv: Example and Test">
<meta name="keywords" id="keywords" content=" sparse_eigen2rcv: example test private ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_eigen2rcv.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_eigen2rcv.htm" target="_top">Prev</a>
</td><td><a href="sparse_rcv2eigen.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>sparse_eigen2rcv</option>
<option>sparse_eigen2rcv.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_namespace_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_eigen2rcv_htm.js'></script>
</td>
<td>sparse_eigen2rcv.cpp</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>sparse_eigen2rcv: Example and Test</big></big></b></center>

<br><a href="sparse_eigen2rcv.cpp.htm#Private" target="_top">Private</a>
<br><br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This example is not part of the
<a href="public.htm" target="_top"><span style='white-space: nowrap'>cppad_mixed&nbsp;public&nbsp;API</span></a>
.

<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/sparse_eigen2rcv.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">sparse_eigen2rcv_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#008080">size_t</font> nr <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> nc <font color="#990000">=</font> nr<font color="#990000">;</font>
     <i><font color="#9A1900">// declaring m_eigen( int(nr), int(nc) ) does not work.</font></i>
     Eigen<font color="#990000">::</font><font color="#008080">SparseMatrix&lt;double&gt;</font> m_eigen<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// m_eigen, nnz</font></i>
     <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     m_eigen<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font> <font color="#009900">int</font><font color="#990000">(</font>nr<font color="#990000">),</font> <font color="#009900">int</font><font color="#990000">(</font>nc<font color="#990000">));</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> i<font color="#990000">;</font> j <font color="#990000">&lt;</font> nc<font color="#990000">;</font> j<font color="#990000">++)</font>
          <font color="#FF0000">{</font>    <i><font color="#9A1900">// nnz is index of this entry in row major order</font></i>
               m_eigen<font color="#990000">.</font><b><font color="#000000">insert</font></b><font color="#990000">(</font> <font color="#009900">int</font><font color="#990000">(</font>i<font color="#990000">),</font> <font color="#009900">int</font><font color="#990000">(</font>j<font color="#990000">)</font> <font color="#990000">)</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>nnz<font color="#990000">);</font>
               <font color="#990000">++</font>nnz<font color="#990000">;</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// m_rcv</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">d_sparse_rcv</font> m_rcv<font color="#990000">;</font>
     m_rcv <font color="#990000">=</font> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">sparse_eigen2rcv</font></b><font color="#990000">(</font>m_eigen<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check sizes</font></i>
     ok <font color="#990000">&amp;=</font> m_rcv<font color="#990000">.</font><b><font color="#000000">nr</font></b><font color="#990000">()</font>  <font color="#990000">==</font> nr<font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> m_rcv<font color="#990000">.</font><b><font color="#000000">nc</font></b><font color="#990000">()</font>  <font color="#990000">==</font> nc<font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> m_rcv<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> nnz<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check the result values</font></i>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>s_vector<font color="#990000">&amp;</font> <b><font color="#000000">row</font></b><font color="#990000">(</font> m_rcv<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()</font> <font color="#990000">);</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>s_vector<font color="#990000">&amp;</font> <b><font color="#000000">col</font></b><font color="#990000">(</font> m_rcv<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()</font> <font color="#990000">);</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_vector<font color="#990000">&amp;</font> <b><font color="#000000">val</font></b><font color="#990000">(</font> m_rcv<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()</font> <font color="#990000">);</font>
     <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">s_vector</font>  row_major <font color="#990000">=</font> m_rcv<font color="#990000">.</font><b><font color="#000000">row_major</font></b><font color="#990000">();</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
     <font color="#FF0000">{</font>    <font color="#008080">size_t</font> i <font color="#990000">=</font> row<font color="#990000">[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">];</font>
          <font color="#008080">size_t</font> j <font color="#990000">=</font> col<font color="#990000">[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">];</font>
          ok <font color="#990000">&amp;=</font> i <font color="#990000">&lt;=</font> j<font color="#990000">;</font>
          ok <font color="#990000">&amp;=</font> val<font color="#990000">[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> <font color="#009900">double</font><font color="#990000">(</font>k<font color="#990000">);</font>
     <font color="#FF0000">}</font>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/private/sparse_eigen2rcv.cpp

</body>
</html>
