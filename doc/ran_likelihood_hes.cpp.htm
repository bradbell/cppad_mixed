<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Random Likelihood Hessian: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Random Likelihood Hessian: Example and Test">
<meta name="keywords" id="keywords" content=" random likelihood hessian: example test exponentiating effects motivation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ran_likelihood_hes.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ran_likelihood_hes.htm" target="_top">Prev</a>
</td><td><a href="private.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>public</option>
<option>ran_likelihood_hes</option>
<option>ran_likelihood_hes.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_17</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>base_class-&gt;</option>
<option>public</option>
<option>private</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>public-&gt;</option>
<option>derived_ctor</option>
<option>ran_likelihood</option>
<option>fix_likelihood</option>
<option>fix_constraint</option>
<option>initialize</option>
<option>optimize_random</option>
<option>optimize_fixed</option>
<option>information_mat</option>
<option>sample_fixed</option>
<option>sample_random</option>
<option>ran_likelihood_jac</option>
<option>ran_likelihood_hes</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ran_likelihood_hes-&gt;</option>
<option>ran_likelihood_hes.cpp</option>
</select>
</td>
<td>ran_likelihood_hes.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Exponentiating Random Effects</option>
<option>Motivation</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>Random Likelihood Hessian: Example and Test</big></big></b></center>
<br>
<b><big><a name="Exponentiating Random Effects" id="Exponentiating Random Effects">Exponentiating Random Effects</a></big></b>
<br>
For this example there is,
on fixed effects <small>@(@
\theta_0
@)@</small> and  one data point <small>@(@
y_i
@)@</small> for each
random effect <small>@(@
u_i
@)@</small>.
We use <small>@(@
e_i
@)@</small> to denote the measurement error for the <code><i>i</i></code>-th
measurement.
The simulated data is
<small>@[@

	y_i = \theta_0 \exp [ u_i ] + e_i

@]@</small>
where <small>@(@
u_i \sim \B{N} ( 0 , \sigma_u )
@)@</small>
and <small>@(@
e_i \sim \B{N} ( 0 , \sigma_y )
@)@</small>.

<br>
<br>
<b><big><a name="Motivation" id="Motivation">Motivation</a></big></b>
<br>
Note that for this model,
the Hessian with respect to the random effects is non-trivial and
easy to calculate.
Also not this is a good example of exponentiating
random effects in the data model.


<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/cppad_mixed.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/manage_gsl_rng.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;gsl/gsl_randist.h&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>log<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>sparse_rc<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>sparse_rcv<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a1_vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a3_vector<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#009900">double</font> random_effects_std <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
     <font color="#009900">double</font> measurement_std    <font color="#990000">=</font> <font color="#993399">0.7</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">class</font></b> <font color="#008080">mixed_derived</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_mixed <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       y_<font color="#990000">;</font>
          <font color="#009900">bool</font>                  ran_likelihood_hes_called_<font color="#990000">;</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// constructor</font></i>
          <b><font color="#000000">mixed_derived</font></b><font color="#990000">(</font>
               <font color="#008080">size_t</font>                 n_fixed       <font color="#990000">,</font>
               <font color="#008080">size_t</font>                 n_random      <font color="#990000">,</font>
               <font color="#009900">bool</font>                   quasi_fixed   <font color="#990000">,</font>
               <font color="#009900">bool</font>                   bool_sparsity <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> sparse_rcv<font color="#990000">&amp;</font>      A_rcv         <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        y             <font color="#990000">)</font> <font color="#990000">:</font>
               <b><font color="#000000">cppad_mixed</font></b><font color="#990000">(</font>
                    n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv
               <font color="#990000">),</font>
               <b><font color="#000000">y_</font></b><font color="#990000">(</font>y<font color="#990000">),</font>
               <b><font color="#000000">ran_likelihood_hes_called_</font></b><font color="#990000">(</font><b><font color="#0000FF">false</font></b><font color="#990000">)</font>
          <font color="#FF0000">{</font> <font color="#FF0000">}</font>
          <i><font color="#9A1900">// ------------------------------------------------------------------</font></i>
          <i><font color="#9A1900">// implementation of ran_likelihood</font></i>
          <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
          <font color="#008080">Vector</font> <b><font color="#000000">template_ran_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font>         theta  <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font>         u      <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">typedef</font></b> <b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">::</font><font color="#008080">value_type</font> scalar<font color="#990000">;</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font> theta<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

               <font color="#008080">Vector</font> <b><font color="#000000">vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

               <i><font color="#9A1900">// initialize summation</font></i>
               vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">scalar</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>

               <i><font color="#9A1900">// for each data and random effect</font></i>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> y_<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> i<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <font color="#008080">scalar</font> model  <font color="#990000">=</font> theta<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font><b><font color="#000000">exp</font></b><font color="#990000">(</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">);</font>

                    <i><font color="#9A1900">// a Gaussian</font></i>
                    <font color="#008080">scalar</font> res <font color="#990000">=</font> <font color="#990000">(</font> y_<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> model <font color="#990000">)</font> <font color="#990000">/</font> measurement_std<font color="#990000">;</font>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>    <font color="#990000">+=</font> res <font color="#990000">*</font> res <font color="#990000">/</font> <b><font color="#000000">scalar</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">);</font>

                    <i><font color="#9A1900">// prior for random effects</font></i>
                    res      <font color="#990000">=</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">/</font> random_effects_std<font color="#990000">;</font>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">+=</font> res <font color="#990000">*</font> res <font color="#990000">/</font> <b><font color="#000000">scalar</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">);</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> vec<font color="#990000">;</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// a3_vector version of ran_likelihood</font></i>
          <b><font color="#0000FF">virtual</font></b> <font color="#008080">a3_vector</font> <b><font color="#000000">ran_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> a3_vector<font color="#990000">&amp;</font> fixed_vec<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> a3_vector<font color="#990000">&amp;</font> random_vec
          <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">return</font></b> <b><font color="#000000">template_ran_likelihood</font></b><font color="#990000">(</font> fixed_vec<font color="#990000">,</font> random_vec <font color="#990000">);</font> <font color="#FF0000">}</font>
          <i><font color="#9A1900">// ------------------------------------------------------------------</font></i>
          <i><font color="#9A1900">// ran_likelihood_hes</font></i>
          <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
          <font color="#008080">Vector</font> <b><font color="#000000">template_ran_likelihood_hes</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font>            theta  <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font>            u      <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>          row    <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>          col    <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">typedef</font></b> <b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">::</font><font color="#008080">value_type</font> scalar<font color="#990000">;</font>

               <font color="#008080">size_t</font> K <font color="#990000">=</font> row<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
               <b><font color="#000000">assert</font></b><font color="#990000">(</font> col<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> K <font color="#990000">);</font>

               <i><font color="#9A1900">// return value</font></i>
               <font color="#008080">Vector</font> <b><font color="#000000">val</font></b><font color="#990000">(</font>K<font color="#990000">);</font>

               <i><font color="#9A1900">// for each component of the return value</font></i>
               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <i><font color="#9A1900">// initialize it as zero</font></i>
                    val<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">scalar</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
                    <b><font color="#000000">assert</font></b><font color="#990000">(</font> theta<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

                    <i><font color="#9A1900">// for this function, only the diagonal elements are non-zero</font></i>
                    <b><font color="#000000">assert</font></b><font color="#990000">(</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">);</font>
                    <i><font color="#9A1900">//</font></i>
                    <font color="#008080">size_t</font> i <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">];</font>
                    <i><font color="#9A1900">//</font></i>
                    <font color="#008080">scalar</font> model     <font color="#990000">=</font> theta<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font><b><font color="#000000">exp</font></b><font color="#990000">(</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">);</font>
                    <font color="#008080">scalar</font> res       <font color="#990000">=</font> <font color="#990000">(</font>y_<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> model<font color="#990000">)</font> <font color="#990000">/</font> measurement_std<font color="#990000">;</font>
                    <i><font color="#9A1900">//</font></i>
                    <font color="#008080">scalar</font> res_ui    <font color="#990000">=</font> <font color="#990000">-</font> model <font color="#990000">/</font> measurement_std<font color="#990000">;</font>
                    <font color="#008080">scalar</font> res_ui_ui <font color="#990000">=</font> <font color="#990000">-</font> model <font color="#990000">/</font> measurement_std<font color="#990000">;</font>
                    <font color="#008080">scalar</font> sq_ui     <font color="#990000">=</font> res <font color="#990000">*</font> res_ui<font color="#990000">;</font>
                    <font color="#008080">scalar</font> sq_ui_ui  <font color="#990000">=</font> res_ui <font color="#990000">*</font> res_ui <font color="#990000">+</font> res <font color="#990000">*</font> res_ui_ui<font color="#990000">;</font>
                    val<font color="#990000">[</font>k<font color="#990000">]</font>           <font color="#990000">=</font> sq_ui_ui<font color="#990000">;</font>
                    <i><font color="#9A1900">//</font></i>
                    <font color="#009900">double</font> var       <font color="#990000">=</font> random_effects_std <font color="#990000">*</font> random_effects_std<font color="#990000">;</font>
                    val<font color="#990000">[</font>k<font color="#990000">]</font>          <font color="#990000">+=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> var<font color="#990000">;</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> val<font color="#990000">;</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// a1_vector version of ran_likelihood_hes</font></i>
          <b><font color="#0000FF">virtual</font></b> <font color="#008080">a1_vector</font> <b><font color="#000000">ran_likelihood_hes</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font> theta <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font> u     <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>  row   <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>  col   <font color="#990000">)</font>
          <font color="#FF0000">{</font>    ran_likelihood_hes_called_ <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
               <b><font color="#0000FF">return</font></b> <b><font color="#000000">template_ran_likelihood_hes</font></b><font color="#990000">(</font> theta<font color="#990000">,</font> u<font color="#990000">,</font> row<font color="#990000">,</font> col <font color="#990000">);</font>
          <font color="#FF0000">}</font>
          <font color="#009900">bool</font> <b><font color="#000000">ran_likelihood_hes_called</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <b><font color="#0000FF">const</font></b>
          <font color="#FF0000">{</font>    <b><font color="#0000FF">return</font></b> ran_likelihood_hes_called_<font color="#990000">;</font> <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">ran_likelihood_hes_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
     <font color="#009900">bool</font>   ok  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> inf <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// size_t random_seed = CppAD::mixed::new_gsl_rng(0);</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">new_gsl_rng</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     gsl_rng<font color="#990000">*</font> rng <font color="#990000">=</font> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">get_gsl_rng</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">size_t</font> n_fixed   <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">fixed_lower</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">fixed_in</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">fixed_upper</font></b><font color="#990000">(</font>n_fixed<font color="#990000">);</font>
     fixed_lower<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>   <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     fixed_in<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>      <font color="#990000">=</font> <font color="#993399">5.0</font><font color="#990000">;</font>
     fixed_upper<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>   <font color="#990000">=</font> <font color="#993399">10.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#008080">size_t</font> n_data    <font color="#990000">=</font> <font color="#993399">1000</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_random  <font color="#990000">=</font> n_data<font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">data</font></b><font color="#990000">(</font>n_data<font color="#990000">);</font>
     d_vector
          <b><font color="#000000">random_lower</font></b><font color="#990000">(</font>n_random<font color="#990000">),</font> <b><font color="#000000">random_in</font></b><font color="#990000">(</font>n_random<font color="#990000">),</font> <b><font color="#000000">random_upper</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <font color="#009900">double</font> true_fixed_0 <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_data<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <font color="#009900">double</font> u_i <font color="#990000">=</font> <b><font color="#000000">gsl_ran_gaussian</font></b><font color="#990000">(</font>rng<font color="#990000">,</font> random_effects_std<font color="#990000">);</font>
          <font color="#009900">double</font> e_i <font color="#990000">=</font> <b><font color="#000000">gsl_ran_gaussian</font></b><font color="#990000">(</font>rng<font color="#990000">,</font> measurement_std<font color="#990000">);</font>
          data<font color="#990000">[</font>i<font color="#990000">]</font>    <font color="#990000">=</font> true_fixed_0 <font color="#990000">*</font> <b><font color="#000000">exp</font></b><font color="#990000">(</font> u_i <font color="#990000">)</font> <font color="#990000">+</font> e_i<font color="#990000">;</font>
          <i><font color="#9A1900">//</font></i>
          random_lower<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font>inf<font color="#990000">;</font>
          random_in<font color="#990000">[</font>i<font color="#990000">]</font>    <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          random_upper<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">+</font>inf<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#009900">bool</font> quasi_fixed   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     <font color="#009900">bool</font> bool_sparsity <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#008080">sparse_rcv</font> A_rcv<font color="#990000">;</font> <i><font color="#9A1900">// empty matrix</font></i>
     <font color="#008080">mixed_derived</font> <b><font color="#000000">mixed_object</font></b><font color="#990000">(</font>
          n_fixed<font color="#990000">,</font> n_data<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv<font color="#990000">,</font> data
     <font color="#990000">);</font>
     mixed_object<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>fixed_in<font color="#990000">,</font> random_in<font color="#990000">);</font>

     <i><font color="#9A1900">// optimize the fixed effects using quasi-Newton method</font></i>
     std<font color="#990000">::</font><font color="#008080">string</font> fixed_ipopt_options <font color="#990000">=</font>
          <font color="#FF0000">"Integer print_level               0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  sb                        yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test           adaptive</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test_print_all yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"Integer max_iter                  50</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"Numeric tol                       1e-8</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
     <font color="#990000">;</font>
     std<font color="#990000">::</font><font color="#008080">string</font> random_ipopt_options <font color="#990000">=</font>
          <font color="#FF0000">"Integer print_level     0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  sb              yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test none</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"Numeric tol             1e-10</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
     <font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// ------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// optimize fixed effects</font></i>
     <font color="#008080">d_vector</font> fixed_scale <font color="#990000">=</font> fixed_in<font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">fix_constraint_lower</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">),</font> <b><font color="#000000">fix_constraint_upper</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">fixed_solution</font> solution <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">optimize_fixed</font></b><font color="#990000">(</font>
          fixed_ipopt_options<font color="#990000">,</font>
          random_ipopt_options<font color="#990000">,</font>
          fixed_lower<font color="#990000">,</font>
          fixed_upper<font color="#990000">,</font>
          fix_constraint_lower<font color="#990000">,</font>
          fix_constraint_upper<font color="#990000">,</font>
          fixed_scale<font color="#990000">,</font>
          fixed_in<font color="#990000">,</font>
          random_lower<font color="#990000">,</font>
          random_upper<font color="#990000">,</font>
          random_in
     <font color="#990000">);</font>
     <font color="#008080">d_vector</font> fixed_out <font color="#990000">=</font> solution<font color="#990000">.</font>fixed_opt<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>true_fixed_0<font color="#990000">,</font> fixed_out<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> <font color="#993399">1e-2</font><font color="#990000">,</font> <font color="#993399">1e-2</font><font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">ran_likelihood_hes_called</font></b><font color="#990000">();</font>
     <i><font color="#9A1900">//</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><b><font color="#000000">free_gsl_rng</font></b><font color="#990000">();</font>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/user/ran_likelihood_hes.cpp

</body>
</html>
