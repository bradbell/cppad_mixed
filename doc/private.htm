<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>cppad_mixed: Private Declarations</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="cppad_mixed: Private Declarations">
<meta name="keywords" id="keywords" content=" cppad_mixed: private declarations n_fixed_ n_random_ quasi_fixed_ bool_sparsity_ a_rcv_ initialize_done_ cppad_error_handler ran_like_fun_ ran_jac_fun_ ran_hes_fun_ ldlt_ran_hes_ hes_cross_ newton_checkpoint_ laplace_obj_fun_ laplace_obj_hes_ fix_like_fun_ fix_like_jac_ fix_like_hes_ fix_con_fun_ fix_con_jac_ fix_con_hes_ template member functions pack unpack initialization init_ldlt_ran_hes init_fix_con init_fix_like init_hes_cross init_ran_jac init_ran_hes check_user_ran_hes init_laplace_obj_hes init_ran_like init_laplace_obj try try_initialize try_optimize_random try_optimize_fixed try_information_mat try_sample_fixed sample_random other fix_con_eval fix_con_jac fix_con_hes fix_like_eval fix_like_jac fix_like_hes logdet_jac ran_con_eval ran_con_jac ran_like_jac check_user_ran_jac ran_obj_eval ran_obj_jac laplace_obj_hes update_factor ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_private_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ran_likelihood_hes.cpp.htm" target="_top">Prev</a>
</td><td><a href="pack.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>private</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_18</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>base_class-&gt;</option>
<option>public</option>
<option>private</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>private-&gt;</option>
<option>pack</option>
<option>unpack</option>
<option>init_ran_jac</option>
<option>check_user_ran_jac</option>
<option>init_ran_hes</option>
<option>check_user_ran_hes</option>
<option>init_laplace_obj</option>
<option>init_ldlt_ran_hes</option>
<option>init_fix_con</option>
<option>init_fix_like</option>
<option>init_hes_cross</option>
<option>init_laplace_obj_hes</option>
<option>init_ran_like</option>
<option>fix_con_eval</option>
<option>fix_con_hes</option>
<option>fix_con_jac</option>
<option>fix_like_eval</option>
<option>fix_like_hes</option>
<option>fix_like_jac</option>
<option>logdet_jac</option>
<option>ran_like_jac</option>
<option>ran_con_eval</option>
<option>ran_con_jac</option>
<option>ran_obj_eval</option>
<option>ran_obj_jac</option>
<option>laplace_obj_hes</option>
<option>update_factor</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Contents</option>
<option>n_fixed_</option>
<option>n_random_</option>
<option>quasi_fixed_</option>
<option>bool_sparsity_</option>
<option>A_rcv_</option>
<option>initialize_done_</option>
<option>cppad_error_handler</option>
<option>ran_like_fun_</option>
<option>ran_jac_fun_</option>
<option>ran_hes_fun_</option>
<option>ldlt_ran_hes_</option>
<option>hes_cross_</option>
<option>newton_checkpoint_</option>
<option>laplace_obj_fun_</option>
<option>---..laplace_obj_hes_</option>
<option>fix_like_fun_</option>
<option>---..fix_like_jac_</option>
<option>---..fix_like_hes_</option>
<option>fix_con_fun_</option>
<option>---..fix_con_jac_</option>
<option>---..fix_con_hes_</option>
<option>Template Member Functions</option>
<option>---..pack</option>
<option>---..unpack</option>
<option>Initialization Member Functions</option>
<option>---..init_ldlt_ran_hes</option>
<option>---..init_fix_con</option>
<option>---..init_fix_like</option>
<option>---..init_hes_cross</option>
<option>---..init_ran_jac</option>
<option>---..init_ran_hes</option>
<option>---..check_user_ran_hes</option>
<option>---..init_laplace_obj_hes</option>
<option>---..init_ran_like</option>
<option>---..init_laplace_obj</option>
<option>Try Member Functions</option>
<option>---..try_initialize</option>
<option>---..try_optimize_random</option>
<option>---..try_optimize_fixed</option>
<option>---..try_information_mat</option>
<option>---..try_sample_fixed</option>
<option>---..sample_random</option>
<option>Other Member Functions</option>
<option>---..fix_con_eval</option>
<option>---..fix_con_jac</option>
<option>---..fix_con_hes</option>
<option>---..fix_like_eval</option>
<option>---..fix_like_jac</option>
<option>---..fix_like_hes</option>
<option>---..logdet_jac</option>
<option>---..ran_con_eval</option>
<option>---..ran_con_jac</option>
<option>---..ran_like_jac</option>
<option>---..check_user_ran_jac</option>
<option>---..ran_obj_eval</option>
<option>---..ran_obj_jac</option>
<option>---..laplace_obj_hes</option>
<option>---..update_factor</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>cppad_mixed: Private Declarations</big></big></b></center>
These <code><font color="blue">cppad_mixed</font></code> class declarations are <code><font color="blue">private</font></code>.
They are <b>not</b> part of the user API,
they may change with time, and they
can <b>not</b> be used by a derived class object
<a href="derived_ctor.htm#mixed_object" target="_top"><span style='white-space: nowrap'>mixed_object</span></a>
.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="pack.htm" target="_top">pack</a></td><td>Pack&nbsp;Fixed&nbsp;Effect&nbsp;and&nbsp;Random&nbsp;Effects&nbsp;Into&nbsp;One&nbsp;Vector</td></tr><tr><td><a href="unpack.htm" target="_top">unpack</a></td><td>Pack&nbsp;Fixed&nbsp;Effect&nbsp;and&nbsp;Random&nbsp;Effects&nbsp;Into&nbsp;One&nbsp;Vector</td></tr><tr><td><a href="init_ran_jac.htm" target="_top">init_ran_jac</a></td><td>Initialize&nbsp;Jacobian&nbsp;of&nbsp;Random&nbsp;Likelihood&nbsp;w.r.t.&nbsp;Random&nbsp;Effects</td></tr><tr><td><a href="check_user_ran_jac.htm" target="_top">check_user_ran_jac</a></td><td>Check&nbsp;User&nbsp;Defined&nbsp;ran_likelihood_jac</td></tr><tr><td><a href="init_ran_hes.htm" target="_top">init_ran_hes</a></td><td>Initialize&nbsp;Hessian&nbsp;of&nbsp;Random&nbsp;Likelihood&nbsp;w.r.t&nbsp;Random&nbsp;Effects</td></tr><tr><td><a href="check_user_ran_hes.htm" target="_top">check_user_ran_hes</a></td><td>Check&nbsp;User&nbsp;Defined&nbsp;ran_likelihood_hes</td></tr><tr><td><a href="init_laplace_obj.htm" target="_top">init_laplace_obj</a></td><td>Second&nbsp;Order&nbsp;Representation&nbsp;of&nbsp;Laplace&nbsp;Objective&nbsp;and&nbsp;Constraints</td></tr><tr><td><a href="init_ldlt_ran_hes.htm" target="_top">init_ldlt_ran_hes</a></td><td>Initialize&nbsp;Cholesky&nbsp;Factor&nbsp;of&nbsp;Hessian&nbsp;of&nbsp;Random&nbsp;Likelihood</td></tr><tr><td><a href="init_fix_con.htm" target="_top">init_fix_con</a></td><td>Initialize&nbsp;Constraints&nbsp;as&nbsp;Function&nbsp;of&nbsp;Fixed&nbsp;Effects</td></tr><tr><td><a href="init_fix_like.htm" target="_top">init_fix_like</a></td><td>Initialize&nbsp;Fixed&nbsp;Likelihood</td></tr><tr><td><a href="init_hes_cross.htm" target="_top">init_hes_cross</a></td><td>Cross&nbsp;Terms&nbsp;of&nbsp;Sparse&nbsp;Hessian&nbsp;w.r.t&nbsp;Fixed&nbsp;and&nbsp;Random&nbsp;Effects</td></tr><tr><td><a href="init_laplace_obj_hes.htm" target="_top">init_laplace_obj_hes</a></td><td>Initialize&nbsp;Hessian&nbsp;of&nbsp;Approximate&nbsp;Laplace&nbsp;Objective</td></tr><tr><td><a href="init_ran_like.htm" target="_top">init_ran_like</a></td><td>Initialize&nbsp;Random&nbsp;Likelihood</td></tr><tr><td><a href="fix_con_eval.htm" target="_top">fix_con_eval</a></td><td>Evaluate&nbsp;Fixed&nbsp;Constraint&nbsp;Function</td></tr><tr><td><a href="fix_con_hes.htm" target="_top">fix_con_hes</a></td><td>Hessian&nbsp;of&nbsp;Fixed&nbsp;Constraints</td></tr><tr><td><a href="fix_con_jac.htm" target="_top">fix_con_jac</a></td><td>Jacobian&nbsp;of&nbsp;Fixed&nbsp;Constraint</td></tr><tr><td><a href="fix_like_eval.htm" target="_top">fix_like_eval</a></td><td>Evaluate&nbsp;Fixed&nbsp;Likelihood</td></tr><tr><td><a href="fix_like_hes.htm" target="_top">fix_like_hes</a></td><td>Hessian&nbsp;of&nbsp;Fixed&nbsp;Likelihood</td></tr><tr><td><a href="fix_like_jac.htm" target="_top">fix_like_jac</a></td><td>Jacobian&nbsp;of&nbsp;Fixed&nbsp;Likelihood</td></tr><tr><td><a href="logdet_jac.htm" target="_top">logdet_jac</a></td><td>Jacobian&nbsp;of&nbsp;Log&nbsp;Determinant&nbsp;of&nbsp;Hessian&nbsp;w.r.t.&nbsp;Random&nbsp;Effects</td></tr><tr><td><a href="ran_like_jac.htm" target="_top">ran_like_jac</a></td><td>Jacobian&nbsp;of&nbsp;Random&nbsp;Likelihood&nbsp;w.r.t.&nbsp;Random&nbsp;Effects</td></tr><tr><td><a href="ran_con_eval.htm" target="_top">ran_con_eval</a></td><td>Evaluate&nbsp;the&nbsp;Random&nbsp;Constraint&nbsp;Function</td></tr><tr><td><a href="ran_con_jac.htm" target="_top">ran_con_jac</a></td><td>Jacobian&nbsp;of&nbsp;the&nbsp;Random&nbsp;Constraint&nbsp;Function</td></tr><tr><td><a href="ran_obj_eval.htm" target="_top">ran_obj_eval</a></td><td>Evaluate&nbsp;Laplace&nbsp;Approximation&nbsp;and&nbsp;Laplace&nbsp;Objective</td></tr><tr><td><a href="ran_obj_jac.htm" target="_top">ran_obj_jac</a></td><td>Derivative&nbsp;of&nbsp;Laplace&nbsp;Objective</td></tr><tr><td><a href="laplace_obj_hes.htm" target="_top">laplace_obj_hes</a></td><td>Hessian&nbsp;of&nbsp;Laplace&nbsp;Objective&nbsp;and&nbsp;Random&nbsp;Constraints</td></tr><tr><td><a href="update_factor.htm" target="_top">update_factor</a></td><td>Update&nbsp;the&nbsp;Factorization&nbsp;of&nbsp;Hessian&nbsp;w.r.t.&nbsp;Random&nbsp;Effects</td></tr></table><br>
<b><big><a name="n_fixed_" id="n_fixed_">n_fixed_</a></big></b>
<br>
The number of fixed effects is given by
<pre style='display:inline'><tt>
     <b><font color="#0000FF">const</font></b> <font color="#008080">size_t</font> n_fixed_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="n_random_" id="n_random_">n_random_</a></big></b>
<br>
The number of random effects is given by
<pre style='display:inline'><tt>
     <b><font color="#0000FF">const</font></b> <font color="#008080">size_t</font> n_random_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="quasi_fixed_" id="quasi_fixed_">quasi_fixed_</a></big></b>
<br>
Are we using a quasi-Newton method (or full Newton method)
when <a href="optimize_fixed.htm" target="_top"><span style='white-space: nowrap'>optimizing&nbsp;fixed&nbsp;effects</span></a>
.
<pre style='display:inline'><tt>
     <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font> quasi_fixed_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="bool_sparsity_" id="bool_sparsity_">bool_sparsity_</a></big></b>
<br>
f true, use boolean sparsity patterns where possible.
Otherwise, use set sparsity patterns.
<pre style='display:inline'><tt>
     <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font> bool_sparsity_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="A_rcv_" id="A_rcv_">A_rcv_</a></big></b>
<br>
contains the random constraint matrix
<pre style='display:inline'><tt>
     <b><font color="#0000FF">const</font></b> <font color="#008080">sparse_rcv</font> A_rcv_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="initialize_done_" id="initialize_done_">initialize_done_</a></big></b>
<br>
The following flag is false after construction and true after
the corresponding member function is called.
This is the same order as the calls in the file <a href="initialize.htm" target="_top"><span style='white-space: nowrap'>initialize</span></a>
:
<pre><tt>     <i><font color="#9A1900">// only called when n_random_ &gt; 0</font></i>
     <font color="#009900">bool</font>                init_ran_con_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_ran_like_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_ran_jac_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_ran_hes_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_ldlt_ran_hes_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_hes_cross_done_<font color="#990000">;</font>
     <i><font color="#9A1900">// only called when n_random_ &gt; 0 and quasi_fixed_ is false</font></i>
     <font color="#009900">bool</font>                init_newton_checkpoint_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_laplace_obj_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_laplace_obj_hes_done_<font color="#990000">;</font>
     <i><font color="#9A1900">// called in all cases</font></i>
     <font color="#009900">bool</font>                init_fix_like_done_<font color="#990000">;</font>
     <font color="#009900">bool</font>                init_fix_con_done_<font color="#990000">;</font>
     <i><font color="#9A1900">// true when all initialization (for this case) is done</font></i>
     <font color="#009900">bool</font>                initialize_done_<font color="#990000">;</font>
</tt></pre>
<b><big><a name="cppad_error_handler" id="cppad_error_handler">cppad_error_handler</a></big></b>
<br>
Used to map CppAD error messages to
<a href="public.htm#User Defined Functions.fatal_error" target="_top"><span style='white-space: nowrap'>fatal_error</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font><font color="#008080">ErrorHandler</font> cppad_error_handler_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="ran_like_fun_" id="ran_like_fun_">ran_like_fun_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
 and <code><font color="blue">init_ran_like_done_</font></code>,
<a href="init_ran_like.htm#ran_like_fun_" target="_top"><span style='white-space: nowrap'>ran_like_fun_</span></a>
,
<a href="init_ran_like.htm#ran_like_a1fun_" target="_top"><span style='white-space: nowrap'>ran_like_a1fun_</span></a>
, and
<a href="init_ran_like.htm#ran_like_a2fun_" target="_top"><span style='white-space: nowrap'>ran_like_a2fun_</span></a>
,
are recordings of the user's <a href="ran_likelihood.htm" target="_top"><span style='white-space: nowrap'>ran_likelihood</span></a>
.
function.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font>      ran_like_fun_<font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a1_double&gt;</font>   ran_like_a1fun_<font color="#990000">;</font>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a2_double&gt;</font>   ran_like_a2fun_<font color="#990000">;</font>
</tt></pre>
The following objects hold information for computing derivatives
with these ADFun objects:

<br>
<br>
<b><big><a name="ran_jac_fun_" id="ran_jac_fun_">ran_jac_fun_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
 and <code><font color="blue">init_ran_jac_done_</font></code>,
<a href="init_ran_jac.htm#ran_jac_a1fun_" target="_top"><span style='white-space: nowrap'>ran_jac_a1fun_</span></a>
, and
<a href="init_ran_jac.htm#ran_jac2hes_rc_" target="_top"><span style='white-space: nowrap'>ran_jac2hes_rc_</span></a>
,
contain the Jacobian of the
<a href="theory.htm#Random Likelihood, f(theta, u)" target="_top"><span style='white-space: nowrap'>random&nbsp;likelihood</span></a>

with respect to the random effects; i.e.
<small>@(@
f_u ( \theta , u )
@)@</small> and the sparsity for
<small>@(@
f_{uu} ( u )
@)@</small> .
<pre><tt>     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a1_double&gt;</font>  ran_jac_a1fun_<font color="#990000">;</font>
     <font color="#008080">sparse_rc</font>                ran_jac2hes_rc_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_jac_fun_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="ran_hes_fun_" id="ran_hes_fun_">ran_hes_fun_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
 and <code><font color="blue">init_ran_hes_done_</font></code>,
<a href="init_ran_hes.htm#ran_hes_rcv_" target="_top"><span style='white-space: nowrap'>ran_hes_rcv_</span></a>

contains information for the Hessian of the
<a href="theory.htm#Random Likelihood, f(theta, u)" target="_top"><span style='white-space: nowrap'>random&nbsp;likelihood</span></a>

with respect to the random effects; i.e.
<small>@(@
f_{u,u} ( \theta , u )
@)@</small>.
<pre><tt>     <i><font color="#9A1900">// sparse Hessian</font></i>
     <font color="#008080">sparse_rcv</font>                    ran_hes_rcv_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// recording of sparse Hessian calculation</font></i>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font>        ran_hes_fun_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_hes_fun_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="ldlt_ran_hes_" id="ldlt_ran_hes_">ldlt_ran_hes_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
 and <code><font color="blue">init_ldlt_ran_hes_done_</font></code>,
<code><font color="blue">ldlt_ran_hes_</font></code> contains a
<a href="ldlt_eigen.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen</span></a>
 factor for the Hessian of the
<a href="theory.htm#Random Likelihood, f(theta, u)" target="_top"><span style='white-space: nowrap'>random&nbsp;likelihood</span></a>

; i.e.  <small>@(@
f_{u,u} ( \theta , u )
@)@</small>.
<pre style='display:inline'><tt>
     <font color="#008080">CPPAD_MIXED_LDLT_CLASS</font> ldlt_ran_hes_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="hes_cross_" id="hes_cross_">hes_cross_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
 and <code><font color="blue">init_hes_cross_done_</font></code>,
<a href="init_hes_cross.htm#hes_cross_" target="_top"><span style='white-space: nowrap'>hes_cross_</span></a>
 contains
information for the cross partials of the Hessian of the
<a href="theory.htm#Random Likelihood, f(theta, u)" target="_top"><span style='white-space: nowrap'>random&nbsp;likelihood</span></a>

; i.e.  <small>@(@
f_{u,\theta} ( \theta , u )
@)@</small>.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_hes_rcv</font> hes_cross_<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">hes_cross_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
</tt></pre>
<br>
<b><big><a name="newton_checkpoint_" id="newton_checkpoint_">newton_checkpoint_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
, quasi_fixed_ is false, and
<code><font color="blue">init_newton_checkpoint_done_</font></code>,
this is a CppAD atomic function that computes one Newton Step in the
solution of the equation <small>@(@
f_u ( \theta, u) = 0
@)@</small> as well
as the log of the determinant of <small>@(@
f_{uu} ( \theta , u )
@)@</small>;
see <a href="newton_step.htm#initialize" target="_top"><span style='white-space: nowrap'>initialize&nbsp;newton_step</span></a>
.
<pre style='display:inline'><tt>
     <i><font color="#9A1900">// computation of the Hessian as an atomic operation</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">newton_step</font>   newton_checkpoint_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="laplace_obj_fun_" id="laplace_obj_fun_">laplace_obj_fun_</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
, quasi_fixed_ is false, and
<code><font color="blue">init_laplace_obj_done_</font></code>,
this is a recording of the second order approximation for the
random part of the Laplace approximation, <small>@(@
H( \beta , \theta , u)
@)@</small>;
see <a href="init_laplace_obj.htm#laplace_obj_fun_" target="_top"><span style='white-space: nowrap'>laplace_obj_fun_</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font>        laplace_obj_fun_<font color="#990000">;</font>   <i><font color="#9A1900">// for computing H_beta_beta</font></i>
</tt></pre>
The following objects hold information for computing derivatives
with this ADFun object:

<br>
<br>
<b><a name="laplace_obj_fun_.laplace_obj_hes_" id="laplace_obj_fun_.laplace_obj_hes_">laplace_obj_hes_</a></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n_random_</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
, quasi_fixed_ is false, and
<code><font color="blue">init_laplace_obj_hes_done_</font></code>,
<a href="init_laplace_obj_hes.htm#laplace_obj_hes_" target="_top"><span style='white-space: nowrap'>laplace_obj_hes_</span></a>
 contains
information for the Hessian of the
<a href="theory.htm#Objective.Laplace Objective, r(theta)" target="_top"><span style='white-space: nowrap'>Laplace&nbsp;objective</span></a>

<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_hes_rcv</font> laplace_obj_hes_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="fix_like_fun_" id="fix_like_fun_">fix_like_fun_</a></big></b>

<br>
<a href="init_fix_like.htm#fix_like_fun_" target="_top"><span style='white-space: nowrap'>fix_like_fun_</span></a>

is a recording of the fixed part of the likelihood function; see,
<a href="fix_likelihood.htm" target="_top"><span style='white-space: nowrap'>fix_likelihood</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font>        fix_like_fun_<font color="#990000">;</font>     <i><font color="#9A1900">// g(theta)</font></i>
</tt></pre>
The following objects hold information for computing derivatives
with this ADFun object:

<br>
<br>
<b><a name="fix_like_fun_.fix_like_jac_" id="fix_like_fun_.fix_like_jac_">fix_like_jac_</a></b>

<br>
<a href="init_fix_like.htm#fix_like_jac_" target="_top"><span style='white-space: nowrap'>fix_like_jac_</span></a>

contains information for the Jacobian of the
<a href="theory.htm#Fixed Likelihood, g(theta)" target="_top"><span style='white-space: nowrap'>fixed&nbsp;likelihood</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_jac_rcv</font> fix_like_jac_<font color="#990000">;</font>
</tt></pre>
<br>
<b><a name="fix_like_fun_.fix_like_hes_" id="fix_like_fun_.fix_like_hes_">fix_like_hes_</a></b>

<br>
<a href="init_fix_like.htm#fix_like_hes_" target="_top"><span style='white-space: nowrap'>fix_like_hes_</span></a>

contains information for the Hessian of the
<a href="theory.htm#Fixed Likelihood, g(theta)" target="_top"><span style='white-space: nowrap'>fixed&nbsp;likelihood</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_hes_rcv</font> fix_like_hes_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="fix_con_fun_" id="fix_con_fun_">fix_con_fun_</a></big></b>

<br>
<a href="init_fix_con.htm#fix_con_fun_" target="_top"><span style='white-space: nowrap'>fix_con_fun_</span></a>

is a recording of the fixed part of the likelihood function; see,
<a href="fix_constraint.htm" target="_top"><span style='white-space: nowrap'>fix_constraint</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font>        fix_con_fun_<font color="#990000">;</font>     <i><font color="#9A1900">// c(theta)</font></i>
</tt></pre>
The following objects hold information for computing derivatives
with this ADFun object:

<br>
<br>
<b><a name="fix_con_fun_.fix_con_jac_" id="fix_con_fun_.fix_con_jac_">fix_con_jac_</a></b>

<br>
<a href="init_fix_con.htm#fix_con_jac_" target="_top"><span style='white-space: nowrap'>fix_con_jac_</span></a>

contains information for the Jacobian of the
constraint function <small>@(@
c ( \theta )
@)@</small>.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_jac_rcv</font> fix_con_jac_<font color="#990000">;</font>
</tt></pre>
<br>
<b><a name="fix_con_fun_.fix_con_hes_" id="fix_con_fun_.fix_con_hes_">fix_con_hes_</a></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>quasi_fixed</span></font></i></code>
 is false,
<a href="init_fix_con.htm#fix_con_hes_" target="_top"><span style='white-space: nowrap'>fix_con_hes_</span></a>

contains information for the Hessian of the
<a href="fix_constraint.htm" target="_top"><span style='white-space: nowrap'>constraints</span></a>
 function <small>@(@
c( \theta )
@)@</small>.
The corresponding ADFun object is
<a href="init_fix_con.htm#fix_con_fun_" target="_top"><span style='white-space: nowrap'>fix_con_fun_</span></a>
.
<pre style='display:inline'><tt>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_hes_rcv</font> fix_con_hes_<font color="#990000">;</font>
</tt></pre>
<br>
<b><big><a name="Template Member Functions" id="Template Member Functions">Template Member Functions</a></big></b>

<br>
<br>
<b><a name="Template Member Functions.pack" id="Template Member Functions.pack">pack</a></b>
<br>
See <a href="pack.htm" target="_top"><span style='white-space: nowrap'>pack</span></a>
.
<pre><tt>     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float_unpack</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">Float_pack</font><font color="#990000">&gt;</font>
     <font color="#009900">void</font> <b><font color="#000000">pack</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font> fixed_one  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font> random_vec <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_pack<font color="#990000">&gt;&amp;</font>         both_vec
     <font color="#990000">)</font> <b><font color="#0000FF">const</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float_unpack</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">Float_pack</font><font color="#990000">&gt;</font>
     <font color="#009900">void</font> <b><font color="#000000">pack</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font> fixed_one  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font> fixed_two  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font> random_vec <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_pack<font color="#990000">&gt;&amp;</font>         three_vec
     <font color="#990000">)</font> <b><font color="#0000FF">const</font></b><font color="#990000">;</font></tt></pre>
<br>
<b><a name="Template Member Functions.unpack" id="Template Member Functions.unpack">unpack</a></b>
<br>
See <a href="unpack.htm" target="_top"><span style='white-space: nowrap'>unpack</span></a>
.
<pre><tt>     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float_unpack</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">Float_pack</font><font color="#990000">&gt;</font>
     <font color="#009900">void</font> <b><font color="#000000">unpack</font></b><font color="#990000">(</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font>       fixed_one  <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font>       random_vec <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_pack<font color="#990000">&gt;&amp;</font>   both_vec
     <font color="#990000">)</font> <b><font color="#0000FF">const</font></b><font color="#990000">;</font>
     <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float_unpack</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">Float_pack</font><font color="#990000">&gt;</font>
     <font color="#009900">void</font> <b><font color="#000000">unpack</font></b><font color="#990000">(</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font>       fixed_one  <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font>       fixed_two  <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_unpack<font color="#990000">&gt;&amp;</font>       random_vec <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Float_pack<font color="#990000">&gt;&amp;</font>   three_vec
     <font color="#990000">)</font> <b><font color="#0000FF">const</font></b><font color="#990000">;</font></tt></pre>
<br>
<b><big><a name="Initialization Member Functions" id="Initialization Member Functions">Initialization Member Functions</a></big></b>


<br>
<br>
<b><a name="Initialization Member Functions.init_ldlt_ran_hes" id="Initialization Member Functions.init_ldlt_ran_hes">init_ldlt_ran_hes</a></b>
<br>
See <a href="init_ldlt_ran_hes.htm" target="_top"><span style='white-space: nowrap'>init_ldlt_ran_hes</span></a>
.
<pre style='display:inline'><tt>
     <font color="#009900">void</font> <b><font color="#000000">init_ldlt_ran_hes</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Initialization Member Functions.init_fix_con" id="Initialization Member Functions.init_fix_con">init_fix_con</a></b>
<br>
See <a href="init_fix_con.htm" target="_top"><span style='white-space: nowrap'>init_fix_con</span></a>
.
<pre style='display:inline'><tt>
     <font color="#009900">void</font> <b><font color="#000000">init_fix_con</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec
     <font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Initialization Member Functions.init_fix_like" id="Initialization Member Functions.init_fix_like">init_fix_like</a></b>
<br>
See <a href="init_fix_like.htm" target="_top"><span style='white-space: nowrap'>init_fix_like</span></a>
.
<pre style='display:inline'><tt>
     <font color="#009900">void</font> <b><font color="#000000">init_fix_like</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec<font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Initialization Member Functions.init_hes_cross" id="Initialization Member Functions.init_hes_cross">init_hes_cross</a></b>
<br>
See <a href="init_hes_cross.htm" target="_top"><span style='white-space: nowrap'>init_hes_cross</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">init_hes_cross</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec     <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Initialization Member Functions.init_ran_jac" id="Initialization Member Functions.init_ran_jac">init_ran_jac</a></b>
<br>
See <a href="init_ran_jac.htm" target="_top"><span style='white-space: nowrap'>init_ran_jac</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">init_ran_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec     <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Initialization Member Functions.init_ran_hes" id="Initialization Member Functions.init_ran_hes">init_ran_hes</a></b>
<br>
See <a href="init_ran_hes.htm" target="_top"><span style='white-space: nowrap'>init_ran_hes</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">init_ran_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec     <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Initialization Member Functions.check_user_ran_hes" id="Initialization Member Functions.check_user_ran_hes">check_user_ran_hes</a></b>
<br>
See <a href="check_user_ran_hes.htm" target="_top"><span style='white-space: nowrap'>check_user_ran_hes</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">check_user_ran_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Initialization Member Functions.init_laplace_obj_hes" id="Initialization Member Functions.init_laplace_obj_hes">init_laplace_obj_hes</a></b>
<br>
See <a href="init_laplace_obj_hes.htm" target="_top"><span style='white-space: nowrap'>init_laplace_obj_hes</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">init_laplace_obj_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec     <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Initialization Member Functions.init_ran_like" id="Initialization Member Functions.init_ran_like">init_ran_like</a></b>
<br>
See <a href="init_ran_like.htm" target="_top"><span style='white-space: nowrap'>init_ran_like</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">init_ran_like</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Initialization Member Functions.init_laplace_obj" id="Initialization Member Functions.init_laplace_obj">init_laplace_obj</a></b>
<br>
See <a href="init_laplace_obj.htm" target="_top"><span style='white-space: nowrap'>init_laplace_obj</span></a>
.
<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">init_laplace_obj</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="Try Member Functions" id="Try Member Functions">Try Member Functions</a></big></b>
<br>
For each 
<code><font color="blue"><span style='white-space: nowrap'>try_</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 case below,
the <a href="public.htm" target="_top"><span style='white-space: nowrap'>public</span></a>
 function 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 calls the private function

<code><font color="blue"><span style='white-space: nowrap'>try_</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 from a <code><font color="blue">try</font></code> block
with a corresponding <code><font color="blue">catch</font></code> that maps a
<code><font color="blue">cppad_mixed</font></code> <a href="exception.htm" target="_top"><span style='white-space: nowrap'>exception</span></a>
 to a
<a href="public.htm#User Defined Functions.fatal_error" target="_top"><span style='white-space: nowrap'>fatal_error</span></a>
 call.

<br>
<br>
<b><a name="Try Member Functions.try_initialize" id="Try Member Functions.try_initialize">try_initialize</a></b>
<br>
Called by public <a href="public.htm#initialize" target="_top"><span style='white-space: nowrap'>initialize</span></a>

<pre><tt>     std<font color="#990000">::</font><font color="#008080">map&lt;std::string, size_t&gt;</font> <b><font color="#000000">try_initialize</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>  fixed_vec  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>  random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Try Member Functions.try_optimize_random" id="Try Member Functions.try_optimize_random">try_optimize_random</a></b>
<br>
Called by public <a href="public.htm#optimize_random" target="_top"><span style='white-space: nowrap'>optimize_random</span></a>

<pre><tt>     <font color="#008080">d_vector</font> <b><font color="#000000">try_optimize_random</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> options      <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fixed_vec    <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    random_lower <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    random_upper <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    random_in
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Try Member Functions.try_optimize_fixed" id="Try Member Functions.try_optimize_fixed">try_optimize_fixed</a></b>
<br>
Called by public <a href="public.htm#optimize_fixed" target="_top"><span style='white-space: nowrap'>optimize_fixed</span></a>

<pre><tt>     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">fixed_solution</font> <b><font color="#000000">try_optimize_fixed</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> fixed_ipopt_options   <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> random_ipopt_options  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fixed_lower           <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fixed_upper           <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fix_constraint_lower  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fix_constraint_upper  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fixed_scale           <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    fixed_in              <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    random_lower          <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    random_upper          <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>    random_in
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Try Member Functions.try_information_mat" id="Try Member Functions.try_information_mat">try_information_mat</a></b>
<br>
Called by public <a href="public.htm#information_mat" target="_top"><span style='white-space: nowrap'>information_mat</span></a>

<pre><tt>     <font color="#008080">sparse_rcv</font> <b><font color="#000000">try_information_mat</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>fixed_solution<font color="#990000">&amp;</font>  solution      <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>                      random_opt
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Try Member Functions.try_sample_fixed" id="Try Member Functions.try_sample_fixed">try_sample_fixed</a></b>
<br>
Called by public <a href="public.htm#sample_fixed" target="_top"><span style='white-space: nowrap'>sample_fixed</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">try_sample_fixed</font></b><font color="#990000">(</font>
          d_vector<font color="#990000">&amp;</font>                            sample               <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> sparse_rcv<font color="#990000">&amp;</font>                    information_rcv      <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>fixed_solution<font color="#990000">&amp;</font>  solution             <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>                      fixed_lower          <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>                      fixed_upper          <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>                      random_opt
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Try Member Functions.sample_random" id="Try Member Functions.sample_random">sample_random</a></b>
<br>
Called by public <a href="public.htm#sample_random" target="_top"><span style='white-space: nowrap'>sample_random</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">try_sample_random</font></b><font color="#990000">(</font>
          d_vector<font color="#990000">&amp;</font>             sample               <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>    random_ipopt_options <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       fixed_vec            <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       random_lower         <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       random_upper         <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       random_in
     <font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="Other Member Functions" id="Other Member Functions">Other Member Functions</a></big></b>


<br>
<br>
<b><a name="Other Member Functions.fix_con_eval" id="Other Member Functions.fix_con_eval">fix_con_eval</a></b>
<br>
See <a href="fix_con_eval.htm" target="_top"><span style='white-space: nowrap'>fix_con_eval</span></a>

<pre style='display:inline'><tt>
     <font color="#008080">d_vector</font> <b><font color="#000000">fix_con_eval</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec<font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">fix_con_eval_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Other Member Functions.fix_con_jac" id="Other Member Functions.fix_con_jac">fix_con_jac</a></b>
<br>
See <a href="fix_con_jac.htm" target="_top"><span style='white-space: nowrap'>fix_con_jac</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">fix_con_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        fixed_vec   <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> row_out     <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> col_out     <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>              val_out
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">fix_con_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.fix_con_hes" id="Other Member Functions.fix_con_hes">fix_con_hes</a></b>
<br>
See <a href="fix_con_hes.htm" target="_top"><span style='white-space: nowrap'>fix_con_hes</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">fix_con_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        fixed_vec   <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        weight      <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> row_out     <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> col_out     <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>              val_out
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">fix_con_hes_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.fix_like_eval" id="Other Member Functions.fix_like_eval">fix_like_eval</a></b>
<br>
See <a href="fix_like_eval.htm" target="_top"><span style='white-space: nowrap'>fix_like_eval</span></a>

<pre style='display:inline'><tt>
     <font color="#008080">d_vector</font> <b><font color="#000000">fix_like_eval</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec<font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">fix_like_eval_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
</tt></pre>
<br>
<b><a name="Other Member Functions.fix_like_jac" id="Other Member Functions.fix_like_jac">fix_like_jac</a></b>
<br>
See <a href="fix_like_jac.htm" target="_top"><span style='white-space: nowrap'>fix_like_jac</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">fix_like_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        fixed_vec   <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> row_out     <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> col_out     <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>              val_out
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">fix_like_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.fix_like_hes" id="Other Member Functions.fix_like_hes">fix_like_hes</a></b>
<br>
See <a href="fix_like_hes.htm" target="_top"><span style='white-space: nowrap'>fix_like_hes</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">fix_like_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        fixed_vec   <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        weight      <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> row_out     <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> col_out     <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>              val_out
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">fix_like_hes_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.logdet_jac" id="Other Member Functions.logdet_jac">logdet_jac</a></b>
<br>
See <a href="logdet_jac.htm" target="_top"><span style='white-space: nowrap'>logdet_jac</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">logdet_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>       logdet_fix <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>       logdet_ran
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">logdet_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.ran_con_eval" id="Other Member Functions.ran_con_eval">ran_con_eval</a></b>
<br>
See <a href="ran_con_eval.htm" target="_top"><span style='white-space: nowrap'>ran_con_eval</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">ran_con_eval</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>       Au
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_con_eval_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.ran_con_jac" id="Other Member Functions.ran_con_jac">ran_con_jac</a></b>
<br>
See <a href="ran_con_jac.htm" target="_top"><span style='white-space: nowrap'>ran_con_jac</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">ran_con_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>                fixed_vec  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>                random_vec <font color="#990000">,</font>
          sparse_rcv<font color="#990000">&amp;</font>                    jac_info
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_con_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">sample_fixed_1</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.ran_like_jac" id="Other Member Functions.ran_like_jac">ran_like_jac</a></b>
<br>
See <a href="ran_like_jac.htm" target="_top"><span style='white-space: nowrap'>ran_like_jac</span></a>

<pre><tt>     <font color="#008080">a1_vector</font> <b><font color="#000000">ran_like_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font>        fixed_vec   <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font>        random_vec
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_like_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.check_user_ran_jac" id="Other Member Functions.check_user_ran_jac">check_user_ran_jac</a></b>
<br>
See <a href="check_user_ran_jac.htm" target="_top"><span style='white-space: nowrap'>check_user_ran_jac</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">check_user_ran_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       fixed_vec     <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       random_vec
     <font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.ran_obj_eval" id="Other Member Functions.ran_obj_eval">ran_obj_eval</a></b>
<br>
See <a href="ran_obj_eval.htm" target="_top"><span style='white-space: nowrap'>ran_obj_eval</span></a>

<pre><tt>     <font color="#009900">double</font> <b><font color="#000000">ran_obj_eval</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_obj_eval_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.ran_obj_jac" id="Other Member Functions.ran_obj_jac">ran_obj_jac</a></b>
<br>
See <a href="ran_obj_jac.htm" target="_top"><span style='white-space: nowrap'>ran_obj_jac</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">ran_obj_jac</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> fixed_vec  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> random_vec <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>       r_fixed
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">ran_obj_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">der_var_hes</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">delta_ran_obj</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.laplace_obj_hes" id="Other Member Functions.laplace_obj_hes">laplace_obj_hes</a></b>
<br>
See <a href="laplace_obj_hes.htm" target="_top"><span style='white-space: nowrap'>laplace_obj_hes</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">laplace_obj_hes</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>         fixed_vec   <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>         random_vec  <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>         weight      <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>  row_out     <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>  col_out     <font color="#990000">,</font>
          d_vector<font color="#990000">&amp;</font>               val_out
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">laplace_obj_hes_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">laplace_obj_hes</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>
<br>
<b><a name="Other Member Functions.update_factor" id="Other Member Functions.update_factor">update_factor</a></b>
<br>
See <a href="update_factor.htm" target="_top"><span style='white-space: nowrap'>update_factor</span></a>

<pre><tt>     <font color="#009900">void</font> <b><font color="#000000">update_factor</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>         fixed_vec   <font color="#990000">,</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>         random_vec
     <font color="#990000">);</font>
     <b><font color="#0000FF">friend</font></b> <font color="#009900">bool</font> <font color="#990000">::</font><b><font color="#000000">update_factor_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font></tt></pre>

<hr>Input File: include/cppad/mixed/cppad_mixed.hpp

</body>
</html>
