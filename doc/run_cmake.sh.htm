<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>bin/run_cmake.sh: User Configuration Options</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="bin/run_cmake.sh: User Configuration Options">
<meta name="keywords" id="keywords" content=" bin/run_cmake.sh: user configuration options verbose_makefile build_type cppad_prefix eigen_prefix ipopt_prefix debug release extra_cxx_flags cmake_libdir ldlt_cholmod optimize_cppad_function for_hes_sparsity testing speed memory ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_run_cmake.sh_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="example_install.sh.htm" target="_top">Prev</a>
</td><td><a href="check_install.sh.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>install_unix</option>
<option>run_cmake.sh</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_install_unix_htm.js'></script>
</td>
<td>run_cmake.sh</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>bin/run_cmake.sh: User Configuration Options</big></big></b></center>

<br><a href="run_cmake.sh.htm#verbose_makefile" target="_top">verbose_makefile</a>
<br><a href="run_cmake.sh.htm#build_type" target="_top">build_type</a>
<br><a href="run_cmake.sh.htm#cppad_prefix" target="_top">cppad_prefix</a>
<br><a href="run_cmake.sh.htm#eigen_prefix" target="_top">eigen_prefix</a>
<br><a href="run_cmake.sh.htm#ipopt_prefix" target="_top">ipopt_prefix</a>
<br><a href="run_cmake.sh.htm#Debug and Release" target="_top">Debug&nbsp;and&nbsp;Release</a>
<br><a href="run_cmake.sh.htm#extra_cxx_flags" target="_top">extra_cxx_flags</a>
<br><a href="run_cmake.sh.htm#cmake_libdir" target="_top">cmake_libdir</a>
<br><a href="run_cmake.sh.htm#ldlt_cholmod" target="_top">ldlt_cholmod</a>
<br><a href="run_cmake.sh.htm#optimize_cppad_function" target="_top">optimize_cppad_function</a>
<br><a href="run_cmake.sh.htm#for_hes_sparsity" target="_top">for_hes_sparsity</a>
<br><a href="run_cmake.sh.htm#Testing Speed and Memory" target="_top">Testing&nbsp;Speed&nbsp;and&nbsp;Memory</a>
<br><br>
<b><big><a name="verbose_makefile" id="verbose_makefile">verbose_makefile</a></big></b>
<br>
Use 'no' for normal and 'yes' for verbose make output:
<code><font color='blue'><pre style='display:inline'> 
verbose_makefile='no'
</pre></font></code>
<br>
<b><big><a name="build_type" id="build_type">build_type</a></big></b>
<br>
Use either 'debug' or 'release' for the type of this build:
<code><font color='blue'><pre style='display:inline'> 
build_type='debug'
</pre></font></code>
<br>
<b><big><a name="cppad_prefix" id="cppad_prefix">cppad_prefix</a></big></b>
<br>
Prefix where cppad is installed and where
cppad_mixed will be installed:
<code><font color='blue'><pre style='display:inline'> 
cppad_prefix=&quot;$HOME/prefix/cppad_mixed&quot;
</pre></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>cppad_prefix</span></font></i></code>
 ends in <code><font color="blue">/cppad_mixed</font></code>,
<code><font color="blue">run_cmake.sh</font></code> will use a soft link from this prefix to

<code><i><font color="black"><span style='white-space: nowrap'>cppad_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.debug</span></font></code>
 or

<code><i><font color="black"><span style='white-space: nowrap'>cppad_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.release</span></font></code>

depending on the choice for 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
.

<br>
<br>
<b><big><a name="eigen_prefix" id="eigen_prefix">eigen_prefix</a></big></b>
<br>
Prefix where
<a href="install_unix.htm#Special Requirements.eigen" target="_top"><span style='white-space: nowrap'>eigen</span></a>

is installed:
<code><font color='blue'><pre style='display:inline'> 
eigen_prefix=&quot;$HOME/prefix/cppad_mixed/eigen&quot;
</pre></font></code>
If this prefix ends in <code><font color="blue">/cppad_mixed/eigen</font></code>,
<code><font color="blue">bin/install_eigen.sh</font></code> will use a soft link from

<code><font color="blue"><span style='white-space: nowrap'>../</span></font><i><font color="black"><span style='white-space: nowrap'>eigen_prefix</span></font></i></code>
 to

<code><font color="blue"><span style='white-space: nowrap'>../</span></font><i><font color="black"><span style='white-space: nowrap'>eigen_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.debug</span></font></code>
 or

<code><font color="blue"><span style='white-space: nowrap'>../</span></font><i><font color="black"><span style='white-space: nowrap'>eigen_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.release</span></font></code>

depending on the choice for 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
.
The default 
<code><i><font color="black"><span style='white-space: nowrap'>eigen_prefix</span></font></i></code>
 is different from the other prefixes
because compiler warning for this directory are suppress and we want
compiler warnings for the rest of the source code.

<br>
<br>
<b><big><a name="ipopt_prefix" id="ipopt_prefix">ipopt_prefix</a></big></b>
<br>
The prefix where
<a href="install_unix.htm#Special Requirements.Ipopt" target="_top"><span style='white-space: nowrap'>ipopt</span></a>

is installed:
<code><font color='blue'><pre style='display:inline'> 
ipopt_prefix=&quot;$HOME/prefix/cppad_mixed&quot;
</pre></font></code>
If this prefix end in <code><font color="blue">/cppad_mixed</font></code>,
<code><font color="blue">bin/install_ipopt.sh</font></code>,
will use a soft link from 
<code><i><font color="black"><span style='white-space: nowrap'>ipopt_prefix</span></font></i></code>
 to

<code><i><font color="black"><span style='white-space: nowrap'>ipopt_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.debug</span></font></code>
 or

<code><i><font color="black"><span style='white-space: nowrap'>ipopt_prefix</span></font></i><font color="blue"><span style='white-space: nowrap'>.release</span></font></code>

depending on the choice for 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
.

<br>
<br>
<b><big><a name="Debug and Release" id="Debug and Release">Debug and Release</a></big></b>
<br>
If a soft link is used for the install,
the same technique will be used to map the <code><font color="blue">build</font></code>
directory to the debug or release version.
If you are using both a debug and release versions of cppad_mixed,
both versions of the
<a href="install_unix.htm#Special Requirements" target="_top"><span style='white-space: nowrap'>special&nbsp;requirements</span></a>

will need to be installed.

<br>
<br>
<b><big><a name="extra_cxx_flags" id="extra_cxx_flags">extra_cxx_flags</a></big></b>
<br>
Extra C++ flags used to compile and test
<code><font color='blue'><pre style='display:inline'> 
extra_cxx_flags='-Wpedantic -std=c++11 -Wall -Wshadow -Wconversion'
</pre></font></code>
<br>
<b><big><a name="cmake_libdir" id="cmake_libdir">cmake_libdir</a></big></b>
<br>
Sub-directory of each prefix where libraries are installed.
<code><font color='blue'><pre style='display:inline'> 
cmake_libdir='lib64'
</pre></font></code>
<br>
<b><big><a name="ldlt_cholmod" id="ldlt_cholmod">ldlt_cholmod</a></big></b>
<br>
If yes, use <a href="ldlt_cholmod.htm" target="_top"><span style='white-space: nowrap'>ldlt_cholmod</span></a>
 LDLT factorization where possible.
Otherwise always use <a href="ldlt_eigen.htm" target="_top"><span style='white-space: nowrap'>ldlt_eigen</span></a>
 for LDLT factorization.
<code><font color='blue'><pre style='display:inline'> 
ldlt_cholmod='yes'
</pre></font></code>
<br>
<b><big><a name="optimize_cppad_function" id="optimize_cppad_function">optimize_cppad_function</a></big></b>
<br>
If yes, the operation sequence for certain CppAD functions
will be optimized. This makes the code run faster but in some cases
it can make debugging more complicated. It is suggested that you use
<code><font color="blue">no</font></code> when 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
 is <code><font color="blue">debug</font></code> and <code><font color="blue">yes</font></code>
when 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
 is <code><font color="blue">release</font></code>.
<code><font color='blue'><pre style='display:inline'> 
optimize_cppad_function='no'
</pre></font></code>
<br>
<b><big><a name="for_hes_sparsity" id="for_hes_sparsity">for_hes_sparsity</a></big></b>
<br>
If yes, user <code><font color="blue">for_hes_sparsity</font></code> to compute sparsity w.r.t. random
effects (otherwise use <code><font color="blue">rev_hes_sparsity</font></code>).
<code><font color='blue'><pre style='display:inline'> 
for_hes_sparsity='yes'
</pre></font></code>
<br>
<b><big><a name="Testing Speed and Memory" id="Testing Speed and Memory">Testing Speed and Memory</a></big></b>
<br>
If you wish to test the speed or memory used by <code><font color="blue">cppad_mixed</font></code>,
set 
<code><i><font color="black"><span style='white-space: nowrap'>build_type</span></font></i></code>
 to <code><font color="blue">release</font></code>, include the <code><font color="blue">-g</font></code> flag
in 
<code><i><font color="black"><span style='white-space: nowrap'>extra_cxx_flags</span></font></i></code>
. Then execute the following commands:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin/install_cppad.sh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin/run_cmake.sh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;build;&nbsp;make&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>program</span></font></i><font color="blue"><span style='white-space: nowrap'>;&nbsp;cd&nbsp;..<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin/</span></font><i><font color="black"><span style='white-space: nowrap'>program</span></font></i><font color="blue"><span style='white-space: nowrap'>.sh&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>test2run</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>program</span></font></i></code>
 is
<a href="ar1_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>ar1_xam</span></a>
 or <a href="ar1_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>capture_xam</span></a>

and 
<code><i><font color="black"><span style='white-space: nowrap'>test2run</span></font></i></code>
 is
<code><font color="blue">normal</font></code>, <code><font color="blue">callgrind</font></code>, or <code><font color="blue">massif</font></code>.


<hr>Input File: bin/run_cmake.sh

</body>
</html>
