<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>ran_con_jac: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="ran_con_jac: Example and Test">
<meta name="keywords" id="keywords" content=" ran_con_jac: example test private model ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ran_con_jac.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ran_con_jac.htm" target="_top">Prev</a>
</td><td><a href="ran_obj_eval.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>base_class</option>
<option>private</option>
<option>ran_con_jac</option>
<option>ran_con_jac.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_17</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>base_class-&gt;</option>
<option>public</option>
<option>private</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>private-&gt;</option>
<option>pack</option>
<option>unpack</option>
<option>init_ran_jac</option>
<option>check_user_ran_jac</option>
<option>init_ran_hes</option>
<option>check_user_ran_hes</option>
<option>init_laplace_obj</option>
<option>init_ldlt_ran_hes</option>
<option>init_fix_con</option>
<option>init_fix_like</option>
<option>init_hes_cross</option>
<option>init_laplace_obj_hes</option>
<option>init_ran_like</option>
<option>fix_con_eval</option>
<option>fix_con_hes</option>
<option>fix_con_jac</option>
<option>fix_like_eval</option>
<option>fix_like_hes</option>
<option>fix_like_jac</option>
<option>logdet_jac</option>
<option>ran_like_jac</option>
<option>ran_con_eval</option>
<option>ran_con_jac</option>
<option>ran_obj_eval</option>
<option>ran_obj_jac</option>
<option>laplace_obj_hes</option>
<option>update_factor</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ran_con_jac-&gt;</option>
<option>ran_con_jac.cpp</option>
</select>
</td>
<td>ran_con_jac.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Private</option>
<option>Model</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@


<center><b><big><big>ran_con_jac: Example and Test</big></big></b></center>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This example is not part of the
<a href="public.htm" target="_top"><span style='white-space: nowrap'>cppad_mixed&nbsp;public&nbsp;API</span></a>
.

<br>
<br>
<b><big><a name="Model" id="Model">Model</a></big></b>

<br>
<small>@[@

	\B{p}( y_i | \theta , u ) \sim \B{N} ( u_i + \theta_0 , \theta_1^2 )

@]@</small><small>@[@

	\B{p}( u_i | \theta ) \sim \B{N} ( 0 , 1 )

@]@</small><small>@[@

	A = [ 1 , \cdots , 1 ]

@]@</small>It follows that the <code><i>i</i></code>-th component of the
optimal random effects minimize the function
<small>@[@

	0.5 ( u_i + theta_0 - y_i )^2 / \theta_1^2 + 0.5 u_i^2

@]@</small>
Taking the derivative w.r.t <small>@(@
u_i
@)@</small> and setting it equal to zero
we have
<small>@[@

	\hat{u}_i ( \theta ) = ( y_i - \theta_0 ) / ( 1 + \theta_1^2 )

@]@</small>
The random constraint function is
<small>@[@

	\sum_i \hat{u}_i ( \theta )
	=
	\sum_i
	( y_i - \theta_0 ) / ( 1 + \theta_1^2 )

@]@</small>
The partial w.r.t. <small>@(@
\theta_0
@)@</small> is
<small>@[@

	- \sum_i  1.0 / ( 1 + \theta_1^2 )

@]@</small>
The partial w.r.t. <small>@(@
\theta_1
@)@</small> is
<small>@[@

	- 2 \sum_i ( y_i - \theta_0 ) \theta_1 / ( 1 + \theta_1^2 )

@]@</small>

<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/cppad_mixed.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>log<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>sparse_mat_info<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a1_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a2_double<font color="#990000">;</font>

     <b><font color="#0000FF">class</font></b> <font color="#008080">mixed_derived</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_mixed <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> y_<font color="#990000">;</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// constructor</font></i>
          <b><font color="#000000">mixed_derived</font></b><font color="#990000">(</font>
               <font color="#008080">size_t</font>                               n_fixed       <font color="#990000">,</font>
               <font color="#008080">size_t</font>                               n_random      <font color="#990000">,</font>
               <font color="#009900">bool</font>                                 quasi_fixed   <font color="#990000">,</font>
               <font color="#009900">bool</font>                                 bool_sparsity <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>sparse_rcv<font color="#990000">&amp;</font>      A_rcv          <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                y             <font color="#990000">)</font> <font color="#990000">:</font>
               <b><font color="#000000">cppad_mixed</font></b><font color="#990000">(</font>
                    n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv
               <font color="#990000">),</font>
               <b><font color="#000000">y_</font></b><font color="#990000">(</font>y<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#000000">assert</font></b><font color="#990000">(</font> n_fixed <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">);</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">// implementation of ran_likelihood</font></i>
          <b><font color="#0000FF">virtual</font></b> <font color="#008080">vector&lt;a2_double&gt;</font> <b><font color="#000000">ran_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>a2_double<font color="#990000">&gt;&amp;</font> theta  <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>a2_double<font color="#990000">&gt;&amp;</font> u      <font color="#990000">)</font>
          <font color="#FF0000">{</font>    <font color="#008080">vector&lt;a2_double&gt;</font> <b><font color="#000000">vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

               <i><font color="#9A1900">// initialize part of log-density that is always smooth</font></i>
               vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>

               <i><font color="#9A1900">// pi</font></i>
               <font color="#008080">a2_double</font> sqrt_2pi <font color="#990000">=</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font>
                     CppAD<font color="#990000">::</font><b><font color="#000000">sqrt</font></b><font color="#990000">(</font><font color="#993399">8.0</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font><b><font color="#000000">atan</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">)</font>
               <font color="#990000">));</font>

               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> y_<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> i<font color="#990000">++)</font>
               <font color="#FF0000">{</font>    <font color="#008080">a2_double</font> mu     <font color="#990000">=</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">+</font> theta<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
                    <font color="#008080">a2_double</font> sigma  <font color="#990000">=</font> theta<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
                    <font color="#008080">a2_double</font> res    <font color="#990000">=</font> <font color="#990000">(</font>y_<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> mu<font color="#990000">)</font> <font color="#990000">/</font> sigma<font color="#990000">;</font>

                    <i><font color="#9A1900">// p(y_i | u, theta)</font></i>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> <b><font color="#000000">log</font></b><font color="#990000">(</font>sqrt_2pi <font color="#990000">*</font> sigma<font color="#990000">)</font> <font color="#990000">+</font> res<font color="#990000">*</font>res <font color="#990000">/</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">);</font>

                    <i><font color="#9A1900">// p(u_i | theta)</font></i>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> <b><font color="#000000">log</font></b><font color="#990000">(</font>sqrt_2pi<font color="#990000">)</font> <font color="#990000">+</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> u<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">/</font> <b><font color="#000000">a2_double</font></b><font color="#990000">(</font><font color="#993399">2.0</font><font color="#990000">);</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> vec<font color="#990000">;</font>
          <font color="#FF0000">}</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">//</font></i>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">ran_con_jac_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
     <font color="#009900">bool</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>

     <font color="#008080">size_t</font> n_data   <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_fixed  <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> n_random <font color="#990000">=</font> n_data<font color="#990000">;</font>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">data</font></b><font color="#990000">(</font>n_data<font color="#990000">),</font> <b><font color="#000000">fixed_vec</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">random_vec</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">uhat</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>

     fixed_vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
     fixed_vec<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_data<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    data<font color="#990000">[</font>i<font color="#990000">]</font>       <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">);</font>
          random_vec<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>

     <i><font color="#9A1900">// lower and upper limits for random effects</font></i>
     <font color="#009900">double</font> inf <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font>
     <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">random_lower</font></b><font color="#990000">(</font>n_random<font color="#990000">),</font> <b><font color="#000000">random_upper</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    random_lower<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font>inf<font color="#990000">;</font>
          random_upper<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">+</font>inf<font color="#990000">;</font>
     <font color="#FF0000">}</font>

     <i><font color="#9A1900">// constraint matrix will sum all the random effects</font></i>
     <i><font color="#9A1900">// nr = 1, nc = n_random, nnz = n_random</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_rc</font> <b><font color="#000000">A_pattern</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> n_random<font color="#990000">,</font> n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
          A_pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>j<font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">,</font> j<font color="#990000">);</font>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_rcv</font> <b><font color="#000000">A_rcv</font></b><font color="#990000">(</font>A_pattern<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> j<font color="#990000">++)</font>
          A_rcv<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>j<font color="#990000">,</font> <font color="#993399">1.0</font><font color="#990000">);</font>

     <i><font color="#9A1900">// mixed_object</font></i>
     <font color="#009900">bool</font> quasi_fixed   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     <font color="#009900">bool</font> bool_sparsity <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#008080">mixed_derived</font> <b><font color="#000000">mixed_object</font></b><font color="#990000">(</font>
          n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv<font color="#990000">,</font> data
     <font color="#990000">);</font>
     mixed_object<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>fixed_vec<font color="#990000">,</font> random_vec<font color="#990000">);</font>

     <i><font color="#9A1900">// optimize the random effects</font></i>
     std<font color="#990000">::</font><font color="#008080">string</font> options<font color="#990000">;</font>
     options <font color="#990000">+=</font> <font color="#FF0000">"Integer print_level 0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
     options <font color="#990000">+=</font> <font color="#FF0000">"Numeric tol         1e-10</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
     options <font color="#990000">+=</font> <font color="#FF0000">"String  sb          yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
     options <font color="#990000">+=</font> <font color="#FF0000">"String  derivative_test second-order</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
     uhat <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">optimize_random</font></b><font color="#990000">(</font>
          options<font color="#990000">,</font> fixed_vec<font color="#990000">,</font> random_lower<font color="#990000">,</font> random_upper<font color="#990000">,</font> random_vec
     <font color="#990000">);</font>

     <i><font color="#9A1900">// must factor f_{u,u} (theta, uhat)</font></i>
     mixed_object<font color="#990000">.</font><b><font color="#000000">update_factor</font></b><font color="#990000">(</font>fixed_vec<font color="#990000">,</font> uhat<font color="#990000">);</font>

     <i><font color="#9A1900">// compute sparstiy pattern for jacobian of random constraints</font></i>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">sparse_rcv</font> jac_rcv<font color="#990000">;</font>
     mixed_object<font color="#990000">.</font><b><font color="#000000">ran_con_jac</font></b><font color="#990000">(</font>fixed_vec<font color="#990000">,</font> uhat<font color="#990000">,</font> jac_rcv<font color="#990000">);</font>

     <i><font color="#9A1900">// check number of possibly non_zero elements.</font></i>
     ok <font color="#990000">&amp;=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// partial w.r.t. theta_0</font></i>
     ok <font color="#990000">&amp;=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// partial w.r.t. theta_1</font></i>
     ok <font color="#990000">&amp;=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>

     <i><font color="#9A1900">// Now compute the sparse Jacobian values</font></i>
     mixed_object<font color="#990000">.</font><b><font color="#000000">ran_con_jac</font></b><font color="#990000">(</font>fixed_vec<font color="#990000">,</font> uhat<font color="#990000">,</font> jac_rcv<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <font color="#009900">double</font> jac_0 <font color="#990000">=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">];</font>
     <font color="#009900">double</font> jac_1 <font color="#990000">=</font> jac_rcv<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()[</font><font color="#993399">1</font><font color="#990000">];</font>

     <i><font color="#9A1900">// check results</font></i>
     <font color="#009900">double</font> check_0 <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <font color="#009900">double</font> check_1 <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    <font color="#009900">double</font> theta_0   <font color="#990000">=</font> fixed_vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
          <font color="#009900">double</font> theta_1   <font color="#990000">=</font> fixed_vec<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
          <font color="#009900">double</font> theta_1sq <font color="#990000">=</font> theta_1 <font color="#990000">*</font> theta_1<font color="#990000">;</font>
          check_0 <font color="#990000">-=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> <font color="#990000">(</font><font color="#993399">1.0</font> <font color="#990000">+</font> theta_1sq <font color="#990000">);</font>
          check_1 <font color="#990000">-=</font> <font color="#990000">(</font>data<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> theta_0<font color="#990000">)</font> <font color="#990000">*</font> theta_1 <font color="#990000">/</font> <font color="#990000">(</font><font color="#993399">1.0</font> <font color="#990000">+</font> theta_1sq <font color="#990000">);</font>
     <font color="#FF0000">}</font>

     <i><font color="#9A1900">// used 1e-10 for random_optmize tolerance</font></i>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font> jac_0 <font color="#990000">/</font> check_0 <font color="#990000">-</font> <font color="#993399">1.0</font> <font color="#990000">)</font> <font color="#990000">&lt;</font> <font color="#993399">1e-9</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font> jac_1 <font color="#990000">/</font> check_1 <font color="#990000">-</font> <font color="#993399">1.0</font> <font color="#990000">)</font> <font color="#990000">&lt;</font> <font color="#993399">1e-9</font><font color="#990000">;</font>

     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/private/ran_con_jac.cpp

</body>
</html>
