<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Newton Step and Log Determinant Calculation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Newton Step and Log Determinant Calculation">
<meta name="keywords" id="keywords" content=" newton step log determinant calculation syntax private purpose constructor destructor initialize a1fun hes_rcv theta u size_var eval a1_theta_u_v a1_logdet_step checkpoint example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_newton_step_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="manage_gsl_rng.cpp.htm" target="_top">Prev</a>
</td><td><a href="newton_step.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>namespace</option>
<option>newton_step</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cppad_mixed-&gt;</option>
<option>install_unix</option>
<option>theory</option>
<option>base_class</option>
<option>namespace</option>
<option>user</option>
<option>whats_new_17</option>
<option>wish_list</option>
<option>math_notation</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>namespace-&gt;</option>
<option>typedef</option>
<option>configure.hpp</option>
<option>exception</option>
<option>fixed_solution</option>
<option>ipopt_app_status</option>
<option>ipopt_fixed</option>
<option>ldlt_cholmod</option>
<option>ldlt_eigen</option>
<option>manage_gsl_rng</option>
<option>newton_step</option>
<option>sparse_hes_rcv</option>
<option>sparse_hes_info</option>
<option>sparse_jac_rcv</option>
<option>sparse_mat_info</option>
<option>triple2eigen</option>
<option>undetermined</option>
<option>sparse_low_tri_sol</option>
<option>sparse_up_tri_sol</option>
<option>sparse_scale_diag</option>
<option>sparse_low2sym</option>
<option>sparse_mat2low</option>
<option>sparse_eigen2info</option>
<option>sparse_info2eigen</option>
<option>sparse_ad_cholesky</option>
<option>sparse_print</option>
<option>sparsity_print</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>newton_step-&gt;</option>
<option>newton_step.cpp</option>
<option>newton_step_algo_ctor</option>
<option>newton_step_algo</option>
<option>newton_step_ctor</option>
<option>newton_step_initialize</option>
<option>newton_step_size_var</option>
<option>newton_step_eval</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Private</option>
<option>Purpose</option>
<option>Constructor</option>
<option>Destructor</option>
<option>initialize</option>
<option>---..a1fun</option>
<option>---..hes_rcv</option>
<option>theta</option>
<option>u</option>
<option>size_var</option>
<option>eval</option>
<option>---..a1_theta_u_v</option>
<option>---..a1_logdet_step</option>
<option>---..Checkpoint</option>
<option>Example</option>
<option>Contents</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Newton Step and Log Determinant Calculation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>CppAD::mixed::newton_step&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>newton_object</span></font></i><font color="blue"><span style='white-space: nowrap'>()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>newton_object</span></font></i><font color="blue"><span style='white-space: nowrap'>.initialize(</span></font><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hes_rcv</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>sv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;newton_object</span></font><i><font color="black"><span style='white-space: nowrap'>.size_var()<br>
</span></font></i></code>

<code><i><font color="black"><span style='white-space: nowrap'>newton_object</span></font></i><font color="blue"><span style='white-space: nowrap'>.eval(</span></font><i><font color="black"><span style='white-space: nowrap'>a1_theta_u_v</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Private" id="Private">Private</a></big></b>
<br>
This class is an implementation detail and not part of the
<a href="namespace.htm#Private" target="_top"><span style='white-space: nowrap'>CppAD::mixed</span></a>
 user API.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This stores the operation sequence corresponding to one Newton step
and a log-determinant calculation.

<br>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>
<br>
The sparse Hessian checkpoint object constructor

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newton_step&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>newton_object</span></font></i><font color="blue"><span style='white-space: nowrap'>()<br>
</span></font></code>
creates a <code><font color="blue">CppAD::checkpoint&lt;double&gt;</font></code> object for evaluating
the log of the determinant
<small>@[@

( \theta , u ) \rightarrow \log \det [ f_{uu} ( \theta , u )  ]

@]@</small>
and the Newton step
<small>@[@

( \theta , u , v ) \rightarrow f_{uu} ( \theta , u )^{-1} v

@]@</small>

<br>
<br>
<b><big><a name="Destructor" id="Destructor">Destructor</a></big></b>
<br>
The 
<code><i><font color="black"><span style='white-space: nowrap'>newton_object</span></font></i></code>
 must still exist (not be destructed)
for as long as any <code><font color="blue">CppAD::ADFun</font></code> objects use its operations.

<br>
<br>
<b><big><a name="initialize" id="initialize">initialize</a></big></b>
<br>
The 
<code><i><font color="black"><span style='white-space: nowrap'>newton_object</span></font></i></code>
 must be initialized,
before any calls to its <code><font color="blue">eval</font></code> routine, using the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newton_object.initialize(</span></font><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hes_rcv</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><a name="initialize.a1fun" id="initialize.a1fun">a1fun</a></b>
<br>
This <code><font color="blue">initialize</font></code> argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::ADFun&lt;&nbsp;CppAD::AD&lt;double&gt;&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
This is a recording of the function <small>@(@
f( \theta , u)
@)@</small>
for which we are evaluating the Newton step and log determinant for.
The routine <a href="pack.htm" target="_top"><span style='white-space: nowrap'>pack(theta,&nbsp;u)</span></a>
 is used to
convert the pair of vectors into the argument vector for 
<code><i><font color="black"><span style='white-space: nowrap'>a1fun</span></font></i></code>
.

<br>
<br>
<b><a name="initialize.hes_rcv" id="initialize.hes_rcv">hes_rcv</a></b>
<br>
This <code><font color="blue">initialize</font></code> argument has prototype
<code><font color="blue">%
	const CppAD::mixed::sparse_rcv&amp; %hes_rcv%
%</font></code>
It is the
<a href="typedef.htm#Sparse Types.sparse_rcv" target="_top"><span style='white-space: nowrap'>sparse_rcv</span></a>

information for the Hessian with respect to the
random effects (as a function of the fixed and random effects); i.e.
<small>@(@
f_uu ( \theta , u)
@)@</small>.

<br>
<br>
<b><big><a name="theta" id="theta">theta</a></big></b>
<br>
This <code><font color="blue">initialize</font></code> argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a value for <small>@(@
\theta
@)@</small>
at which we can evaluate the Newton step and
log determinant.

<br>
<br>
<b><big><a name="u" id="u">u</a></big></b>
<br>
This <code><font color="blue">initialize</font></code> argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a value for <small>@(@
u
@)@</small>
at which we can evaluate the Newton step and
log determinant.

<br>
<br>
<b><big><a name="size_var" id="size_var">size_var</a></big></b>
<br>
The return value for this member function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sv</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the number of variables in the tape used to represent the
CppAD checkpoint function.
If the  <code><font color="blue">initialize</font></code> member function has not yet been called,
the return value is 
<code><i><font color="black"><span style='white-space: nowrap'>sv</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0</span></font></code>
.

<br>
<br>
<b><big><a name="eval" id="eval">eval</a></big></b>
<br>
The <code><font color="blue">initialize</font></code> member function must be called before
the <code><font color="blue">eval</font></code> member function is used.

<br>
<br>
<b><a name="eval.a1_theta_u_v" id="eval.a1_theta_u_v">a1_theta_u_v</a></b>
<br>
This <code><font color="blue">eval</font></code> argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;&nbsp;CppAD::AD&lt;double&gt;&nbsp;&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_theta_u_v</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is a point at which we are evaluating the Newton step
and log determinant.
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>theta</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;+&nbsp;2&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

and the order of its elements are <small>@(@
\theta
@)@</small>, followed by <small>@(@
u
@)@</small>
followed by <small>@(@
v
@)@</small>.

<br>
<br>
<b><a name="eval.a1_logdet_step" id="eval.a1_logdet_step">a1_logdet_step</a></b>
<br>
This <code><font color="blue">eval</font></code> argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;&nbsp;CppAD::AD&lt;double&gt;&nbsp;&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It size is 
<code><font color="blue"><span style='white-space: nowrap'>1&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
.
The input value of its elements does not matter.
Upon return,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]&nbsp;=</span></font></code>
 <small>@(@
\log \det [ f_{uu} ( \theta , u )  ]
@)@</small>
<code><span style='white-space: nowrap'><br>
</span></code>and for 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1&nbsp;,</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a1_logdet_step</span></font></i><font color="blue"><span style='white-space: nowrap'>[j]&nbsp;=</span></font></code>
 <small>@(@
s_{j-1}
@)@</small>
<code><span style='white-space: nowrap'><br>
</span></code>where <small>@(@
s
@)@</small> is the Newton step; i.e.,
<small>@[@

	s = f_{uu} ( \theta , u )^{-1} v

@]@</small>

<br>
<br>
<b><a name="eval.Checkpoint" id="eval.Checkpoint">Checkpoint</a></b>
<br>
If <a href="run_cmake.sh.htm#checkpoint_newton_step" target="_top"><span style='white-space: nowrap'>checkpoint_newton_step</span></a>
 is
true, the operation of one Newton step is checkpointed; i.e.,
only one Newton step is taped.
Otherwise, each of the repeated Newton steps is recorded as part of the
corresponding <code><font color="blue">CppAD::AD&lt;double&gt;</font></code> operations.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="newton_step.cpp.htm" target="_top"><span style='white-space: nowrap'>newton_step.cpp</span></a>
 is an example
and test of <code><font color="blue">newton_step</font></code>.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="newton_step.cpp.htm" target="_top">newton_step.cpp</a></td><td>newton_step:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="newton_step_algo_ctor.htm" target="_top">newton_step_algo_ctor</a></td><td>Newton&nbsp;Step&nbsp;Algorithm&nbsp;Constructor</td></tr><tr><td><a href="newton_step_algo.htm" target="_top">newton_step_algo</a></td><td>Newton&nbsp;Step&nbsp;Algorithm&nbsp;Evaluation</td></tr><tr><td><a href="newton_step_ctor.htm" target="_top">newton_step_ctor</a></td><td>Newton&nbsp;Step&nbsp;Checkpoint&nbsp;Function&nbsp;Constructor</td></tr><tr><td><a href="newton_step_initialize.htm" target="_top">newton_step_initialize</a></td><td>Initialize&nbsp;the&nbsp;Newton&nbsp;Step&nbsp;Checkpoint&nbsp;Function</td></tr><tr><td><a href="newton_step_size_var.htm" target="_top">newton_step_size_var</a></td><td>Number&nbsp;of&nbsp;Variables&nbsp;in&nbsp;Checkpoint&nbsp;Function</td></tr><tr><td><a href="newton_step_eval.htm" target="_top">newton_step_eval</a></td><td>Using&nbsp;the&nbsp;Newton&nbsp;Step&nbsp;Checkpoint&nbsp;Function</td></tr></table>
<hr>Input File: include/cppad/mixed/newton_step.hpp

</body>
</html>
