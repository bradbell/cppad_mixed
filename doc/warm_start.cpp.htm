<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Warm Starting Optimization: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Warm Starting Optimization: Example and Test">
<meta name="keywords" id="keywords" content=" warm starting optimization: example test model bounds maximum iterations optimizer trace ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_warm_start.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_mixed" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="opt_ran_nan.cpp.htm" target="_top">Prev</a>
</td><td><a href="release_notes.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_mixed</option>
<option>user_examples</option>
<option>warm_start.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_mixed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_user_examples_htm.js'></script>
</td>
<td>warm_start.cpp</td>
</tr></table><br>
@(@\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\W}[1]{ \; #1 \; }@)@<center><b><big><big>Warm Starting Optimization: Example and Test</big></big></b></center>

<br><a href="warm_start.cpp.htm#Model" target="_top">Model</a>
<br><a href="warm_start.cpp.htm#Bounds" target="_top">Bounds</a>
<br><a href="warm_start.cpp.htm#Maximum Iterations" target="_top">Maximum&nbsp;Iterations</a>
<br><a href="warm_start.cpp.htm#Optimizer Trace" target="_top">Optimizer&nbsp;Trace</a>
<br>.

<br>
<br>
<b><big><a name="Model" id="Model">Model</a></big></b>

<br>
<small>@[@

	\B{p}( z_i | \theta ) \sim \B{N} ( \theta_i , 1 )

@]@</small>with no prior on <small>@(@
\theta
@)@</small>.
The corresponding fixed likelihood
<a href="theory.htm#Fixed Likelihood, g(theta)" target="_top"><span style='white-space: nowrap'>g(theta)</span></a>

is
<small>@[@

g( \theta ) = \frac{1}{2} \sum_{i} \left[
	\log ( 2 \pi ) + ( z_i - \theta_i )^2
\right]

@]@</small>
We do not include the constant term <small>@(@
\log( 2 \pi )
@)@</small>
in the fixed likelihood.
The optimal solution (with no constraints) is
<small>@[@

	\hat{\theta}_i = z_i

@]@</small>

<br>
<br>
<b><big><a name="Bounds" id="Bounds">Bounds</a></big></b>
<br>
We add lower and upper bounds that are not active at the optimal solution.
To be specific
<small>@[@

	0 \leq \theta_i \leq z_i + 1

@]@</small>

<br>
<br>
<b><big><a name="Maximum Iterations" id="Maximum Iterations">Maximum Iterations</a></big></b>
<br>
We use 5 for the maximum number of iterations so that the optimization
problem does not solve on the first try.
A warm start is used and the problem does solve within the limit
of another 5 iterations.

<br>
<br>
<b><big><a name="Optimizer Trace" id="Optimizer Trace">Optimizer Trace</a></big></b>
<br>
This example uses the optimizer trace information; see
<a href="fixed_solution.htm#trace_vec" target="_top"><span style='white-space: nowrap'>trace_vec</span></a>
.

<code><font color="blue">
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/mixed/cppad_mixed.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>log<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_sparse_rcv<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a1_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>d_vector<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font>a1_vector<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">class</font></b> <font color="#008080">mixed_derived</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> cppad_mixed <font color="#FF0000">{</font>
     <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
          <b><font color="#0000FF">const</font></b> <font color="#008080">size_t</font>          n_fixed_<font color="#990000">;</font>
          <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>       z_<font color="#990000">;</font>
     <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
          <i><font color="#9A1900">// constructor</font></i>
          <b><font color="#000000">mixed_derived</font></b><font color="#990000">(</font>
               <font color="#008080">size_t</font>                 n_fixed        <font color="#990000">,</font>
               <font color="#008080">size_t</font>                 n_random       <font color="#990000">,</font>
               <font color="#009900">bool</font>                   quasi_fixed    <font color="#990000">,</font>
               <font color="#009900">bool</font>                   bool_sparsity  <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> d_sparse_rcv<font color="#990000">&amp;</font>    A_rcv          <font color="#990000">,</font>
               <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font>        z              <font color="#990000">)</font> <font color="#990000">:</font>
               <b><font color="#000000">cppad_mixed</font></b><font color="#990000">(</font>
                    n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv
               <font color="#990000">)</font>                    <font color="#990000">,</font>
               <b><font color="#000000">n_fixed_</font></b><font color="#990000">(</font>n_fixed<font color="#990000">)</font>    <font color="#990000">,</font>
               <b><font color="#000000">z_</font></b><font color="#990000">(</font>z<font color="#990000">)</font>
          <font color="#FF0000">{</font>    <b><font color="#000000">assert</font></b><font color="#990000">(</font>z<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_fixed<font color="#990000">);</font> <font color="#FF0000">}</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// implementation of fix_likelihood as p(z|theta)</font></i>
          <font color="#008080">a1_vector</font> <b><font color="#000000">fix_likelihood</font></b><font color="#990000">(</font>
               <b><font color="#0000FF">const</font></b> a1_vector<font color="#990000">&amp;</font>         fixed_vec  <font color="#990000">)</font> override
          <font color="#FF0000">{</font>
               <i><font color="#9A1900">// initialize log-density</font></i>
               <font color="#008080">a1_vector</font> <b><font color="#000000">vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
               vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>

               <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed_<font color="#990000">;</font> j<font color="#990000">++)</font>
               <font color="#FF0000">{</font>
                    <i><font color="#9A1900">// Data term p(z|theta)</font></i>
                    <font color="#008080">a1_double</font> res  <font color="#990000">=</font> <font color="#990000">(</font>z_<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">-</font> fixed_vec<font color="#990000">[</font>j<font color="#990000">]);</font>
                    vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>    <font color="#990000">+=</font> res <font color="#990000">*</font> res <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">;</font>
               <font color="#FF0000">}</font>
               <b><font color="#0000FF">return</font></b> vec<font color="#990000">;</font>
          <font color="#FF0000">}</font>
          <i><font color="#9A1900">//</font></i>
          <i><font color="#9A1900">// warning</font></i>
          <font color="#009900">bool</font>   suppress_warning_<font color="#990000">;</font>
          <font color="#008080">size_t</font> warning_count_<font color="#990000">;</font>
          <font color="#009900">void</font> <b><font color="#000000">warning</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> warning_message<font color="#990000">)</font> override
          <font color="#FF0000">{</font>    <font color="#990000">++</font>warning_count_<font color="#990000">;</font>
               <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> suppress_warning_ <font color="#990000">)</font>
               std<font color="#990000">::</font>cerr <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"cppad_mixed warning: "</font> <font color="#990000">&lt;&lt;</font> warning_message <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
          <font color="#FF0000">}</font>
     <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">warm_start_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
     <font color="#009900">bool</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <font color="#009900">double</font> inf <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font>
     <font color="#009900">double</font> tol <font color="#990000">=</font> <font color="#993399">1e-8</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// n_fixed</font></i>
     <font color="#008080">size_t</font> n_fixed  <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// z</font></i>
     <font color="#008080">d_vector</font> <b><font color="#000000">z</font></b><font color="#990000">(</font>n_fixed<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> j<font color="#990000">++)</font>
          z<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// fixed_lower, fixed_in, fixed_upper</font></i>
     <font color="#008080">d_vector</font> <b><font color="#000000">fixed_lower</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">fixed_in</font></b><font color="#990000">(</font>n_fixed<font color="#990000">),</font> <b><font color="#000000">fixed_upper</font></b><font color="#990000">(</font>n_fixed<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> j<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    fixed_lower<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          fixed_in<font color="#990000">[</font>j<font color="#990000">]</font>    <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
          fixed_upper<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> z<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">+</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// n_random, random_in</font></i>
     <font color="#008080">size_t</font> n_random <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     <font color="#008080">d_vector</font> <b><font color="#000000">random_in</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// fix_constraint_lower, fix_constraint_upper</font></i>
     <font color="#008080">d_vector</font> <b><font color="#000000">fix_constraint_lower</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">),</font> <b><font color="#000000">fix_constraint_upper</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// A_rcv</font></i>
     <font color="#008080">d_sparse_rcv</font> A_rcv<font color="#990000">;</font> <i><font color="#9A1900">// empty matrix</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// mixed_object</font></i>
     <font color="#009900">bool</font> quasi_fixed   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     <font color="#009900">bool</font> bool_sparsity <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     <font color="#008080">mixed_derived</font> <b><font color="#000000">mixed_object</font></b><font color="#990000">(</font>
               n_fixed<font color="#990000">,</font> n_random<font color="#990000">,</font> quasi_fixed<font color="#990000">,</font> bool_sparsity<font color="#990000">,</font> A_rcv<font color="#990000">,</font> z
     <font color="#990000">);</font>
     mixed_object<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">(</font>fixed_in<font color="#990000">,</font> random_in<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// optimize the fixed effects using quasi-Newton method</font></i>
     std<font color="#990000">::</font><font color="#008080">string</font> fixed_ipopt_options <font color="#990000">=</font>
          <font color="#FF0000">"Integer print_level               0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  sb                        yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test           first-order</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test_print_all yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"Numeric tol                       1e-8</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"Integer max_iter                  5</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
     <font color="#990000">;</font>
     std<font color="#990000">::</font><font color="#008080">string</font> random_ipopt_options <font color="#990000">=</font>
          <font color="#FF0000">"Integer print_level 0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  sb          yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"String  derivative_test second-order</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
     <font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// random_lower, random_upper</font></i>
     <font color="#008080">d_vector</font> <b><font color="#000000">random_lower</font></b><font color="#990000">(</font>n_random<font color="#990000">),</font> <b><font color="#000000">random_upper</font></b><font color="#990000">(</font>n_random<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_random<font color="#990000">;</font> i<font color="#990000">++)</font>
     <font color="#FF0000">{</font>    random_lower<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font>inf<font color="#990000">;</font>
          random_upper<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">+</font>inf<font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <i><font color="#9A1900">// fixed_in</font></i>
     <font color="#008080">d_vector</font> fixed_scale <font color="#990000">=</font> fixed_in<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// first optimization attempt (max_iter not large enough)</font></i>
     mixed_object<font color="#990000">.</font>warning_count_    <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     mixed_object<font color="#990000">.</font>suppress_warning_ <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     CppAD<font color="#990000">::</font>mixed<font color="#990000">::</font><font color="#008080">fixed_solution</font> solution <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">optimize_fixed</font></b><font color="#990000">(</font>
          fixed_ipopt_options<font color="#990000">,</font>
          random_ipopt_options<font color="#990000">,</font>
          fixed_lower<font color="#990000">,</font>
          fixed_upper<font color="#990000">,</font>
          fix_constraint_lower<font color="#990000">,</font>
          fix_constraint_upper<font color="#990000">,</font>
          fixed_scale<font color="#990000">,</font>
          fixed_in<font color="#990000">,</font>
          random_lower<font color="#990000">,</font>
          random_upper<font color="#990000">,</font>
          random_in
     <font color="#990000">);</font>
     <i><font color="#9A1900">// optimization did not converge which causes warnings</font></i>
     ok <font color="#990000">&amp;=</font> mixed_object<font color="#990000">.</font>warning_count_ <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// should have reached the maximum number of iterations</font></i>
     <i><font color="#9A1900">// (the trace includes iteraiton zero as the starting point)</font></i>
     ok <font color="#990000">&amp;=</font> solution<font color="#990000">.</font>trace_vec<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">6</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> solution<font color="#990000">.</font>trace_vec<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">].</font>iter <font color="#990000">==</font> <font color="#993399">5</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// second optimzation attempt (max_iter large enough with warm start)</font></i>
     mixed_object<font color="#990000">.</font>warning_count_    <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     mixed_object<font color="#990000">.</font>suppress_warning_ <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     solution <font color="#990000">=</font> mixed_object<font color="#990000">.</font><b><font color="#000000">optimize_fixed</font></b><font color="#990000">(</font>
          fixed_ipopt_options<font color="#990000">,</font>
          random_ipopt_options<font color="#990000">,</font>
          fixed_lower<font color="#990000">,</font>
          fixed_upper<font color="#990000">,</font>
          fix_constraint_lower<font color="#990000">,</font>
          fix_constraint_upper<font color="#990000">,</font>
          fixed_scale<font color="#990000">,</font>
          fixed_in<font color="#990000">,</font>
          random_lower<font color="#990000">,</font>
          random_upper<font color="#990000">,</font>
          random_in<font color="#990000">,</font>
          solution<font color="#990000">.</font>warm_start
     <font color="#990000">);</font>
     <i><font color="#9A1900">// should not be any warnings this time</font></i>
     ok <font color="#990000">&amp;=</font> mixed_object<font color="#990000">.</font>warning_count_ <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// this time optimization should have completed in 3 iterations</font></i>
     ok <font color="#990000">&amp;=</font> solution<font color="#990000">.</font>trace_vec<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">4</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> solution<font color="#990000">.</font>trace_vec<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">].</font>iter <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// final solution</font></i>
     <font color="#008080">d_vector</font> fixed_out <font color="#990000">=</font> solution<font color="#990000">.</font>fixed_opt<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n_fixed<font color="#990000">;</font> j<font color="#990000">++)</font>
          ok <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font> fixed_out<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">-</font> z<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">&lt;=</font> tol<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
</font></code>
<hr>Input File: example/user/warm_start.cpp

</body>
</html>
